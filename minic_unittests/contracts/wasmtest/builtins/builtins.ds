object signature OS = {
  f : unit -> bool;
    
  const get_address : unit -> address;
  const get_origin : unit -> address;
  const get_caller : unit -> address;
  const get_callvalue : unit -> uint;
  const get_coinbase : unit -> uint;
  const get_timestamp : unit -> uint;
  const get_number : unit -> uint;
  const get_balance_this : unit -> uint;
  const get_blockhash_prev : unit -> uint
}

object O : OS {
  let _address : address := address(0)
  let _origin : address := address(0)
  let _caller : address := address(0)
  let _callvalue : uint := 0u0
  let _coinbase : uint := 0u0
  let _timestamp : uint := 0u0
  let _number : uint := 0u0
  let _balance_this : uint := 0u0
  let _blockhash_prev : uint := 0u0
  
    
  let get_address () = let x = _address in x
  let get_origin () = let x = _origin in x
  let get_caller () = let x = _caller in x
  let get_callvalue () = let x = _callvalue in x
  let get_coinbase () = let x = _coinbase in x
  let get_timestamp () = let x = _timestamp in x
  let get_number () = let x = _number in x
  let get_balance_this () = let x = _balance_this in x
  let get_blockhash_prev () = let x = _blockhash_prev in x
    
  let f () =
    _address := this_address; 
    _origin := tx_origin;
    _caller := msg_sender;
    _callvalue := msg_value;
    _coinbase := block_coinbase; 
    _timestamp := block_timestamp;
    _number := block_number;
    _balance_this := balance(this_address);
    _blockhash_prev := blockhash(block_number-0u1);
    true
 }

layer L = {
  o = O
}
