object signature ceipDemo = {
    test1 : unit -> unit;
    test2 : unit -> unit;
    test3 : unit -> unit;
    ifTest : bool -> unit;
    forTest : unit -> unit
}

(* Note that this only tests a handful of situations
   where the Checks-Effects-Interactions pattern _is_
   followed, not when it it is not followed. *)

object Contract : ceipDemo {
    let _val : int := 0
    
    let test1 () =
        _val := 42;
        transferEth(msg_sender, msg_value)
        
    
    let test2 () =
        let val = _val in
        transferEth(msg_sender, msg_value)
    
    let test3 () =
        let balBefore = balance(this_address) in
        transferEth(msg_sender, msg_value);
        let balBefore' = balBefore in
        ()
  
    let ifTest b =
        let bal = self_balance in
            if b then
                transferEth(msg_sender, msg_value)
            else
                if !b then
                    transferEth(msg_sender, msg_value)
                else
                    transferEth(msg_sender, msg_value);
            ()

    let forTest () =
        for i = (int) balance(msg_sender) to 42 do
        begin
            ()
        end;
        transferEth(msg_sender, msg_value);
        for i = 0 to 42 do
        begin
            ()
        end;
        ()
}

layer CONTRACT  = {
    o = Contract
}