object signature UnderSig = {
    doTransfer : unit -> unit;
    doTransferReturn42 : unit -> int
}

object Under : UnderSig {
    let doTransfer () =
        transferEth(msg_sender, msg_value);
        ()
    
    let doTransferReturn42 () =
        transferEth(msg_sender, msg_value);
        42
}

object signature CEIPDemo = {
    layerTest1 : unit -> unit;
    layerTest2 : unit -> unit;
    layerTest3 : unit -> unit;
    layerTest4 : unit -> int
}

(* Note that this only tests a handful of situations
   where the Checks-Effects-Interactions pattern _is_
   followed, not when it it is not followed. *)

object Above (Under_object : UnderSig ) : CEIPDemo {
    let _val : int := 0
    
    let layerTest1 () = 
        (* The function below should cause verify_checks_effects_interactions_pattern to fail on it. *)
        
        Under_object.doTransfer();
        Under_object.doTransfer();
        
        ()

    let layerTest2 () =
        (* The function below should cause verify_checks_effects_interactions_pattern to fail on it. *)
        
        let x = Under_object.doTransferReturn42() in
        _val := 0;
        
        ()

    let layerTest3 () =
        (* The function below should cause verify_checks_effects_interactions_pattern to fail on it. *)
        
        let y = 42 in
        let x = Under_object.doTransferReturn42() in
        _val := 0;
        
        ()

    let layerTest4 () =
        (* The function below should cause verify_checks_effects_interactions_pattern to fail on it. *)
        
        let y = 42 in
        let x = Under_object.doTransferReturn42() in
        _val := 0;       
        x
        
}


layer signature UnderLayerSig = {
  Under_object : { }
}

layer UNDER : [{}] UnderLayerSig = {
  Under_object = address(0x10032) <: Under
}

layer ABOVE : [ {Under_object : UnderSig} ]  {above : CEIPDemo}  = {
    above = address(0x10030) <: Above
}

layer CONTRACT = ABOVE @ UNDER
