(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module spblind.LayerBLINDAUCTION for spblind.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import spblind.EdsgerIdents.
Require Import spblind.DataTypes.
Require Import spblind.DataTypeOps.
Require Import spblind.DataTypeProofs.
(*Require Import liblayers.compcertx.MakeProgram.
Require Import liblayers.compcertx.MemWithData.*)
Require Import DeepSpec.lib.Monad.Monad.
Require Import DeepSpec.lib.Monad.MonadState.
Require Import DeepSpec.lib.Monad.StateMonad.
Require Import DeepSpec.lib.Monad.OptionMonad.
Require Import DeepSpec.lib.Monad.MonadZero.
Require Import DeepSpec.core.SynthesisStmt.
Require Import backend.MachineModel.
Existing Instance MonadState_DS.
Existing Instance MonadZero_DS.
Require Export spblind.LayerEVMOPCODE.

Section EdsgerGen.



Context {memModelOps : MemoryModelOps mem}.
Instance GlobalLayerSpec : LayerSpecClass := {
  memModelOps := memModelOps;                                            
  GetHighData := global_abstract_data_type 
}.


Context`{global_abdata : !GlobalAbData init_global_abstract_data global_low_level_invariant}.
Definition BLINDAUCTION_kernel_mode (abd : global_abstract_data_type) := True.
Global Arguments BLINDAUCTION_kernel_mode / abd.

Class Layer_BLINDAUCTION_Context_prf  := {
  (* ensuring global empty data matches those in the object definitions *)
  BLINDAUCTION_init__beneficiary_eq : _beneficiary init_global_abstract_data = (Int256.repr 0);
  BLINDAUCTION_init__biddingEnd_eq : _biddingEnd init_global_abstract_data = (Int256.repr 0);
  BLINDAUCTION_init__revealEnd_eq : _revealEnd init_global_abstract_data = (Int256.repr 0);
  BLINDAUCTION_init__ended_eq : _ended init_global_abstract_data = false;
  BLINDAUCTION_init__bids_eq : _bids init_global_abstract_data = (Int256Tree.empty Bid);
  BLINDAUCTION_init__highestBidder_eq : _highestBidder init_global_abstract_data = (Int256.repr 0);
  BLINDAUCTION_init__highestBid_eq : _highestBid init_global_abstract_data = (Int256.repr 0);
  BLINDAUCTION_init__secondBid_eq : _secondBid init_global_abstract_data = (Int256.repr 0);
  BLINDAUCTION_init__revealed_eq : _revealed init_global_abstract_data = (Int256Tree.empty bool);
  BLINDAUCTION_init__amountOf_eq : _amountOf init_global_abstract_data = (Int256Tree.empty int256);
  BLINDAUCTION_init__events_eq : _events init_global_abstract_data = nil
}.
Context`{CTXT_prf : !Layer_BLINDAUCTION_Context_prf}.

Instance BLINDAUCTION_data_ops : CompatDataOps global_abstract_data_type := {
  empty_data := init_global_abstract_data;
  high_level_invariant d := True;
  (* low_level_invariant := global_low_level_invariant; *) (* Omitted in Ethereum backend. 
  kernel_mode d := BLINDAUCTION_kernel_mode d *)
}.

Instance BLINDAUCTION_data : CompatData global_abstract_data_type := {
  (* low_level_invariant_incr := AbData_low_level_invariant_incr;
  empty_data_low_level_invariant := AbData_empty_data_low_level_invariant; *) (* Omitted in Ethereum backend. *)
  empty_data_high_level_invariant := I
}.

Instance BLINDAUCTION_overlay_spec : OverlaySpecClass := {
  (*cdataOpsHigh := BLINDAUCTION_data_ops;
  cdataHigh := BLINDAUCTION_data *)
}.



(* (* TODO: add this back in for the Ethereum backend. *)
Global Instance Layer_BLINDAUCTION'EVMOPCODE_Context_prf : Layer_EVMOPCODE_Context_prf.
Proof. esplit; apply CTXT_prf.
  (*
  - intros; simpl.
    rewrite BLINDAUCTION_AbData_get_set.
    destruct abd; reflexivity.
  - intros; simpl.
    rewrite BLINDAUCTION_AbData_get_set, BLINDAUCTION_AbData_set_set.
    reflexivity.
  - simpl.
    rewrite BLINDAUCTION_AbData_get_empty_data.
    reflexivity.
  - admit.
  *)
Qed.
Context`{EVMOPCODE_pres_inv : !EVMOPCODE_preserves_invariants}.
*)

Instance BLINDAUCTION_underlay_spec : UnderlaySpecClass := {
  cdataOpsLow := EVMOPCODE_data_ops;
  cdataLow := EVMOPCODE_data;
  (*GetLowLayer := EVMOPCODE_Layer *)
}.


Section OBJECT_BlindAuction_DEFINITION.
  Context`{HM : !HyperMem}.

  (* Object variables *)
  Definition BlindAuction__beneficiary_var := {|
    ltype_tp_marker := tint_U;

    ltype_ident := Values.Iident var_BlindAuction__beneficiary_ident;
    ltype_ghost := false;

    ltype_get := _beneficiary;
    ltype_set := update__beneficiary;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
(*TODO: variables.*) (*  Definition BlindAuction__beneficiary_globvar : AST.globvar type :=
    let ty := unpair_ty tint_U in
    {| AST.gvar_info := ty;
       AST.gvar_init := AST.Init_space (sizeof ty) :: nil; (* XXX: until we can translate [Cval] to [AST.init_data] *)
       AST.gvar_readonly := false;
       AST.gvar_volatile := false
    |}.*)
  Definition BlindAuction__biddingEnd_var := {|
    ltype_tp_marker := tint_U;

    ltype_ident := Values.Iident var_BlindAuction__biddingEnd_ident;
    ltype_ghost := false;

    ltype_get := _biddingEnd;
    ltype_set := update__biddingEnd;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
(*TODO: variables.*) (*  Definition BlindAuction__biddingEnd_globvar : AST.globvar type :=
    let ty := unpair_ty tint_U in
    {| AST.gvar_info := ty;
       AST.gvar_init := AST.Init_space (sizeof ty) :: nil; (* XXX: until we can translate [Cval] to [AST.init_data] *)
       AST.gvar_readonly := false;
       AST.gvar_volatile := false
    |}.*)
  Definition BlindAuction__revealEnd_var := {|
    ltype_tp_marker := tint_U;

    ltype_ident := Values.Iident var_BlindAuction__revealEnd_ident;
    ltype_ghost := false;

    ltype_get := _revealEnd;
    ltype_set := update__revealEnd;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
(*TODO: variables.*) (*  Definition BlindAuction__revealEnd_globvar : AST.globvar type :=
    let ty := unpair_ty tint_U in
    {| AST.gvar_info := ty;
       AST.gvar_init := AST.Init_space (sizeof ty) :: nil; (* XXX: until we can translate [Cval] to [AST.init_data] *)
       AST.gvar_readonly := false;
       AST.gvar_volatile := false
    |}.*)
  Definition BlindAuction__ended_var := {|
    ltype_tp_marker := tint_bool;

    ltype_ident := Values.Iident var_BlindAuction__ended_ident;
    ltype_ghost := false;

    ltype_get := _ended;
    ltype_set := update__ended;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
(*TODO: variables.*) (*  Definition BlindAuction__ended_globvar : AST.globvar type :=
    let ty := unpair_ty tint_bool in
    {| AST.gvar_info := ty;
       AST.gvar_init := AST.Init_space (sizeof ty) :: nil; (* XXX: until we can translate [Cval] to [AST.init_data] *)
       AST.gvar_readonly := false;
       AST.gvar_volatile := false
    |}.*)
  Definition BlindAuction__bids_var := {|
    ltype_tp_marker := thash_Bid_HASH_Z_Bid;

    ltype_ident := Values.Iident var_BlindAuction__bids_ident;
    ltype_ghost := false;

    ltype_get := _bids;
    ltype_set := update__bids;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
(*TODO: variables.*) (*  Definition BlindAuction__bids_globvar : AST.globvar type :=
    let ty := unpair_ty thash_Bid_HASH_Z_Bid in
    {| AST.gvar_info := ty;
       AST.gvar_init := AST.Init_space (sizeof ty) :: nil; (* XXX: until we can translate [Cval] to [AST.init_data] *)
       AST.gvar_readonly := false;
       AST.gvar_volatile := false
    |}.*)
  Definition BlindAuction__highestBidder_var := {|
    ltype_tp_marker := tint_U;

    ltype_ident := Values.Iident var_BlindAuction__highestBidder_ident;
    ltype_ghost := false;

    ltype_get := _highestBidder;
    ltype_set := update__highestBidder;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
(*TODO: variables.*) (*  Definition BlindAuction__highestBidder_globvar : AST.globvar type :=
    let ty := unpair_ty tint_U in
    {| AST.gvar_info := ty;
       AST.gvar_init := AST.Init_space (sizeof ty) :: nil; (* XXX: until we can translate [Cval] to [AST.init_data] *)
       AST.gvar_readonly := false;
       AST.gvar_volatile := false
    |}.*)
  Definition BlindAuction__highestBid_var := {|
    ltype_tp_marker := tint_U;

    ltype_ident := Values.Iident var_BlindAuction__highestBid_ident;
    ltype_ghost := false;

    ltype_get := _highestBid;
    ltype_set := update__highestBid;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
(*TODO: variables.*) (*  Definition BlindAuction__highestBid_globvar : AST.globvar type :=
    let ty := unpair_ty tint_U in
    {| AST.gvar_info := ty;
       AST.gvar_init := AST.Init_space (sizeof ty) :: nil; (* XXX: until we can translate [Cval] to [AST.init_data] *)
       AST.gvar_readonly := false;
       AST.gvar_volatile := false
    |}.*)
  Definition BlindAuction__secondBid_var := {|
    ltype_tp_marker := tint_U;

    ltype_ident := Values.Iident var_BlindAuction__secondBid_ident;
    ltype_ghost := false;

    ltype_get := _secondBid;
    ltype_set := update__secondBid;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
(*TODO: variables.*) (*  Definition BlindAuction__secondBid_globvar : AST.globvar type :=
    let ty := unpair_ty tint_U in
    {| AST.gvar_info := ty;
       AST.gvar_init := AST.Init_space (sizeof ty) :: nil; (* XXX: until we can translate [Cval] to [AST.init_data] *)
       AST.gvar_readonly := false;
       AST.gvar_volatile := false
    |}.*)
  Definition BlindAuction__revealed_var := {|
    ltype_tp_marker := thash_int_HASH_Z_bool;

    ltype_ident := Values.Iident var_BlindAuction__revealed_ident;
    ltype_ghost := false;

    ltype_get := _revealed;
    ltype_set := update__revealed;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
(*TODO: variables.*) (*  Definition BlindAuction__revealed_globvar : AST.globvar type :=
    let ty := unpair_ty thash_int_HASH_Z_bool in
    {| AST.gvar_info := ty;
       AST.gvar_init := AST.Init_space (sizeof ty) :: nil; (* XXX: until we can translate [Cval] to [AST.init_data] *)
       AST.gvar_readonly := false;
       AST.gvar_volatile := false
    |}.*)
  Definition BlindAuction__amountOf_var := {|
    ltype_tp_marker := thash_int_HASH_Z_Z;

    ltype_ident := Values.Iident var_BlindAuction__amountOf_ident;
    ltype_ghost := false;

    ltype_get := _amountOf;
    ltype_set := update__amountOf;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
(*TODO: variables.*) (*  Definition BlindAuction__amountOf_globvar : AST.globvar type :=
    let ty := unpair_ty thash_int_HASH_Z_Z in
    {| AST.gvar_info := ty;
       AST.gvar_init := AST.Init_space (sizeof ty) :: nil; (* XXX: until we can translate [Cval] to [AST.init_data] *)
       AST.gvar_readonly := false;
       AST.gvar_volatile := false
    |}.*)

  Definition BlindAuction_initialize := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* biddingTime : *) int_U_pair (cons (* revealTime : *) int_U_pair nil));
    FC_returns := void_unit_pair;
    FC_body := (CCsequence
      (CCstore
        (LCvar BlindAuction__beneficiary_var)
        (@ECbuiltin0 _ _  _ builtin0_caller_impl))
      (CCsequence
        (CCstore
          (LCvar BlindAuction__biddingEnd_var)
          (ECbinop tint_U Oadd
            (@ECbuiltin0 _ _  _ builtin0_number_impl)
            (ECtempvar tint_U 11%positive (* biddingTime *))))
        (CCsequence
          (CCstore
            (LCvar BlindAuction__revealEnd_var)
            (ECbinop tint_U Oadd
              (ECbinop tint_U Oadd
                (@ECbuiltin0 _ _  _ builtin0_number_impl)
                (ECtempvar tint_U 11%positive (* biddingTime *)))
              (ECtempvar tint_U 12%positive (* revealTime *))))
          (CClet (* beneficiary := *) 13%positive
            (CCload (LCvar BlindAuction__beneficiary_var))
            (CCsequence
              (CCstore
                (LCvar BlindAuction__highestBidder_var)
                (ECtempvar tint_U 13%positive (* beneficiary *)))
              (CCsequence
                (CCstore
                  (LChash tint_bool
                    (LCvar BlindAuction__revealed_var)
                    (ECtempvar tint_U 13%positive (* beneficiary *)))
                  (ECconst_int256 tint_bool true Int256.one))
                (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))))))))
  |}.
  Lemma BlindAuction_initialize_wf
      : synth_func_wellformed BlindAuction_initialize.
  Proof. solve_wellformed. Defined.
  Definition BlindAuction_initialize_opt :int256 -> int256 ->  machine_env -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in synth_func_spec_opt BlindAuction_initialize BlindAuction_initialize_wf.
  Definition BlindAuction_initialize_spec_hlist_opt args :=
    @apply_param_func BlindAuction_initialize.(FC_params) _
                      (BlindAuction_initialize_opt) args.
  Definition BlindAuction_initialize_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in *)
  synth_func_spec_cond BlindAuction_initialize BlindAuction_initialize_wf.

  Definition BlindAuction_initialize_prim := {|
    PRIMident := ident_BlindAuction_initialize;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := BlindAuction_initialize.(FC_params);
    PRIMret_marker := BlindAuction_initialize.(FC_returns);
    PRIMcond := BlindAuction_initialize_spec_cond;
    (* PRIMsem := BlindAuction_initialize_spec_hlist; *)
    PRIMsem_opt := BlindAuction_initialize_spec_hlist_opt
  |}.

  Lemma BlindAuction_initialize_spec_hlist_opt_eq :
    BlindAuction_initialize_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt BlindAuction_initialize BlindAuction_initialize_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]. *)
     reflexivity. 
  Qed.
  Definition BlindAuction_initialize_cfun :=
  Eval cbv in synth_func_func BlindAuction_initialize.

  Definition BlindAuction_initialize_cond  a0 a1 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_cond BlindAuction_initialize BlindAuction_initialize_wf
								      a0 a1 me d.
  
  Lemma BlindAuction_initialize_cond_eq : forall  a0 a1 me d, 
    BlindAuction_initialize_cond  a0 a1 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_cond BlindAuction_initialize BlindAuction_initialize_wf  a0 a1 me d.
    Proof.
      intros  a0 a1 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_initialize_obligation  a0 a1 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_obligation BlindAuction_initialize BlindAuction_initialize_wf
								      a0 a1 me d.
  
  Lemma BlindAuction_initialize_obligation_eq : forall  a0 a1 me d, 
    BlindAuction_initialize_obligation  a0 a1 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_obligation BlindAuction_initialize BlindAuction_initialize_wf  a0 a1 me d.
    Proof.
      intros  a0 a1 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_initialize_spec :=
  Eval cbv [sf_mem sf_return fst snd BlindAuction_initialize_opt] in
    fun  a0 a1 me => execStateT (BlindAuction_initialize_opt a0 a1 me).
  Lemma BlindAuction_initialize_spec_eq :
    BlindAuction_initialize_spec =
    fun  a0 a1 me => execStateT (synth_func_spec_opt BlindAuction_initialize BlindAuction_initialize_wf a0 a1 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          
          _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
    reflexivity.
  Qed.

Global Opaque BlindAuction_initialize_opt.

  Definition BlindAuction_transferb := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* fromaddr : *) int_U_pair (cons (* toaddr : *) int_U_pair (cons (* amount : *) int_U_pair nil)));
    FC_returns := void_unit_pair;
    FC_body := (CClet (* base := *) 14%positive
      (CCload (LChash tint_U
        (LCvar BlindAuction__amountOf_var)
        (ECtempvar tint_U 12%positive (* toaddr *))))
      (CCsequence
        (CCstore
          (LChash tint_U
            (LCvar BlindAuction__amountOf_var)
            (ECtempvar tint_U 12%positive (* toaddr *)))
          (ECbinop tint_U Oadd
            (ECtempvar tint_U 14%positive (* base *))
            (ECtempvar tint_U 13%positive (* amount *))))
        (CClet (* base := *) 15%positive
          (CCload (LChash tint_U
            (LCvar BlindAuction__amountOf_var)
            (ECtempvar tint_U 11%positive (* fromaddr *))))
          (CCsequence
            (CCstore
              (LChash tint_U
                (LCvar BlindAuction__amountOf_var)
                (ECtempvar tint_U 11%positive (* fromaddr *)))
              (ECbinop tint_U Osub
                (ECtempvar tint_U 15%positive (* base *))
                (ECtempvar tint_U 13%positive (* amount *))))
            (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))))))
  |}.
  Lemma BlindAuction_transferb_wf
      : synth_func_wellformed BlindAuction_transferb.
  Proof. solve_wellformed. Defined.
  Definition BlindAuction_transferb_opt :int256 -> int256 -> int256 ->  machine_env -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in synth_func_spec_opt BlindAuction_transferb BlindAuction_transferb_wf.
  Definition BlindAuction_transferb_spec_hlist_opt args :=
    @apply_param_func BlindAuction_transferb.(FC_params) _
                      (BlindAuction_transferb_opt) args.
  Definition BlindAuction_transferb_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in *)
  synth_func_spec_cond BlindAuction_transferb BlindAuction_transferb_wf.

  Definition BlindAuction_transferb_prim := {|
    PRIMident := ident_BlindAuction_transferb;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := BlindAuction_transferb.(FC_params);
    PRIMret_marker := BlindAuction_transferb.(FC_returns);
    PRIMcond := BlindAuction_transferb_spec_cond;
    (* PRIMsem := BlindAuction_transferb_spec_hlist; *)
    PRIMsem_opt := BlindAuction_transferb_spec_hlist_opt
  |}.

  Lemma BlindAuction_transferb_spec_hlist_opt_eq :
    BlindAuction_transferb_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt BlindAuction_transferb BlindAuction_transferb_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]. *)
     reflexivity. 
  Qed.
  Definition BlindAuction_transferb_cfun :=
  Eval cbv in synth_func_func BlindAuction_transferb.

  Definition BlindAuction_transferb_cond  a0 a1 a2 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_cond BlindAuction_transferb BlindAuction_transferb_wf
								      a0 a1 a2 me d.
  
  Lemma BlindAuction_transferb_cond_eq : forall  a0 a1 a2 me d, 
    BlindAuction_transferb_cond  a0 a1 a2 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_cond BlindAuction_transferb BlindAuction_transferb_wf  a0 a1 a2 me d.
    Proof.
      intros  a0 a1 a2 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_transferb_obligation  a0 a1 a2 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_obligation BlindAuction_transferb BlindAuction_transferb_wf
								      a0 a1 a2 me d.
  
  Lemma BlindAuction_transferb_obligation_eq : forall  a0 a1 a2 me d, 
    BlindAuction_transferb_obligation  a0 a1 a2 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_obligation BlindAuction_transferb BlindAuction_transferb_wf  a0 a1 a2 me d.
    Proof.
      intros  a0 a1 a2 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_transferb_spec :=
  Eval cbv [sf_mem sf_return fst snd BlindAuction_transferb_opt] in
    fun  a0 a1 a2 me => execStateT (BlindAuction_transferb_opt a0 a1 a2 me).
  Lemma BlindAuction_transferb_spec_eq :
    BlindAuction_transferb_spec =
    fun  a0 a1 a2 me => execStateT (synth_func_spec_opt BlindAuction_transferb BlindAuction_transferb_wf a0 a1 a2 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          
          _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
    reflexivity.
  Qed.

Global Opaque BlindAuction_transferb_opt.

  Definition BlindAuction_reveal := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* value : *) int_U_pair (cons (* secret : *) int_hashvalue_pair nil));
    FC_returns := void_unit_pair;
    FC_body := (CClet (* biddingEnd := *) 13%positive
      (CCload (LCvar BlindAuction__biddingEnd_var))
      (CClet (* revealEnd := *) 14%positive
        (CCload (LCvar BlindAuction__revealEnd_var))
        (CCsequence
          (CCassert (CCyield (ECbinop tint_bool Ogt
            (@ECbuiltin0 _ _  _ builtin0_number_impl)
            (ECtempvar tint_U 13%positive (* biddingEnd *)))))
          (CCsequence
            (CCassert (CCyield (ECbinop tint_bool Olt
              (@ECbuiltin0 _ _  _ builtin0_number_impl)
              (ECtempvar tint_U 14%positive (* revealEnd *)))))
            (CClet (* hashed := *) 17%positive
              (CCyield (ECbinop tint_hashvalue Osha_2
                (ECtempvar tint_U 11%positive (* value *))
                (ECtempvar tint_hashvalue 12%positive (* secret *))))
              (CClet (* blindedBid := *) 18%positive
                (CCload (LCfield tint_hashvalue Bid_struct__blindedBid_ident
                  (LChash tBid_Bid
                    (LCvar BlindAuction__bids_var)
                    (@ECbuiltin0 _ _  _ builtin0_caller_impl))))
                (CClet (* deposit := *) 19%positive
                  (CCload (LCfield tint_U Bid_struct__deposit_ident
                    (LChash tBid_Bid
                      (LCvar BlindAuction__bids_var)
                      (@ECbuiltin0 _ _  _ builtin0_caller_impl))))
                  (CClet (* revealedp := *) 20%positive
                    (CCload (LChash tint_bool
                      (LCvar BlindAuction__revealed_var)
                      (@ECbuiltin0 _ _  _ builtin0_caller_impl)))
                    (CCsequence
                      (CCassert (CCyield (ECtempvar tint_bool 20%positive (* revealedp *))))
                      (CCsequence
                        (CCstore
                          (LChash tint_bool
                            (LCvar BlindAuction__revealed_var)
                            (@ECbuiltin0 _ _  _ builtin0_caller_impl))
                          (ECconst_int256 tint_bool true Int256.one))
                        (CCifthenelse (ECbinop tint_bool Oeq
                            (ECtempvar tint_hashvalue 17%positive (* hashed *))
                            (ECtempvar tint_hashvalue 18%positive (* blindedBid *)))
                          (CClet (* beneficiary := *) 22%positive
                            (CCload (LCvar BlindAuction__beneficiary_var))
                            (CCifthenelse (ECbinop tint_bool Ogt
                                (ECtempvar tint_U 11%positive (* value *))
                                (ECtempvar tint_U 19%positive (* deposit *)))
                              (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))
                              (CClet (* highestBid := *) 23%positive
                                (CCload (LCvar BlindAuction__highestBid_var))
                                (CCifthenelse (ECbinop tint_bool Oge
                                    (ECtempvar tint_U 11%positive (* value *))
                                    (ECtempvar tint_U 23%positive (* highestBid *)))
                                  (CClet (* highestBidder := *) 24%positive
                                    (CCload (LCvar BlindAuction__highestBidder_var))
                                    (CClet (* secondBid := *) 25%positive
                                      (CCload (LCvar BlindAuction__secondBid_var))
                                      (CClet (* base := *) 26%positive
                                        (CCload (LChash tint_U
                                          (LCvar BlindAuction__amountOf_var)
                                          (ECtempvar tint_U 24%positive (* highestBidder *))))
                                        (CCsequence
                                          (CCstore
                                            (LChash tint_U
                                              (LCvar BlindAuction__amountOf_var)
                                              (ECtempvar tint_U 24%positive (* highestBidder *)))
                                            (ECbinop tint_U Oadd
                                              (ECtempvar tint_U 26%positive (* base *))
                                              (ECtempvar tint_U 25%positive (* secondBid *))))
                                          (CClet (* base := *) 27%positive
                                            (CCload (LChash tint_U
                                              (LCvar BlindAuction__amountOf_var)
                                              (ECtempvar tint_U 22%positive (* beneficiary *))))
                                            (CCsequence
                                              (CCstore
                                                (LChash tint_U
                                                  (LCvar BlindAuction__amountOf_var)
                                                  (ECtempvar tint_U 22%positive (* beneficiary *)))
                                                (ECbinop tint_U Osub
                                                  (ECtempvar tint_U 27%positive (* base *))
                                                  (ECtempvar tint_U 25%positive (* secondBid *))))
                                              (CCsequence
                                                (CCstore
                                                  (LCvar BlindAuction__secondBid_var)
                                                  (ECtempvar tint_U 23%positive (* highestBid *)))
                                                (CCsequence
                                                  (CCstore
                                                    (LCvar BlindAuction__highestBid_var)
                                                    (ECtempvar tint_U 11%positive (* value *)))
                                                  (CCsequence
                                                    (CCstore
                                                      (LCvar BlindAuction__highestBidder_var)
                                                      (@ECbuiltin0 _ _  _ builtin0_caller_impl))
                                                    (CClet (* highestBidder := *) 28%positive
                                                      (CCload (LCvar BlindAuction__highestBidder_var))
                                                      (CClet (* secondBid := *) 29%positive
                                                        (CCload (LCvar BlindAuction__secondBid_var))
                                                        (CClet (* base := *) 30%positive
                                                          (CCload (LChash tint_U
                                                            (LCvar BlindAuction__amountOf_var)
                                                            (ECtempvar tint_U 22%positive (* beneficiary *))))
                                                          (CCsequence
                                                            (CCstore
                                                              (LChash tint_U
                                                                (LCvar BlindAuction__amountOf_var)
                                                                (ECtempvar tint_U 22%positive (* beneficiary *)))
                                                              (ECbinop tint_U Oadd
                                                                (ECtempvar tint_U 30%positive (* base *))
                                                                (ECtempvar tint_U 29%positive (* secondBid *))))
                                                            (CClet (* base := *) 31%positive
                                                              (CCload (LChash tint_U
                                                                (LCvar BlindAuction__amountOf_var)
                                                                (ECtempvar tint_U 28%positive (* highestBidder *))))
                                                              (CCsequence
                                                                (CCstore
                                                                  (LChash tint_U
                                                                    (LCvar BlindAuction__amountOf_var)
                                                                    (ECtempvar tint_U 28%positive (* highestBidder *)))
                                                                  (ECbinop tint_U Osub
                                                                    (ECtempvar tint_U 31%positive (* base *))
                                                                    (ECtempvar tint_U 29%positive (* secondBid *))))
                                                                (CCyield (ECconst_int256 tvoid_unit tt Int256.zero)))))))))))))))))
                                  (CClet (* secondBid := *) 32%positive
                                    (CCload (LCvar BlindAuction__secondBid_var))
                                    (CCifthenelse (ECbinop tint_bool Ogt
                                        (ECtempvar tint_U 11%positive (* value *))
                                        (ECtempvar tint_U 32%positive (* secondBid *)))
                                      (CClet (* highestBidder := *) 33%positive
                                        (CCload (LCvar BlindAuction__highestBidder_var))
                                        (CClet (* base := *) 34%positive
                                          (CCload (LChash tint_U
                                            (LCvar BlindAuction__amountOf_var)
                                            (ECtempvar tint_U 33%positive (* highestBidder *))))
                                          (CCsequence
                                            (CCstore
                                              (LChash tint_U
                                                (LCvar BlindAuction__amountOf_var)
                                                (ECtempvar tint_U 33%positive (* highestBidder *)))
                                              (ECbinop tint_U Oadd
                                                (ECtempvar tint_U 34%positive (* base *))
                                                (ECtempvar tint_U 32%positive (* secondBid *))))
                                            (CClet (* base := *) 35%positive
                                              (CCload (LChash tint_U
                                                (LCvar BlindAuction__amountOf_var)
                                                (ECtempvar tint_U 22%positive (* beneficiary *))))
                                              (CCsequence
                                                (CCstore
                                                  (LChash tint_U
                                                    (LCvar BlindAuction__amountOf_var)
                                                    (ECtempvar tint_U 22%positive (* beneficiary *)))
                                                  (ECbinop tint_U Osub
                                                    (ECtempvar tint_U 35%positive (* base *))
                                                    (ECtempvar tint_U 32%positive (* secondBid *))))
                                                (CCsequence
                                                  (CCstore
                                                    (LCvar BlindAuction__secondBid_var)
                                                    (ECtempvar tint_U 11%positive (* value *)))
                                                  (CClet (* secondBid := *) 36%positive
                                                    (CCload (LCvar BlindAuction__secondBid_var))
                                                    (CClet (* base := *) 37%positive
                                                      (CCload (LChash tint_U
                                                        (LCvar BlindAuction__amountOf_var)
                                                        (ECtempvar tint_U 22%positive (* beneficiary *))))
                                                      (CCsequence
                                                        (CCstore
                                                          (LChash tint_U
                                                            (LCvar BlindAuction__amountOf_var)
                                                            (ECtempvar tint_U 22%positive (* beneficiary *)))
                                                          (ECbinop tint_U Oadd
                                                            (ECtempvar tint_U 37%positive (* base *))
                                                            (ECtempvar tint_U 36%positive (* secondBid *))))
                                                        (CClet (* base := *) 38%positive
                                                          (CCload (LChash tint_U
                                                            (LCvar BlindAuction__amountOf_var)
                                                            (ECtempvar tint_U 33%positive (* highestBidder *))))
                                                          (CCsequence
                                                            (CCstore
                                                              (LChash tint_U
                                                                (LCvar BlindAuction__amountOf_var)
                                                                (ECtempvar tint_U 33%positive (* highestBidder *)))
                                                              (ECbinop tint_U Osub
                                                                (ECtempvar tint_U 38%positive (* base *))
                                                                (ECtempvar tint_U 36%positive (* secondBid *))))
                                                            (CCyield (ECconst_int256 tvoid_unit tt Int256.zero)))))))))))))
                                      (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))))))))
                          (CCyield (ECconst_int256 tvoid_unit tt Int256.zero)))))))))))))
  |}.
  Lemma BlindAuction_reveal_wf
      : synth_func_wellformed BlindAuction_reveal.
  Proof. solve_wellformed. Defined.
  Definition BlindAuction_reveal_opt :int256 -> hashvalue ->  machine_env -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in synth_func_spec_opt BlindAuction_reveal BlindAuction_reveal_wf.
  Definition BlindAuction_reveal_spec_hlist_opt args :=
    @apply_param_func BlindAuction_reveal.(FC_params) _
                      (BlindAuction_reveal_opt) args.
  Definition BlindAuction_reveal_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in *)
  synth_func_spec_cond BlindAuction_reveal BlindAuction_reveal_wf.

  Definition BlindAuction_reveal_prim := {|
    PRIMident := ident_BlindAuction_reveal;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := BlindAuction_reveal.(FC_params);
    PRIMret_marker := BlindAuction_reveal.(FC_returns);
    PRIMcond := BlindAuction_reveal_spec_cond;
    (* PRIMsem := BlindAuction_reveal_spec_hlist; *)
    PRIMsem_opt := BlindAuction_reveal_spec_hlist_opt
  |}.

  Lemma BlindAuction_reveal_spec_hlist_opt_eq :
    BlindAuction_reveal_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt BlindAuction_reveal BlindAuction_reveal_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]. *)
     reflexivity. 
  Qed.
  Definition BlindAuction_reveal_cfun :=
  Eval cbv in synth_func_func BlindAuction_reveal.

  Definition BlindAuction_reveal_cond  a0 a1 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_cond BlindAuction_reveal BlindAuction_reveal_wf
								      a0 a1 me d.
  
  Lemma BlindAuction_reveal_cond_eq : forall  a0 a1 me d, 
    BlindAuction_reveal_cond  a0 a1 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_cond BlindAuction_reveal BlindAuction_reveal_wf  a0 a1 me d.
    Proof.
      intros  a0 a1 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_reveal_obligation  a0 a1 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_obligation BlindAuction_reveal BlindAuction_reveal_wf
								      a0 a1 me d.
  
  Lemma BlindAuction_reveal_obligation_eq : forall  a0 a1 me d, 
    BlindAuction_reveal_obligation  a0 a1 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_obligation BlindAuction_reveal BlindAuction_reveal_wf  a0 a1 me d.
    Proof.
      intros  a0 a1 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_reveal_spec :=
  Eval cbv [sf_mem sf_return fst snd BlindAuction_reveal_opt] in
    fun  a0 a1 me => execStateT (BlindAuction_reveal_opt a0 a1 me).
  Lemma BlindAuction_reveal_spec_eq :
    BlindAuction_reveal_spec =
    fun  a0 a1 me => execStateT (synth_func_spec_opt BlindAuction_reveal BlindAuction_reveal_wf a0 a1 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          
          _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
    reflexivity.
  Qed.

Global Opaque BlindAuction_reveal_opt.

  Definition BlindAuction_bid := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* blindedBid : *) int_hashvalue_pair nil);
    FC_returns := void_unit_pair;
    FC_body := (CClet (* biddingEnd := *) 12%positive
      (CCload (LCvar BlindAuction__biddingEnd_var))
      (CClet (* beneficiary := *) 13%positive
        (CCload (LCvar BlindAuction__beneficiary_var))
        (CCsequence
          (CCassert (CCyield (ECbinop tint_bool Olt
            (@ECbuiltin0 _ _  _ builtin0_number_impl)
            (ECtempvar tint_U 12%positive (* biddingEnd *)))))
          (CCsequence
            (CCassert (CCyield (ECbinop tint_bool One
              (@ECbuiltin0 _ _  _ builtin0_caller_impl)
              (ECtempvar tint_U 13%positive (* beneficiary *)))))
            (CClet (* old_deposit := *) 16%positive
              (CCload (LCfield tint_U Bid_struct__deposit_ident
                (LChash tBid_Bid
                  (LCvar BlindAuction__bids_var)
                  (@ECbuiltin0 _ _  _ builtin0_caller_impl))))
              (CCsequence
                (CCifthenelse (ECbinop tint_bool One
                    (ECtempvar tint_U 16%positive (* old_deposit *))
                    (ECconst_int256 tint_U (Int256.repr 0) (Int256.repr 0)))
                  (CCsequence
                    (CCstore
                      (LCfield tint_hashvalue Bid_struct__blindedBid_ident
                        (LChash tBid_Bid
                          (LCvar BlindAuction__bids_var)
                          (@ECbuiltin0 _ _  _ builtin0_caller_impl)))
                      (ECtempvar tint_hashvalue 11%positive (* blindedBid *)))
                    (CCsequence
                      (CCstore
                        (LCfield tint_U Bid_struct__deposit_ident
                          (LChash tBid_Bid
                            (LCvar BlindAuction__bids_var)
                            (@ECbuiltin0 _ _  _ builtin0_caller_impl)))
                        (@ECbuiltin0 _ _  _ builtin0_callvalue_impl))
                      (CCsequence
                        (CCstore
                          (LChash tint_U
                            (LCvar BlindAuction__amountOf_var)
                            (@ECbuiltin0 _ _  _ builtin0_caller_impl))
                          (@ECbuiltin0 _ _  _ builtin0_callvalue_impl))
                        (CCsequence
                          (CCcall EVMOpcode_transfer_prim
                            (HCons int_U_pair _
                              (@ECbuiltin0 _ _  _ builtin0_caller_impl)
                              (HCons int_U_pair _
                                (ECtempvar tint_U 16%positive (* old_deposit *))
                                HNil)))
                          (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))))))
                  (CCconstr
                    (cons Bid_struct__blindedBid_ident (cons Bid_struct__deposit_ident nil))
                    (cons (* _blindedBid : *) int_hashvalue_pair (cons (* _deposit : *) int_U_pair nil))
                    (LChash tBid_Bid
                      (LCvar BlindAuction__bids_var)
                      (@ECbuiltin0 _ _  _ builtin0_caller_impl))
                    (HCons int_hashvalue_pair _
                      (ECtempvar tint_hashvalue 11%positive (* blindedBid *))
                      (HCons int_U_pair _
                        (@ECbuiltin0 _ _  _ builtin0_callvalue_impl)
                        HNil))
                    Build_Bid))
                (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))))))))
  |}.
  Lemma BlindAuction_bid_wf
      : synth_func_wellformed BlindAuction_bid.
  Proof. solve_wellformed. Defined.
  Definition BlindAuction_bid_opt :hashvalue ->  machine_env -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in synth_func_spec_opt BlindAuction_bid BlindAuction_bid_wf.
  Definition BlindAuction_bid_spec_hlist_opt args :=
    @apply_param_func BlindAuction_bid.(FC_params) _
                      (BlindAuction_bid_opt) args.
  Definition BlindAuction_bid_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in *)
  synth_func_spec_cond BlindAuction_bid BlindAuction_bid_wf.

  Definition BlindAuction_bid_prim := {|
    PRIMident := ident_BlindAuction_bid;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := BlindAuction_bid.(FC_params);
    PRIMret_marker := BlindAuction_bid.(FC_returns);
    PRIMcond := BlindAuction_bid_spec_cond;
    (* PRIMsem := BlindAuction_bid_spec_hlist; *)
    PRIMsem_opt := BlindAuction_bid_spec_hlist_opt
  |}.

  Lemma BlindAuction_bid_spec_hlist_opt_eq :
    BlindAuction_bid_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt BlindAuction_bid BlindAuction_bid_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]. *)
     reflexivity. 
  Qed.
  Definition BlindAuction_bid_cfun :=
  Eval cbv in synth_func_func BlindAuction_bid.

  Definition BlindAuction_bid_cond  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond BlindAuction_bid BlindAuction_bid_wf
								      a0 me d.
  
  Lemma BlindAuction_bid_cond_eq : forall  a0 me d, 
    BlindAuction_bid_cond  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond BlindAuction_bid BlindAuction_bid_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_bid_obligation  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation BlindAuction_bid BlindAuction_bid_wf
								      a0 me d.
  
  Lemma BlindAuction_bid_obligation_eq : forall  a0 me d, 
    BlindAuction_bid_obligation  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation BlindAuction_bid BlindAuction_bid_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_bid_spec :=
  Eval cbv [sf_mem sf_return fst snd BlindAuction_bid_opt] in
    fun  a0 me => execStateT (BlindAuction_bid_opt a0 me).
  Lemma BlindAuction_bid_spec_eq :
    BlindAuction_bid_spec =
    fun  a0 me => execStateT (synth_func_spec_opt BlindAuction_bid BlindAuction_bid_wf a0 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          
          _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
    reflexivity.
  Qed.

Global Opaque BlindAuction_bid_opt.

  Definition BlindAuction_withdraw := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := nil;
    FC_returns := void_unit_pair;
    FC_body := (CClet (* revealEnd := *) 12%positive
      (CCload (LCvar BlindAuction__revealEnd_var))
      (CClet (* ended := *) 13%positive
        (CCload (LCvar BlindAuction__ended_var))
        (CCsequence
          (CCassert (CCyield (ECbinop tint_bool Ogt
            (@ECbuiltin0 _ _  _ builtin0_number_impl)
            (ECtempvar tint_U 12%positive (* revealEnd *)))))
          (CCsequence
            (CCassert (CCyield (ECunop tint_bool Onotbool (ECtempvar tint_bool 13%positive (* ended *)))))
            (CClet (* amount := *) 16%positive
              (CCload (LChash tint_U
                (LCvar BlindAuction__amountOf_var)
                (@ECbuiltin0 _ _  _ builtin0_caller_impl)))
              (CCsequence
                (CCstore
                  (LChash tint_U
                    (LCvar BlindAuction__amountOf_var)
                    (@ECbuiltin0 _ _  _ builtin0_caller_impl))
                  (ECconst_int256 tint_U (Int256.repr 0) (Int256.repr 0)))
                (CCsequence
                  (CCcall EVMOpcode_transfer_prim
                    (HCons int_U_pair _
                      (@ECbuiltin0 _ _  _ builtin0_caller_impl)
                      (HCons int_U_pair _
                        (ECtempvar tint_U 16%positive (* amount *))
                        HNil)))
                  (CCyield (ECconst_int256 tvoid_unit tt Int256.zero)))))))))
  |}.
  Lemma BlindAuction_withdraw_wf
      : synth_func_wellformed BlindAuction_withdraw.
  Proof. solve_wellformed. Defined.
  Definition BlindAuction_withdraw_opt : machine_env -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in synth_func_spec_opt BlindAuction_withdraw BlindAuction_withdraw_wf.
  Definition BlindAuction_withdraw_spec_hlist_opt args :=
    @apply_param_func BlindAuction_withdraw.(FC_params) _
                      (BlindAuction_withdraw_opt) args.
  Definition BlindAuction_withdraw_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in *)
  synth_func_spec_cond BlindAuction_withdraw BlindAuction_withdraw_wf.

  Definition BlindAuction_withdraw_prim := {|
    PRIMident := ident_BlindAuction_withdraw;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := BlindAuction_withdraw.(FC_params);
    PRIMret_marker := BlindAuction_withdraw.(FC_returns);
    PRIMcond := BlindAuction_withdraw_spec_cond;
    (* PRIMsem := BlindAuction_withdraw_spec_hlist; *)
    PRIMsem_opt := BlindAuction_withdraw_spec_hlist_opt
  |}.

  Lemma BlindAuction_withdraw_spec_hlist_opt_eq :
    BlindAuction_withdraw_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt BlindAuction_withdraw BlindAuction_withdraw_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]. *)
     reflexivity. 
  Qed.
  Definition BlindAuction_withdraw_cfun :=
  Eval cbv in synth_func_func BlindAuction_withdraw.

  Definition BlindAuction_withdraw_cond  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    high_level_invariant d ->
    synth_func_cond BlindAuction_withdraw BlindAuction_withdraw_wf
								      me d.
  
  Lemma BlindAuction_withdraw_cond_eq : forall  me d, 
    BlindAuction_withdraw_cond  me d ->
    high_level_invariant d ->
    synth_func_cond BlindAuction_withdraw BlindAuction_withdraw_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_withdraw_obligation  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    high_level_invariant d ->
    synth_func_obligation BlindAuction_withdraw BlindAuction_withdraw_wf
								      me d.
  
  Lemma BlindAuction_withdraw_obligation_eq : forall  me d, 
    BlindAuction_withdraw_obligation  me d ->
    high_level_invariant d ->
    synth_func_obligation BlindAuction_withdraw BlindAuction_withdraw_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_withdraw_spec :=
  Eval cbv [sf_mem sf_return fst snd BlindAuction_withdraw_opt] in
    fun  me => execStateT (BlindAuction_withdraw_opt me).
  Lemma BlindAuction_withdraw_spec_eq :
    BlindAuction_withdraw_spec =
    fun  me => execStateT (synth_func_spec_opt BlindAuction_withdraw BlindAuction_withdraw_wf me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          
          _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
    reflexivity.
  Qed.

Global Opaque BlindAuction_withdraw_opt.

  Definition BlindAuction_auctionEnd := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := nil;
    FC_returns := void_unit_pair;
    FC_body := (CClet (* revealEnd := *) 12%positive
      (CCload (LCvar BlindAuction__revealEnd_var))
      (CClet (* ended := *) 13%positive
        (CCload (LCvar BlindAuction__ended_var))
        (CCsequence
          (CCassert (CCyield (ECbinop tint_bool Ogt
            (@ECbuiltin0 _ _  _ builtin0_number_impl)
            (ECtempvar tint_U 12%positive (* revealEnd *)))))
          (CCsequence
            (CCassert (CCyield (ECunop tint_bool Onotbool (ECtempvar tint_bool 13%positive (* ended *)))))
            (CCsequence
              (CCstore
                (LCvar BlindAuction__ended_var)
                (ECconst_int256 tint_bool true Int256.one))
              (CClet (* beneficiary := *) 16%positive
                (CCload (LCvar BlindAuction__beneficiary_var))
                (CClet (* highestBid := *) 17%positive
                  (CCload (LCvar BlindAuction__highestBid_var))
                  (CCsequence
                    (CCcall EVMOpcode_transfer_prim
                      (HCons int_U_pair _
                        (ECtempvar tint_U 16%positive (* beneficiary *))
                        (HCons int_U_pair _
                          (ECtempvar tint_U 17%positive (* highestBid *))
                          HNil)))
                    (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))))))))))
  |}.
  Lemma BlindAuction_auctionEnd_wf
      : synth_func_wellformed BlindAuction_auctionEnd.
  Proof. solve_wellformed. Defined.
  Definition BlindAuction_auctionEnd_opt : machine_env -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in synth_func_spec_opt BlindAuction_auctionEnd BlindAuction_auctionEnd_wf.
  Definition BlindAuction_auctionEnd_spec_hlist_opt args :=
    @apply_param_func BlindAuction_auctionEnd.(FC_params) _
                      (BlindAuction_auctionEnd_opt) args.
  Definition BlindAuction_auctionEnd_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
  in *)
  synth_func_spec_cond BlindAuction_auctionEnd BlindAuction_auctionEnd_wf.

  Definition BlindAuction_auctionEnd_prim := {|
    PRIMident := ident_BlindAuction_auctionEnd;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := BlindAuction_auctionEnd.(FC_params);
    PRIMret_marker := BlindAuction_auctionEnd.(FC_returns);
    PRIMcond := BlindAuction_auctionEnd_spec_cond;
    (* PRIMsem := BlindAuction_auctionEnd_spec_hlist; *)
    PRIMsem_opt := BlindAuction_auctionEnd_spec_hlist_opt
  |}.

  Lemma BlindAuction_auctionEnd_spec_hlist_opt_eq :
    BlindAuction_auctionEnd_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt BlindAuction_auctionEnd BlindAuction_auctionEnd_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]. *)
     reflexivity. 
  Qed.
  Definition BlindAuction_auctionEnd_cfun :=
  Eval cbv in synth_func_func BlindAuction_auctionEnd.

  Definition BlindAuction_auctionEnd_cond  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    high_level_invariant d ->
    synth_func_cond BlindAuction_auctionEnd BlindAuction_auctionEnd_wf
								      me d.
  
  Lemma BlindAuction_auctionEnd_cond_eq : forall  me d, 
    BlindAuction_auctionEnd_cond  me d ->
    high_level_invariant d ->
    synth_func_cond BlindAuction_auctionEnd BlindAuction_auctionEnd_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_auctionEnd_obligation  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events]
    in
    high_level_invariant d ->
    synth_func_obligation BlindAuction_auctionEnd BlindAuction_auctionEnd_wf
								      me d.
  
  Lemma BlindAuction_auctionEnd_obligation_eq : forall  me d, 
    BlindAuction_auctionEnd_obligation  me d ->
    high_level_invariant d ->
    synth_func_obligation BlindAuction_auctionEnd BlindAuction_auctionEnd_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             
             _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
       exact H_cond.
    Qed.

  Definition BlindAuction_auctionEnd_spec :=
  Eval cbv [sf_mem sf_return fst snd BlindAuction_auctionEnd_opt] in
    fun  me => execStateT (BlindAuction_auctionEnd_opt me).
  Lemma BlindAuction_auctionEnd_spec_eq :
    BlindAuction_auctionEnd_spec =
    fun  me => execStateT (synth_func_spec_opt BlindAuction_auctionEnd BlindAuction_auctionEnd_wf me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          
          _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _secondBid update__secondBid _revealed update__revealed _amountOf update__amountOf _events update__events].
    reflexivity.
  Qed.

Global Opaque BlindAuction_auctionEnd_opt.
End OBJECT_BlindAuction_DEFINITION.
(* (*Temporarily omitted in the Ethereum version.*)

Section LAYER_BLINDAUCTION_DEFINITION.
  Definition BLINDAUCTION_blindauction_initialize_prim := BlindAuction_initialize_prim.
  Definition BLINDAUCTION_blindauction_transferb_prim := BlindAuction_transferb_prim.
  Definition BLINDAUCTION_blindauction_reveal_prim := BlindAuction_reveal_prim.
  Definition BLINDAUCTION_blindauction_bid_prim := BlindAuction_bid_prim.
  Definition BLINDAUCTION_blindauction_withdraw_prim := BlindAuction_withdraw_prim.
  Definition BLINDAUCTION_blindauction_auctionEnd_prim := BlindAuction_auctionEnd_prim.

  Class BLINDAUCTION_preserves_invariants := {
    BLINDAUCTION_BlindAuction_initialize_preserves_invariants :>
      CompatGenSem.PreservesInvariants BlindAuction_initialize_spec;
    BLINDAUCTION_BlindAuction_transferb_preserves_invariants :>
      CompatGenSem.PreservesInvariants BlindAuction_transferb_spec;
    BLINDAUCTION_BlindAuction_reveal_preserves_invariants :>
      CompatGenSem.PreservesInvariants BlindAuction_reveal_spec;
    BLINDAUCTION_BlindAuction_bid_preserves_invariants :>
      CompatGenSem.PreservesInvariants BlindAuction_bid_spec;
    BLINDAUCTION_BlindAuction_withdraw_preserves_invariants :>
      CompatGenSem.PreservesInvariants BlindAuction_withdraw_spec;
    BLINDAUCTION_BlindAuction_auctionEnd_preserves_invariants :>
      CompatGenSem.PreservesInvariants BlindAuction_auctionEnd_spec
  }.
  Context`{BLINDAUCTION_pres_inv : !BLINDAUCTION_preserves_invariants}.

  Definition BLINDAUCTION_Layer : CompatLayerDef.compatlayer GetHighDataX :=
    initialize ↦ CompatGenSem.gensem BlindAuction_initialize_spec
      ⊕ transferb ↦ CompatGenSem.gensem BlindAuction_transferb_spec
      ⊕ reveal ↦ CompatGenSem.gensem BlindAuction_reveal_spec
      ⊕ bid ↦ CompatGenSem.gensem BlindAuction_bid_spec
      ⊕ withdraw ↦ CompatGenSem.gensem BlindAuction_withdraw_spec
      ⊕ auctionEnd ↦ CompatGenSem.gensem BlindAuction_auctionEnd_spec.
End LAYER_BLINDAUCTION_DEFINITION.
*)
End EdsgerGen.
