(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module spblind.ObjSimEVMOpcode for spblind.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import spblind.EdsgerIdents.
Require Import spblind.DataTypes.
Require Import spblind.DataTypeOps.
Require Import spblind.DataTypeProofs.
Require Import liblayers.compcertx.MakeProgram.
Require Import liblayers.compcertx.MemWithData.
Require Import layerlib.RefinementTactic.
Require Import layerlib.RefinementTacticAux.

Require Import spblind.LayerEVMOPCODE.

Section EdsgerGen.


Context {Hmem: Mem.MemoryModel mem}.
Context`{Hmwd: UseMemWithData mem}.
Context`{make_program_ops: !MakeProgramOps Clight.function Ctypes.type Clight.fundef Ctypes.type}.
Context`{Hmake_program: !MakeProgram Clight.function Ctypes.type Clight.fundef Ctypes.type}.
Instance GlobalLayerSpec : LayerSpecClass := {
  make_program_ops := make_program_ops;
  Hmake_program := Hmake_program;
  GetHighData := global_abstract_data_type
}.
Context`{HM : HyperMem (LayerSpec := GlobalLayerSpec)}.

  Context {EVMOpcode__events_var_pt_prf : variable_passthrough_prf EVMOpcode__events_var}.

  Lemma EVMOpcode_transfer_passthrough_prf :
      function_constr_passthrough_prf EVMOpcode_transfer.
  Proof. solve_passthrough_prf @EVMOpcode_transfer. Qed.
  Lemma EVMOpcode_transfer_passthrough_cond :
      synth_func_passthrough_cond EVMOpcode_transfer EVMOpcode_transfer_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance EVMOpcode_transfer_prim_passthrough
      : primitive_passthrough_prf EVMOpcode_transfer_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, EVMOpcode_transfer_prim.
      rewrite EVMOpcode_transfer_spec_hlist_eq.
      exact (synth_func_spec_relate
              EVMOpcode_transfer_passthrough_prf
              EVMOpcode_transfer_wf
              EVMOpcode_transfer_passthrough_cond).
    *)
    - unfold PRIMsem_opt, EVMOpcode_transfer_prim.
      rewrite EVMOpcode_transfer_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              EVMOpcode_transfer_passthrough_prf
              EVMOpcode_transfer_wf
              EVMOpcode_transfer_passthrough_cond).
    (*
    - unfold PRIMsem, EVMOpcode_transfer_prim.
      rewrite EVMOpcode_transfer_spec_hlist_eq.
      exact (synth_func_spec_match
              EVMOpcode_transfer_passthrough_prf
              EVMOpcode_transfer_wf
              EVMOpcode_transfer_passthrough_cond).
    *)
    - unfold PRIMsem_opt, EVMOpcode_transfer_prim.
      rewrite EVMOpcode_transfer_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              EVMOpcode_transfer_passthrough_prf
              EVMOpcode_transfer_wf
              EVMOpcode_transfer_passthrough_cond).
  Qed.

  Lemma EVMOpcode_transfer_exists :
    forall j a0 a1 d1 d2 d1',
      relate_AbData j d1 d2 ->
      EVMOpcode_transfer_spec a0 a1 d1 = Some d1' ->
      exists d2',
        EVMOpcode_transfer_spec a0 a1 d2 = Some d2' /\
        relate_AbData j d1' d2'.
  Proof.
    intro j.
    rewrite * EVMOpcode_transfer_spec_eq.
    exact (synth_func_relate_2_void
            EVMOpcode_transfer_passthrough_prf
            EVMOpcode_transfer_wf
            EVMOpcode_transfer_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Lemma EVMOpcode_transfer_match :
    forall j d d' m a0 a1,
      match_AbData d m j ->
      EVMOpcode_transfer_spec a0 a1 d = Some d' ->
      match_AbData d' m j.
  Proof.
    rewrite * EVMOpcode_transfer_spec_eq.
    exact (synth_func_match_2_void
            EVMOpcode_transfer_passthrough_prf
            EVMOpcode_transfer_wf
            EVMOpcode_transfer_passthrough_cond).
  Qed.

  Section transfer.
    Context`{inv : !CompatGenSem.PreservesInvariants (HD := cdataHigh) EVMOpcode_transfer_spec}.
    Context`{inv0 : !CompatGenSem.PreservesInvariants (HD := cdataLow) EVMOpcode_transfer_spec}.

    Lemma EVMOpcode_transfer_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem EVMOpcode_transfer_spec)
            (id ↦ CompatGenSem.gensem EVMOpcode_transfer_spec).
    Proof.
      (* non-pure C-primitives *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      try inv_semof H0.
      try (inversion H0; subst; simpl in H0).
      exploit EVMOpcode_transfer_exists; eauto 1; intros (labd' & HP & rel).
      match_external_states_csem; auto;
      eapply EVMOpcode_transfer_match; eauto.
    Qed.
  End transfer.

End EdsgerGen.
