(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module fpblind.DataTypeOps for fpblind.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import fpblind.EdsgerIdents.
Require Import fpblind.DataTypes.

Section EdsgerGen.

Definition tint_U := (Tpair addr tint).
Global Instance tint_U_hyper_type_impl : HyperTypeImpl tint_U := {
  ht_cval f := (@ht_cval tint_U _ f);
  ht_ft_cond f := (@ht_ft_cond tint_U _ f);
  ht_default := (@ht_default tint_U _);
  ht_valid_ft_cond f := @ht_valid_ft_cond tint_U _ f;
  ht_valid_ft_ocond := (@ht_valid_ft_ocond tint_U _);
  ht_inject j a b := a = b
}.
Definition int_U_pair := mk_hyper_type_pair tint_U.
Global Instance tint_U_hyper_type : HyperType tint_U := _.
Global Instance tint_U_hyper_binary_impl_eq : HyperBinaryImpl Oeq tint_U tint_U tint_bool := {
  Hbinary_cond := fun _ _ => True;
  Hbinary_ocond := otrue2;
  Hbinary a b := (* XXX(output_hyper_binary_impl_eq:output_eq_expression) *) false
}.
Definition tBid_Bid := (Tpair Bid (Tstruct Bid_struct_ident
  (Fcons Bid_struct__blindedBid_ident tint
  (Fcons Bid_struct__deposit_ident tint
   Fnil)))).
Global Instance tBid_Bid_hyper_type_impl : HyperTypeImpl tBid_Bid := {
  ht_cval f := 
    (CVstruct (CSmap
      (PTree.set  Bid_struct__blindedBid_ident  (@ht_cval tint_hashvalue _ (_blindedBid f))
      (PTree.set  Bid_struct__deposit_ident  (@ht_cval tint_U _ (_deposit f))
      (@PTree.empty cval)))));
  ht_ft_cond f := (@ht_ft_cond tint_hashvalue _ (_blindedBid f))
    /\ (@ht_ft_cond tint_U _ (_deposit f));
  ht_default := {| _blindedBid := (@ht_default tint_hashvalue _);
       _deposit := (@ht_default tint_U _)
    |};
  ht_valid_ft_cond f := @ht_valid_ft_cond tint_hashvalue _ (_blindedBid f)
    /\ @ht_valid_ft_cond tint_U _ (_deposit f);
  ht_valid_ft_ocond := (
    (@ht_valid_ft_ocond tint_hashvalue _) m{ _blindedBid }
    /\ (@ht_valid_ft_ocond tint_U _) m{ _deposit })%oprop1;
  ht_inject j a b := a = b
}.
Definition Bid_Bid_pair := mk_hyper_type_pair tBid_Bid.
Global Instance tBid_Bid_hyper_type : HyperType tBid_Bid.
Proof. solve_algebraic_record_data_type_hyper_type tBid_Bid_hyper_type_impl. Qed.
Global Instance tBid_Bid__blindedBid_field_impl : HyperFieldImpl tBid_Bid tint_hashvalue Bid_struct__blindedBid_ident := {
  Hfield_offset := 0;
  Hfield_get s := _blindedBid s;
  Hfield_set v s := Build_Bid v (_deposit s)
}.
Global Instance tBid_Bid__blindedBid_field : HyperField tBid_Bid tint_hashvalue Bid_struct__blindedBid_ident.
Proof. solve_record_type_hyper_field. Qed.
Global Instance tBid_Bid__deposit_field_impl : HyperFieldImpl tBid_Bid tint_U Bid_struct__deposit_ident := {
  Hfield_offset := 1;
  Hfield_get s := _deposit s;
  Hfield_set v s := Build_Bid (_blindedBid s) v
}.
Global Instance tBid_Bid__deposit_field : HyperField tBid_Bid tint_U Bid_struct__deposit_ident.
Proof. solve_record_type_hyper_field. Qed.
Definition tTransfer_Transfer := (Tpair Transfer (Tstruct Transfer_struct_ident
  (Fcons Transfer_struct__amount_ident tint
  (Fcons Transfer_struct__to_ident tint
   Fnil)))).
Global Instance tTransfer_Transfer_hyper_type_impl : HyperTypeImpl tTransfer_Transfer := {
  ht_cval f := 
    (CVstruct (CSmap
      (PTree.set  Transfer_struct__amount_ident  (@ht_cval tint_U _ (_amount f))
      (PTree.set  Transfer_struct__to_ident  (@ht_cval tint_U _ (_to f))
      (@PTree.empty cval)))));
  ht_ft_cond f := (@ht_ft_cond tint_U _ (_amount f))
    /\ (@ht_ft_cond tint_U _ (_to f));
  ht_default := {| _amount := (@ht_default tint_U _);
       _to := (@ht_default tint_U _)
    |};
  ht_valid_ft_cond f := @ht_valid_ft_cond tint_U _ (_amount f)
    /\ @ht_valid_ft_cond tint_U _ (_to f);
  ht_valid_ft_ocond := (
    (@ht_valid_ft_ocond tint_U _) m{ _amount }
    /\ (@ht_valid_ft_ocond tint_U _) m{ _to })%oprop1;
  ht_inject j a b := a = b
}.
Definition Transfer_Transfer_pair := mk_hyper_type_pair tTransfer_Transfer.
Global Instance tTransfer_Transfer_hyper_type : HyperType tTransfer_Transfer.
Proof. solve_algebraic_record_data_type_hyper_type tTransfer_Transfer_hyper_type_impl. Qed.
Global Instance tTransfer_Transfer__amount_field_impl : HyperFieldImpl tTransfer_Transfer tint_U Transfer_struct__amount_ident := {
  Hfield_offset := 0;
  Hfield_get s := _amount s;
  Hfield_set v s := Build_Transfer v (_to s)
}.
Global Instance tTransfer_Transfer__amount_field : HyperField tTransfer_Transfer tint_U Transfer_struct__amount_ident.
Proof. solve_record_type_hyper_field. Qed.
Global Instance tTransfer_Transfer__to_field_impl : HyperFieldImpl tTransfer_Transfer tint_U Transfer_struct__to_ident := {
  Hfield_offset := 1;
  Hfield_get s := _to s;
  Hfield_set v s := Build_Transfer (_amount s) v
}.
Global Instance tTransfer_Transfer__to_field : HyperField tTransfer_Transfer tint_U Transfer_struct__to_ident.
Proof. solve_record_type_hyper_field. Qed.
Definition tint_list_Transfer := (Tpair list_Transfer tint).
Global Instance tint_list_Transfer_hyper_type_impl : HyperTypeImpl tint_list_Transfer := {
  ht_cval := fun _ => CVany;
  ht_ft_cond := fun _ => True;
  ht_default := nil;
  ht_valid_ft_cond := fun _ => True;
  ht_valid_ft_ocond := otrue1;
  ht_inject j a b := a = b
}.
Definition int_list_Transfer_pair := mk_hyper_type_pair tint_list_Transfer.
Global Instance tint_list_Transfer_hyper_binary_impl_eq : HyperBinaryImpl Oeq tint_list_Transfer tint_list_Transfer tint_bool := {
  Hbinary_cond := fun _ _ => True;
  Hbinary_ocond := otrue2;
  Hbinary a b := (* XXX(output_hyper_binary_impl_eq:output_eq_expression) *) false
}.
Definition thash_Bid_HASH_Z_Bid := (Tpair HASH_Z_Bid (Thashmap tint (Tstruct Bid_struct_ident
  (Fcons Bid_struct__blindedBid_ident tint
  (Fcons Bid_struct__deposit_ident tint
   Fnil))))).
Global Instance thash_Bid_HASH_Z_Bid_hyper_type_impl : HyperTypeImpl thash_Bid_HASH_Z_Bid :=
   Int256Tree_inject_equal_hashmap_hyper_type_impl tBid_Bid.
Definition hash_Bid_HASH_Z_Bid_pair := mk_hyper_type_pair thash_Bid_HASH_Z_Bid.
Global Instance thash_Bid_HASH_Z_Bid_hyper_type : HyperType thash_Bid_HASH_Z_Bid :=
  Int256Tree_inject_equal_hashmap_hyper_type tBid_Bid.
Global Instance thash_Bid_HASH_Z_Bid_index_impl : HyperIntHashImpl thash_Bid_HASH_Z_Bid tBid_Bid :=
  Int256Tree_inject_equal_hashmap_hash_impl tBid_Bid.
Global Instance thash_Bid_HASH_Z_Bid_hash : HyperIntHash thash_Bid_HASH_Z_Bid tBid_Bid :=
  Int256Tree_inject_equal_hashmap_hash tBid_Bid.
Definition thash_int_HASH_Z_Z := (Tpair HASH_Z_Z (Thashmap tint tint)).
Global Instance thash_int_HASH_Z_Z_hyper_type_impl : HyperTypeImpl thash_int_HASH_Z_Z :=
   Int256Tree_inject_equal_hashmap_hyper_type_impl tint_U.
Definition hash_int_HASH_Z_Z_pair := mk_hyper_type_pair thash_int_HASH_Z_Z.
Global Instance thash_int_HASH_Z_Z_hyper_type : HyperType thash_int_HASH_Z_Z :=
  Int256Tree_inject_equal_hashmap_hyper_type tint_U.
Global Instance thash_int_HASH_Z_Z_index_impl : HyperIntHashImpl thash_int_HASH_Z_Z tint_U :=
  Int256Tree_inject_equal_hashmap_hash_impl tint_U.
Global Instance thash_int_HASH_Z_Z_hash : HyperIntHash thash_int_HASH_Z_Z tint_U :=
  Int256Tree_inject_equal_hashmap_hash tint_U.
Definition thash_int_HASH_Z_hashvalue := (Tpair HASH_Z_hashvalue (Thashmap tint tint)).
Global Instance thash_int_HASH_Z_hashvalue_hyper_type_impl : HyperTypeImpl thash_int_HASH_Z_hashvalue :=
   Int256Tree_inject_equal_hashmap_hyper_type_impl tint_hashvalue.
Definition hash_int_HASH_Z_hashvalue_pair := mk_hyper_type_pair thash_int_HASH_Z_hashvalue.
Global Instance thash_int_HASH_Z_hashvalue_hyper_type : HyperType thash_int_HASH_Z_hashvalue :=
  Int256Tree_inject_equal_hashmap_hyper_type tint_hashvalue.
Global Instance thash_int_HASH_Z_hashvalue_index_impl : HyperIntHashImpl thash_int_HASH_Z_hashvalue tint_hashvalue :=
  Int256Tree_inject_equal_hashmap_hash_impl tint_hashvalue.
Global Instance thash_int_HASH_Z_hashvalue_hash : HyperIntHash thash_int_HASH_Z_hashvalue tint_hashvalue :=
  Int256Tree_inject_equal_hashmap_hash tint_hashvalue.
Record global_abstract_data_type : Type := {
  _beneficiary : int256;
  _biddingEnd : int256;
  _revealEnd : int256;
  _ended : bool;
  _bids : (Int256Tree.t Bid);
  _highestBidder : int256;
  _highestBid : int256;
  _pendingReturns : (Int256Tree.t int256);
  _trueBids : (Int256Tree.t int256);
  _secrets : (Int256Tree.t hashvalue);
  _events : (list Transfer)
}.
Definition update__beneficiary glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type glabs_b (_biddingEnd glabs_a) (_revealEnd glabs_a) (_ended glabs_a) (_bids glabs_a) (_highestBidder glabs_a) (_highestBid glabs_a) (_pendingReturns glabs_a) (_trueBids glabs_a) (_secrets glabs_a) (_events glabs_a) .
Definition update__biddingEnd glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_beneficiary glabs_a) glabs_b (_revealEnd glabs_a) (_ended glabs_a) (_bids glabs_a) (_highestBidder glabs_a) (_highestBid glabs_a) (_pendingReturns glabs_a) (_trueBids glabs_a) (_secrets glabs_a) (_events glabs_a) .
Definition update__revealEnd glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_beneficiary glabs_a) (_biddingEnd glabs_a) glabs_b (_ended glabs_a) (_bids glabs_a) (_highestBidder glabs_a) (_highestBid glabs_a) (_pendingReturns glabs_a) (_trueBids glabs_a) (_secrets glabs_a) (_events glabs_a) .
Definition update__ended glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_beneficiary glabs_a) (_biddingEnd glabs_a) (_revealEnd glabs_a) glabs_b (_bids glabs_a) (_highestBidder glabs_a) (_highestBid glabs_a) (_pendingReturns glabs_a) (_trueBids glabs_a) (_secrets glabs_a) (_events glabs_a) .
Definition update__bids glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_beneficiary glabs_a) (_biddingEnd glabs_a) (_revealEnd glabs_a) (_ended glabs_a) glabs_b (_highestBidder glabs_a) (_highestBid glabs_a) (_pendingReturns glabs_a) (_trueBids glabs_a) (_secrets glabs_a) (_events glabs_a) .
Definition update__highestBidder glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_beneficiary glabs_a) (_biddingEnd glabs_a) (_revealEnd glabs_a) (_ended glabs_a) (_bids glabs_a) glabs_b (_highestBid glabs_a) (_pendingReturns glabs_a) (_trueBids glabs_a) (_secrets glabs_a) (_events glabs_a) .
Definition update__highestBid glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_beneficiary glabs_a) (_biddingEnd glabs_a) (_revealEnd glabs_a) (_ended glabs_a) (_bids glabs_a) (_highestBidder glabs_a) glabs_b (_pendingReturns glabs_a) (_trueBids glabs_a) (_secrets glabs_a) (_events glabs_a) .
Definition update__pendingReturns glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_beneficiary glabs_a) (_biddingEnd glabs_a) (_revealEnd glabs_a) (_ended glabs_a) (_bids glabs_a) (_highestBidder glabs_a) (_highestBid glabs_a) glabs_b (_trueBids glabs_a) (_secrets glabs_a) (_events glabs_a) .
Definition update__trueBids glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_beneficiary glabs_a) (_biddingEnd glabs_a) (_revealEnd glabs_a) (_ended glabs_a) (_bids glabs_a) (_highestBidder glabs_a) (_highestBid glabs_a) (_pendingReturns glabs_a) glabs_b (_secrets glabs_a) (_events glabs_a) .
Definition update__secrets glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_beneficiary glabs_a) (_biddingEnd glabs_a) (_revealEnd glabs_a) (_ended glabs_a) (_bids glabs_a) (_highestBidder glabs_a) (_highestBid glabs_a) (_pendingReturns glabs_a) (_trueBids glabs_a) glabs_b (_events glabs_a) .
Definition update__events glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_beneficiary glabs_a) (_biddingEnd glabs_a) (_revealEnd glabs_a) (_ended glabs_a) (_bids glabs_a) (_highestBidder glabs_a) (_highestBid glabs_a) (_pendingReturns glabs_a) (_trueBids glabs_a) (_secrets glabs_a) glabs_b .

Definition init_global_abstract_data : global_abstract_data_type := {|
  _beneficiary := (Int256.repr 0);
  _biddingEnd := (Int256.repr 0);
  _revealEnd := (Int256.repr 0);
  _ended := false;
  _bids := (Int256Tree.empty Bid);
  _highestBidder := (Int256.repr 0);
  _highestBid := (Int256.repr 0);
  _pendingReturns := (Int256Tree.empty int256);
  _trueBids := (Int256Tree.empty int256);
  _secrets := (Int256Tree.empty hashvalue);
  _events := nil
|}.

Definition block := positive.
Definition global_low_level_invariant (n : block)(abd : global_abstract_data_type) := True.
End EdsgerGen.

Lemma _beneficiary_of_update__beneficiary : forall _x (glabs_a : global_abstract_data_type),
  _beneficiary (update__beneficiary _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _beneficiary_of_update__beneficiary : updates.

Lemma _beneficiary_of_update__biddingEnd : forall _x (glabs_a : global_abstract_data_type),
  _beneficiary (update__biddingEnd _x glabs_a) = _beneficiary glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _beneficiary_of_update__biddingEnd : updates.

Lemma _beneficiary_of_update__revealEnd : forall _x (glabs_a : global_abstract_data_type),
  _beneficiary (update__revealEnd _x glabs_a) = _beneficiary glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _beneficiary_of_update__revealEnd : updates.

Lemma _beneficiary_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _beneficiary (update__ended _x glabs_a) = _beneficiary glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _beneficiary_of_update__ended : updates.

Lemma _beneficiary_of_update__bids : forall _x (glabs_a : global_abstract_data_type),
  _beneficiary (update__bids _x glabs_a) = _beneficiary glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _beneficiary_of_update__bids : updates.

Lemma _beneficiary_of_update__highestBidder : forall _x (glabs_a : global_abstract_data_type),
  _beneficiary (update__highestBidder _x glabs_a) = _beneficiary glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _beneficiary_of_update__highestBidder : updates.

Lemma _beneficiary_of_update__highestBid : forall _x (glabs_a : global_abstract_data_type),
  _beneficiary (update__highestBid _x glabs_a) = _beneficiary glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _beneficiary_of_update__highestBid : updates.

Lemma _beneficiary_of_update__pendingReturns : forall _x (glabs_a : global_abstract_data_type),
  _beneficiary (update__pendingReturns _x glabs_a) = _beneficiary glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _beneficiary_of_update__pendingReturns : updates.

Lemma _beneficiary_of_update__trueBids : forall _x (glabs_a : global_abstract_data_type),
  _beneficiary (update__trueBids _x glabs_a) = _beneficiary glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _beneficiary_of_update__trueBids : updates.

Lemma _beneficiary_of_update__secrets : forall _x (glabs_a : global_abstract_data_type),
  _beneficiary (update__secrets _x glabs_a) = _beneficiary glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _beneficiary_of_update__secrets : updates.

Lemma _beneficiary_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _beneficiary (update__events _x glabs_a) = _beneficiary glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _beneficiary_of_update__events : updates.


Lemma _biddingEnd_of_update__beneficiary : forall _x (glabs_a : global_abstract_data_type),
  _biddingEnd (update__beneficiary _x glabs_a) = _biddingEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _biddingEnd_of_update__beneficiary : updates.

Lemma _biddingEnd_of_update__biddingEnd : forall _x (glabs_a : global_abstract_data_type),
  _biddingEnd (update__biddingEnd _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _biddingEnd_of_update__biddingEnd : updates.

Lemma _biddingEnd_of_update__revealEnd : forall _x (glabs_a : global_abstract_data_type),
  _biddingEnd (update__revealEnd _x glabs_a) = _biddingEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _biddingEnd_of_update__revealEnd : updates.

Lemma _biddingEnd_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _biddingEnd (update__ended _x glabs_a) = _biddingEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _biddingEnd_of_update__ended : updates.

Lemma _biddingEnd_of_update__bids : forall _x (glabs_a : global_abstract_data_type),
  _biddingEnd (update__bids _x glabs_a) = _biddingEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _biddingEnd_of_update__bids : updates.

Lemma _biddingEnd_of_update__highestBidder : forall _x (glabs_a : global_abstract_data_type),
  _biddingEnd (update__highestBidder _x glabs_a) = _biddingEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _biddingEnd_of_update__highestBidder : updates.

Lemma _biddingEnd_of_update__highestBid : forall _x (glabs_a : global_abstract_data_type),
  _biddingEnd (update__highestBid _x glabs_a) = _biddingEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _biddingEnd_of_update__highestBid : updates.

Lemma _biddingEnd_of_update__pendingReturns : forall _x (glabs_a : global_abstract_data_type),
  _biddingEnd (update__pendingReturns _x glabs_a) = _biddingEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _biddingEnd_of_update__pendingReturns : updates.

Lemma _biddingEnd_of_update__trueBids : forall _x (glabs_a : global_abstract_data_type),
  _biddingEnd (update__trueBids _x glabs_a) = _biddingEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _biddingEnd_of_update__trueBids : updates.

Lemma _biddingEnd_of_update__secrets : forall _x (glabs_a : global_abstract_data_type),
  _biddingEnd (update__secrets _x glabs_a) = _biddingEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _biddingEnd_of_update__secrets : updates.

Lemma _biddingEnd_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _biddingEnd (update__events _x glabs_a) = _biddingEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _biddingEnd_of_update__events : updates.


Lemma _revealEnd_of_update__beneficiary : forall _x (glabs_a : global_abstract_data_type),
  _revealEnd (update__beneficiary _x glabs_a) = _revealEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _revealEnd_of_update__beneficiary : updates.

Lemma _revealEnd_of_update__biddingEnd : forall _x (glabs_a : global_abstract_data_type),
  _revealEnd (update__biddingEnd _x glabs_a) = _revealEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _revealEnd_of_update__biddingEnd : updates.

Lemma _revealEnd_of_update__revealEnd : forall _x (glabs_a : global_abstract_data_type),
  _revealEnd (update__revealEnd _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _revealEnd_of_update__revealEnd : updates.

Lemma _revealEnd_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _revealEnd (update__ended _x glabs_a) = _revealEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _revealEnd_of_update__ended : updates.

Lemma _revealEnd_of_update__bids : forall _x (glabs_a : global_abstract_data_type),
  _revealEnd (update__bids _x glabs_a) = _revealEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _revealEnd_of_update__bids : updates.

Lemma _revealEnd_of_update__highestBidder : forall _x (glabs_a : global_abstract_data_type),
  _revealEnd (update__highestBidder _x glabs_a) = _revealEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _revealEnd_of_update__highestBidder : updates.

Lemma _revealEnd_of_update__highestBid : forall _x (glabs_a : global_abstract_data_type),
  _revealEnd (update__highestBid _x glabs_a) = _revealEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _revealEnd_of_update__highestBid : updates.

Lemma _revealEnd_of_update__pendingReturns : forall _x (glabs_a : global_abstract_data_type),
  _revealEnd (update__pendingReturns _x glabs_a) = _revealEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _revealEnd_of_update__pendingReturns : updates.

Lemma _revealEnd_of_update__trueBids : forall _x (glabs_a : global_abstract_data_type),
  _revealEnd (update__trueBids _x glabs_a) = _revealEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _revealEnd_of_update__trueBids : updates.

Lemma _revealEnd_of_update__secrets : forall _x (glabs_a : global_abstract_data_type),
  _revealEnd (update__secrets _x glabs_a) = _revealEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _revealEnd_of_update__secrets : updates.

Lemma _revealEnd_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _revealEnd (update__events _x glabs_a) = _revealEnd glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _revealEnd_of_update__events : updates.


Lemma _ended_of_update__beneficiary : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__beneficiary _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__beneficiary : updates.

Lemma _ended_of_update__biddingEnd : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__biddingEnd _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__biddingEnd : updates.

Lemma _ended_of_update__revealEnd : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__revealEnd _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__revealEnd : updates.

Lemma _ended_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__ended _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__ended : updates.

Lemma _ended_of_update__bids : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__bids _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__bids : updates.

Lemma _ended_of_update__highestBidder : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__highestBidder _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__highestBidder : updates.

Lemma _ended_of_update__highestBid : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__highestBid _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__highestBid : updates.

Lemma _ended_of_update__pendingReturns : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__pendingReturns _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__pendingReturns : updates.

Lemma _ended_of_update__trueBids : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__trueBids _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__trueBids : updates.

Lemma _ended_of_update__secrets : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__secrets _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__secrets : updates.

Lemma _ended_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__events _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__events : updates.


Lemma _bids_of_update__beneficiary : forall _x (glabs_a : global_abstract_data_type),
  _bids (update__beneficiary _x glabs_a) = _bids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _bids_of_update__beneficiary : updates.

Lemma _bids_of_update__biddingEnd : forall _x (glabs_a : global_abstract_data_type),
  _bids (update__biddingEnd _x glabs_a) = _bids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _bids_of_update__biddingEnd : updates.

Lemma _bids_of_update__revealEnd : forall _x (glabs_a : global_abstract_data_type),
  _bids (update__revealEnd _x glabs_a) = _bids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _bids_of_update__revealEnd : updates.

Lemma _bids_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _bids (update__ended _x glabs_a) = _bids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _bids_of_update__ended : updates.

Lemma _bids_of_update__bids : forall _x (glabs_a : global_abstract_data_type),
  _bids (update__bids _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _bids_of_update__bids : updates.

Lemma _bids_of_update__highestBidder : forall _x (glabs_a : global_abstract_data_type),
  _bids (update__highestBidder _x glabs_a) = _bids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _bids_of_update__highestBidder : updates.

Lemma _bids_of_update__highestBid : forall _x (glabs_a : global_abstract_data_type),
  _bids (update__highestBid _x glabs_a) = _bids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _bids_of_update__highestBid : updates.

Lemma _bids_of_update__pendingReturns : forall _x (glabs_a : global_abstract_data_type),
  _bids (update__pendingReturns _x glabs_a) = _bids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _bids_of_update__pendingReturns : updates.

Lemma _bids_of_update__trueBids : forall _x (glabs_a : global_abstract_data_type),
  _bids (update__trueBids _x glabs_a) = _bids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _bids_of_update__trueBids : updates.

Lemma _bids_of_update__secrets : forall _x (glabs_a : global_abstract_data_type),
  _bids (update__secrets _x glabs_a) = _bids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _bids_of_update__secrets : updates.

Lemma _bids_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _bids (update__events _x glabs_a) = _bids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _bids_of_update__events : updates.


Lemma _highestBidder_of_update__beneficiary : forall _x (glabs_a : global_abstract_data_type),
  _highestBidder (update__beneficiary _x glabs_a) = _highestBidder glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBidder_of_update__beneficiary : updates.

Lemma _highestBidder_of_update__biddingEnd : forall _x (glabs_a : global_abstract_data_type),
  _highestBidder (update__biddingEnd _x glabs_a) = _highestBidder glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBidder_of_update__biddingEnd : updates.

Lemma _highestBidder_of_update__revealEnd : forall _x (glabs_a : global_abstract_data_type),
  _highestBidder (update__revealEnd _x glabs_a) = _highestBidder glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBidder_of_update__revealEnd : updates.

Lemma _highestBidder_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _highestBidder (update__ended _x glabs_a) = _highestBidder glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBidder_of_update__ended : updates.

Lemma _highestBidder_of_update__bids : forall _x (glabs_a : global_abstract_data_type),
  _highestBidder (update__bids _x glabs_a) = _highestBidder glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBidder_of_update__bids : updates.

Lemma _highestBidder_of_update__highestBidder : forall _x (glabs_a : global_abstract_data_type),
  _highestBidder (update__highestBidder _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBidder_of_update__highestBidder : updates.

Lemma _highestBidder_of_update__highestBid : forall _x (glabs_a : global_abstract_data_type),
  _highestBidder (update__highestBid _x glabs_a) = _highestBidder glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBidder_of_update__highestBid : updates.

Lemma _highestBidder_of_update__pendingReturns : forall _x (glabs_a : global_abstract_data_type),
  _highestBidder (update__pendingReturns _x glabs_a) = _highestBidder glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBidder_of_update__pendingReturns : updates.

Lemma _highestBidder_of_update__trueBids : forall _x (glabs_a : global_abstract_data_type),
  _highestBidder (update__trueBids _x glabs_a) = _highestBidder glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBidder_of_update__trueBids : updates.

Lemma _highestBidder_of_update__secrets : forall _x (glabs_a : global_abstract_data_type),
  _highestBidder (update__secrets _x glabs_a) = _highestBidder glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBidder_of_update__secrets : updates.

Lemma _highestBidder_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _highestBidder (update__events _x glabs_a) = _highestBidder glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBidder_of_update__events : updates.


Lemma _highestBid_of_update__beneficiary : forall _x (glabs_a : global_abstract_data_type),
  _highestBid (update__beneficiary _x glabs_a) = _highestBid glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBid_of_update__beneficiary : updates.

Lemma _highestBid_of_update__biddingEnd : forall _x (glabs_a : global_abstract_data_type),
  _highestBid (update__biddingEnd _x glabs_a) = _highestBid glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBid_of_update__biddingEnd : updates.

Lemma _highestBid_of_update__revealEnd : forall _x (glabs_a : global_abstract_data_type),
  _highestBid (update__revealEnd _x glabs_a) = _highestBid glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBid_of_update__revealEnd : updates.

Lemma _highestBid_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _highestBid (update__ended _x glabs_a) = _highestBid glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBid_of_update__ended : updates.

Lemma _highestBid_of_update__bids : forall _x (glabs_a : global_abstract_data_type),
  _highestBid (update__bids _x glabs_a) = _highestBid glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBid_of_update__bids : updates.

Lemma _highestBid_of_update__highestBidder : forall _x (glabs_a : global_abstract_data_type),
  _highestBid (update__highestBidder _x glabs_a) = _highestBid glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBid_of_update__highestBidder : updates.

Lemma _highestBid_of_update__highestBid : forall _x (glabs_a : global_abstract_data_type),
  _highestBid (update__highestBid _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBid_of_update__highestBid : updates.

Lemma _highestBid_of_update__pendingReturns : forall _x (glabs_a : global_abstract_data_type),
  _highestBid (update__pendingReturns _x glabs_a) = _highestBid glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBid_of_update__pendingReturns : updates.

Lemma _highestBid_of_update__trueBids : forall _x (glabs_a : global_abstract_data_type),
  _highestBid (update__trueBids _x glabs_a) = _highestBid glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBid_of_update__trueBids : updates.

Lemma _highestBid_of_update__secrets : forall _x (glabs_a : global_abstract_data_type),
  _highestBid (update__secrets _x glabs_a) = _highestBid glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBid_of_update__secrets : updates.

Lemma _highestBid_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _highestBid (update__events _x glabs_a) = _highestBid glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _highestBid_of_update__events : updates.


Lemma _pendingReturns_of_update__beneficiary : forall _x (glabs_a : global_abstract_data_type),
  _pendingReturns (update__beneficiary _x glabs_a) = _pendingReturns glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _pendingReturns_of_update__beneficiary : updates.

Lemma _pendingReturns_of_update__biddingEnd : forall _x (glabs_a : global_abstract_data_type),
  _pendingReturns (update__biddingEnd _x glabs_a) = _pendingReturns glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _pendingReturns_of_update__biddingEnd : updates.

Lemma _pendingReturns_of_update__revealEnd : forall _x (glabs_a : global_abstract_data_type),
  _pendingReturns (update__revealEnd _x glabs_a) = _pendingReturns glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _pendingReturns_of_update__revealEnd : updates.

Lemma _pendingReturns_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _pendingReturns (update__ended _x glabs_a) = _pendingReturns glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _pendingReturns_of_update__ended : updates.

Lemma _pendingReturns_of_update__bids : forall _x (glabs_a : global_abstract_data_type),
  _pendingReturns (update__bids _x glabs_a) = _pendingReturns glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _pendingReturns_of_update__bids : updates.

Lemma _pendingReturns_of_update__highestBidder : forall _x (glabs_a : global_abstract_data_type),
  _pendingReturns (update__highestBidder _x glabs_a) = _pendingReturns glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _pendingReturns_of_update__highestBidder : updates.

Lemma _pendingReturns_of_update__highestBid : forall _x (glabs_a : global_abstract_data_type),
  _pendingReturns (update__highestBid _x glabs_a) = _pendingReturns glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _pendingReturns_of_update__highestBid : updates.

Lemma _pendingReturns_of_update__pendingReturns : forall _x (glabs_a : global_abstract_data_type),
  _pendingReturns (update__pendingReturns _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _pendingReturns_of_update__pendingReturns : updates.

Lemma _pendingReturns_of_update__trueBids : forall _x (glabs_a : global_abstract_data_type),
  _pendingReturns (update__trueBids _x glabs_a) = _pendingReturns glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _pendingReturns_of_update__trueBids : updates.

Lemma _pendingReturns_of_update__secrets : forall _x (glabs_a : global_abstract_data_type),
  _pendingReturns (update__secrets _x glabs_a) = _pendingReturns glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _pendingReturns_of_update__secrets : updates.

Lemma _pendingReturns_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _pendingReturns (update__events _x glabs_a) = _pendingReturns glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _pendingReturns_of_update__events : updates.


Lemma _trueBids_of_update__beneficiary : forall _x (glabs_a : global_abstract_data_type),
  _trueBids (update__beneficiary _x glabs_a) = _trueBids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _trueBids_of_update__beneficiary : updates.

Lemma _trueBids_of_update__biddingEnd : forall _x (glabs_a : global_abstract_data_type),
  _trueBids (update__biddingEnd _x glabs_a) = _trueBids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _trueBids_of_update__biddingEnd : updates.

Lemma _trueBids_of_update__revealEnd : forall _x (glabs_a : global_abstract_data_type),
  _trueBids (update__revealEnd _x glabs_a) = _trueBids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _trueBids_of_update__revealEnd : updates.

Lemma _trueBids_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _trueBids (update__ended _x glabs_a) = _trueBids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _trueBids_of_update__ended : updates.

Lemma _trueBids_of_update__bids : forall _x (glabs_a : global_abstract_data_type),
  _trueBids (update__bids _x glabs_a) = _trueBids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _trueBids_of_update__bids : updates.

Lemma _trueBids_of_update__highestBidder : forall _x (glabs_a : global_abstract_data_type),
  _trueBids (update__highestBidder _x glabs_a) = _trueBids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _trueBids_of_update__highestBidder : updates.

Lemma _trueBids_of_update__highestBid : forall _x (glabs_a : global_abstract_data_type),
  _trueBids (update__highestBid _x glabs_a) = _trueBids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _trueBids_of_update__highestBid : updates.

Lemma _trueBids_of_update__pendingReturns : forall _x (glabs_a : global_abstract_data_type),
  _trueBids (update__pendingReturns _x glabs_a) = _trueBids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _trueBids_of_update__pendingReturns : updates.

Lemma _trueBids_of_update__trueBids : forall _x (glabs_a : global_abstract_data_type),
  _trueBids (update__trueBids _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _trueBids_of_update__trueBids : updates.

Lemma _trueBids_of_update__secrets : forall _x (glabs_a : global_abstract_data_type),
  _trueBids (update__secrets _x glabs_a) = _trueBids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _trueBids_of_update__secrets : updates.

Lemma _trueBids_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _trueBids (update__events _x glabs_a) = _trueBids glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _trueBids_of_update__events : updates.


Lemma _secrets_of_update__beneficiary : forall _x (glabs_a : global_abstract_data_type),
  _secrets (update__beneficiary _x glabs_a) = _secrets glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _secrets_of_update__beneficiary : updates.

Lemma _secrets_of_update__biddingEnd : forall _x (glabs_a : global_abstract_data_type),
  _secrets (update__biddingEnd _x glabs_a) = _secrets glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _secrets_of_update__biddingEnd : updates.

Lemma _secrets_of_update__revealEnd : forall _x (glabs_a : global_abstract_data_type),
  _secrets (update__revealEnd _x glabs_a) = _secrets glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _secrets_of_update__revealEnd : updates.

Lemma _secrets_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _secrets (update__ended _x glabs_a) = _secrets glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _secrets_of_update__ended : updates.

Lemma _secrets_of_update__bids : forall _x (glabs_a : global_abstract_data_type),
  _secrets (update__bids _x glabs_a) = _secrets glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _secrets_of_update__bids : updates.

Lemma _secrets_of_update__highestBidder : forall _x (glabs_a : global_abstract_data_type),
  _secrets (update__highestBidder _x glabs_a) = _secrets glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _secrets_of_update__highestBidder : updates.

Lemma _secrets_of_update__highestBid : forall _x (glabs_a : global_abstract_data_type),
  _secrets (update__highestBid _x glabs_a) = _secrets glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _secrets_of_update__highestBid : updates.

Lemma _secrets_of_update__pendingReturns : forall _x (glabs_a : global_abstract_data_type),
  _secrets (update__pendingReturns _x glabs_a) = _secrets glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _secrets_of_update__pendingReturns : updates.

Lemma _secrets_of_update__trueBids : forall _x (glabs_a : global_abstract_data_type),
  _secrets (update__trueBids _x glabs_a) = _secrets glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _secrets_of_update__trueBids : updates.

Lemma _secrets_of_update__secrets : forall _x (glabs_a : global_abstract_data_type),
  _secrets (update__secrets _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _secrets_of_update__secrets : updates.

Lemma _secrets_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _secrets (update__events _x glabs_a) = _secrets glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _secrets_of_update__events : updates.


Lemma _events_of_update__beneficiary : forall _x (glabs_a : global_abstract_data_type),
  _events (update__beneficiary _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__beneficiary : updates.

Lemma _events_of_update__biddingEnd : forall _x (glabs_a : global_abstract_data_type),
  _events (update__biddingEnd _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__biddingEnd : updates.

Lemma _events_of_update__revealEnd : forall _x (glabs_a : global_abstract_data_type),
  _events (update__revealEnd _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__revealEnd : updates.

Lemma _events_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _events (update__ended _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__ended : updates.

Lemma _events_of_update__bids : forall _x (glabs_a : global_abstract_data_type),
  _events (update__bids _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__bids : updates.

Lemma _events_of_update__highestBidder : forall _x (glabs_a : global_abstract_data_type),
  _events (update__highestBidder _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__highestBidder : updates.

Lemma _events_of_update__highestBid : forall _x (glabs_a : global_abstract_data_type),
  _events (update__highestBid _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__highestBid : updates.

Lemma _events_of_update__pendingReturns : forall _x (glabs_a : global_abstract_data_type),
  _events (update__pendingReturns _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__pendingReturns : updates.

Lemma _events_of_update__trueBids : forall _x (glabs_a : global_abstract_data_type),
  _events (update__trueBids _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__trueBids : updates.

Lemma _events_of_update__secrets : forall _x (glabs_a : global_abstract_data_type),
  _events (update__secrets _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__secrets : updates.

Lemma _events_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _events (update__events _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__events : updates.

Opaque _beneficiary update__beneficiary _biddingEnd update__biddingEnd _revealEnd update__revealEnd _ended update__ended _bids update__bids _highestBidder update__highestBidder _highestBid update__highestBid _pendingReturns update__pendingReturns _trueBids update__trueBids _secrets update__secrets _events update__events.

