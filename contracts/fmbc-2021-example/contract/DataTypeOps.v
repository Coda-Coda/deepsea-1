(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module contract.DataTypeOps for contract.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import contract.EdsgerIdents.
Require Import contract.DataTypes.

Section EdsgerGen.

Definition tTransfer_Transfer := (Tpair Transfer (Tstruct Transfer_struct_ident
  (Fcons Transfer_struct_amount_ident tint
  (Fcons Transfer_struct_recipient_ident tint
   Fnil)))).
Global Instance tTransfer_Transfer_hyper_type_impl : HyperTypeImpl tTransfer_Transfer := {
  ht_cval f := 
    (CVstruct (CSmap
      (PTree.set  Transfer_struct_amount_ident  (@ht_cval tint_U _ (amount f))
      (PTree.set  Transfer_struct_recipient_ident  (@ht_cval tint_U _ (recipient f))
      (@PTree.empty cval)))));
  ht_ft_cond f := (@ht_ft_cond tint_U _ (amount f))
    /\ (@ht_ft_cond tint_U _ (recipient f));
  ht_default := {| amount := (@ht_default tint_U _);
       recipient := (@ht_default tint_U _)
    |};
  ht_valid_ft_cond f := @ht_valid_ft_cond tint_U _ (amount f)
    /\ @ht_valid_ft_cond tint_U _ (recipient f);
  ht_valid_ft_ocond := (
    (@ht_valid_ft_ocond tint_U _) m{ amount }
    /\ (@ht_valid_ft_ocond tint_U _) m{ recipient })%oprop1
}.
Definition Transfer_Transfer_pair := mk_hyper_type_pair tTransfer_Transfer.
Global Instance tTransfer_Transfer_hyper_type : HyperType tTransfer_Transfer.
Proof. solve_algebraic_record_data_type_hyper_type tTransfer_Transfer_hyper_type_impl. Qed.
Global Instance tTransfer_Transfer_amount_field_impl : HyperFieldImpl tTransfer_Transfer tint_U Transfer_struct_amount_ident := {
  Hfield_get s := amount s;
  Hfield_set v s := Build_Transfer v (recipient s)
}.
Global Instance tTransfer_Transfer_amount_field : HyperField tTransfer_Transfer tint_U Transfer_struct_amount_ident.
Proof. Admitted. 
Global Instance tTransfer_Transfer_recipient_field_impl : HyperFieldImpl tTransfer_Transfer tint_U Transfer_struct_recipient_ident := {
  Hfield_get s := recipient s;
  Hfield_set v s := Build_Transfer (amount s) v
}.
Global Instance tTransfer_Transfer_recipient_field : HyperField tTransfer_Transfer tint_U Transfer_struct_recipient_ident.
Proof. Admitted. 
Definition tint_list_Transfer := (Tpair list_Transfer tint).
Global Instance tint_list_Transfer_hyper_type_impl : HyperTypeImpl tint_list_Transfer := {
  ht_cval := fun _ => CVany;
  ht_ft_cond := fun _ => True;
  ht_default := nil;
  ht_valid_ft_cond := fun _ => True;
  ht_valid_ft_ocond := otrue1;
}.
Definition int_list_Transfer_pair := mk_hyper_type_pair tint_list_Transfer.
Require Import backend.MachineModel.
Definition ext_call_me {adata: Type} (me : machine_env adata) (ext_contract : int256) := {|
  me_address := ext_contract;
  me_origin := me_origin me;
  me_caller := me_address me;
  me_callvalue := me_callvalue me; (* FIXME: the callvalue modeling is wrong *)
  me_coinbase := me_coinbase me;
  me_timestamp := me_timestamp me;
  me_number := me_number me;
  me_chainid := me_chainid me;
  me_selfbalance := me_selfbalance me;
  me_balance := me_balance me;
  me_blockhash := me_blockhash me;
  me_transfer := me_transfer me;
  me_callmethod := me_callmethod me;
  me_log := me_log me;
|}.
Record global_abstract_data_type : Type := {
  Contract_successfully_transferred : bool;
  ETH_successful_transfers : (list Transfer)
}.
Definition update_Contract_successfully_transferred glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type glabs_b (ETH_successful_transfers glabs_a) .
Definition update_ETH_successful_transfers glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (Contract_successfully_transferred glabs_a) glabs_b .

Definition init_global_abstract_data : global_abstract_data_type := {|
  Contract_successfully_transferred := false;
  ETH_successful_transfers := nil
|}.

Definition block := positive.
Definition global_low_level_invariant (n : block)(abd : global_abstract_data_type) := True.
End EdsgerGen.

Lemma Contract_successfully_transferred_of_update_Contract_successfully_transferred : forall _x (glabs_a : global_abstract_data_type),
  Contract_successfully_transferred (update_Contract_successfully_transferred _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Contract_successfully_transferred_of_update_Contract_successfully_transferred : updates.

Lemma Contract_successfully_transferred_of_update_ETH_successful_transfers : forall _x (glabs_a : global_abstract_data_type),
  Contract_successfully_transferred (update_ETH_successful_transfers _x glabs_a) = Contract_successfully_transferred glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite Contract_successfully_transferred_of_update_ETH_successful_transfers : updates.


Lemma ETH_successful_transfers_of_update_Contract_successfully_transferred : forall _x (glabs_a : global_abstract_data_type),
  ETH_successful_transfers (update_Contract_successfully_transferred _x glabs_a) = ETH_successful_transfers glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite ETH_successful_transfers_of_update_Contract_successfully_transferred : updates.

Lemma ETH_successful_transfers_of_update_ETH_successful_transfers : forall _x (glabs_a : global_abstract_data_type),
  ETH_successful_transfers (update_ETH_successful_transfers _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite ETH_successful_transfers_of_update_ETH_successful_transfers : updates.

Opaque Contract_successfully_transferred update_Contract_successfully_transferred ETH_successful_transfers update_ETH_successful_transfers.
