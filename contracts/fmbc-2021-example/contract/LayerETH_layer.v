(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module contract.LayerETH_layer for contract.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import contract.EdsgerIdents.
Require Import contract.DataTypes.
Require Import contract.DataTypeOps.
Require Import contract.DataTypeProofs.
Require Import DeepSpec.lib.Monad.Monad.
Require Import DeepSpec.lib.Monad.MonadState.
Require Import DeepSpec.lib.Monad.StateMonad.
Require Import DeepSpec.lib.Monad.OptionMonad.
Require Import DeepSpec.lib.Monad.MonadZero.
Require Import DeepSpec.core.SynthesisStmt.
Require Import DeepSpec.core.SynthesisFunc.
Require Import backend.MachineModel.
Existing Instance MonadState_DS.
Existing Instance MonadZero_DS.

Section EdsgerGen.



Context {memModelOps : MemoryModelOps mem}.
Instance GlobalLayerSpec : LayerSpecClass := {
  memModelOps := memModelOps;
  GetHighData := global_abstract_data_type 
}.


Context`{global_abdata : !GlobalAbData init_global_abstract_data global_low_level_invariant}.
Definition ETH_layer_kernel_mode (abd : global_abstract_data_type) := True.
Global Arguments ETH_layer_kernel_mode / abd.

Class Layer_ETH_layer_Context_prf  := {
  (* ensuring global empty data matches those in the object definitions *)
  ETH_layer_init_ETH_successful_transfers_eq : ETH_successful_transfers init_global_abstract_data = nil
}.
Context`{CTXT_prf : !Layer_ETH_layer_Context_prf}.

Instance ETH_layer_data_ops : CompatDataOps global_abstract_data_type := {
  empty_data := init_global_abstract_data;
  high_level_invariant d := True;
}.

Instance ETH_layer_data : CompatData global_abstract_data_type := {
empty_data_high_level_invariant := I
}.

Instance ETH_layer_overlay_spec : OverlaySpecClass := {
}.



Instance ETH_layer_underlay_spec : UnderlaySpecClass := {
  cdataOpsLow := @BuiltinBase_data_ops GlobalLayerSpec init_global_abstract_data;
  cdataLow := BuiltinBase_data;
}.


Section OBJECT_ETH_DEFINITION.
  Context`{HM : !HyperMem}.

  (* Object variables *)
  Definition ETH_successful_transfers_var := {|
    ltype_tp_marker := tint_list_Transfer;

    ltype_ident := HighValues.Field HighValues.Global 99%positive;
    ltype_ghost := true;

    ltype_get := ETH_successful_transfers;
    ltype_set := update_ETH_successful_transfers;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.

  Definition ETH_constructor := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := nil;
    FC_returns := void_unit_pair;
    FC_body := (CCsequence
      CCskip
      CCskip)
  |}.
  Lemma ETH_constructor_wf
      : synth_func_wellformed ETH_constructor.
  Proof. solve_wellformed. Defined.
  Definition ETH_constructor_opt : machine_env GetHighData -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             ETH_successful_transfers update_ETH_successful_transfers]
  in synth_func_spec_opt ETH_constructor ETH_constructor_wf.
  Definition ETH_constructor_spec_hlist_opt args :=
    @apply_param_func ETH_constructor.(FC_params) _
                      (ETH_constructor_opt) args.


(* CEI stands for Checks Effects Interactions (pattern) and the definitions below are used
    to keep track of the safe situations in which a primitive can be called. See also
    cmd_constr_CEI_pattern_prf in Syntax.v and for the tactic definitions see Runtime.v *)
    
Lemma ETH_constructor_CEI_AB : { rsts | function_constr_CEI_pattern_prf (fst rsts) ETH_constructor (snd rsts)}.
Proof.
  unfold ETH_constructor.
  CEI_auto_AB. (* If this tactic fails then it indicates that a strict version of the Checks-Effects-Interactions pattern was not followed in the function: ETH_constructor. *)
Defined.

Lemma ETH_constructor_CEI_BA : { rsts | function_constr_CEI_pattern_prf (fst rsts) ETH_constructor (snd rsts)}.
Proof.
  unfold ETH_constructor.
  CEI_auto_BA.
Defined.

Definition ETH_constructor_CEI_rsts_before_A := fst (proj1_sig ETH_constructor_CEI_AB).
Definition ETH_constructor_CEI_rsts_after_A := snd (proj1_sig ETH_constructor_CEI_AB).
Definition ETH_constructor_CEI_rsts_before_B := fst (proj1_sig ETH_constructor_CEI_BA).
Definition ETH_constructor_CEI_rsts_after_B := snd (proj1_sig ETH_constructor_CEI_BA).

  Definition ETH_constructor_prim := {|
    PRIMident := ident_ETH_constructor;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := ETH_constructor.(FC_params);
    PRIMret_marker := ETH_constructor.(FC_returns);
    PRIMrst_before_A := ETH_constructor_CEI_rsts_before_A;
    PRIMrst_after_A := ETH_constructor_CEI_rsts_after_A;
    PRIMrst_before_B := ETH_constructor_CEI_rsts_before_B;
    PRIMrst_after_B := ETH_constructor_CEI_rsts_after_B;
    PRIMcond := fun _ _ _ => True;
    (* PRIMsem := ETH_constructor_spec_hlist; *)
    PRIMsem_opt := ETH_constructor_spec_hlist_opt
  |}.

  Lemma ETH_constructor_spec_hlist_opt_eq :
    ETH_constructor_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt ETH_constructor ETH_constructor_wf)
      args.
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             ETH_successful_transfers update_ETH_successful_transfers]. 
     reflexivity.
  Qed.
  Definition ETH_constructor_cfun :=
  Eval cbv in synth_func_func ETH_constructor.

  Definition ETH_constructor_cond  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             ETH_successful_transfers update_ETH_successful_transfers]
    in
    high_level_invariant d ->
    synth_func_cond ETH_constructor ETH_constructor_wf
								      me d.
  
  Lemma ETH_constructor_cond_eq : forall  me d, 
    ETH_constructor_cond  me d ->
    high_level_invariant d ->
    synth_func_cond ETH_constructor ETH_constructor_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             ETH_successful_transfers update_ETH_successful_transfers].
       exact H_cond.
    Qed.

  Definition ETH_constructor_obligation  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             ETH_successful_transfers update_ETH_successful_transfers]
    in
    high_level_invariant d ->
    synth_func_obligation ETH_constructor ETH_constructor_wf
								      me d.
  
  Lemma ETH_constructor_obligation_eq : forall  me d, 
    ETH_constructor_obligation  me d ->
    high_level_invariant d ->
    synth_func_obligation ETH_constructor ETH_constructor_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

             ETH_successful_transfers update_ETH_successful_transfers].
       exact H_cond.
    Qed.

  Definition ETH_constructor_spec :=
  Eval cbv [sf_mem sf_return fst snd ETH_constructor_opt] in
    fun  me => execStateT (ETH_constructor_opt me).
  Lemma ETH_constructor_spec_eq :
    ETH_constructor_spec =
    fun  me => execStateT (synth_func_spec_opt ETH_constructor ETH_constructor_wf me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Z.of_nat
Int256.repr Int256.zero Int256.one Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Int256.eq Int256.lt Int256.ltu Ziteri 
List.length is_true bool_dec
negb andb orb
hashvalue_eqb me_address me_origin me_caller me_callvalue me_coinbase me_timestamp me_number me_balance me_blockhash me_transfer me_callmethod
DS Monad_DS MonadState_DS MonadZero_DS ret bind mzero get put gets guard modify runStateT OptionMonad.Monad_option
GlobalLayerSpec GetHighData  ZMap.get ZMap.set Int256Tree.t Int256Tree.get Int256Tree.set Int256Tree.empty  Int256Tree.get_default 

          ETH_successful_transfers update_ETH_successful_transfers].
    reflexivity.
  Qed.

Global Opaque ETH_constructor_opt.
End OBJECT_ETH_DEFINITION.

End EdsgerGen.
