(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module swaps_general.RefineSWAPCONTRACT for swaps_general.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import DeepSpec.Linking.
Require Import swaps_general.EdsgerIdents.
Require Import swaps_general.DataTypes.
Require Import swaps_general.DataTypeOps.
Require Import swaps_general.DataTypeProofs.
Require Import layerlib.LayerCalculusLemma.
Require Import layerlib.RefinementTactic.
Require Import layerlib.RefinementTacticAux.
Require Import liblayers.compcertx.MakeProgram.
Require Import liblayers.compcertx.MemWithData.

Require Import swaps_general.LayerSWAPCONTRACT.
Require Import swaps_general.LSimEVMOPCODE.

Section EdsgerGen.


Context {mem}`{Hmem: Mem.MemoryModel mem}.
Context`{Hmwd: UseMemWithData mem}.
Context`{make_program_ops: !MakeProgramOps Clight.function Ctypes.type Clight.fundef Ctypes.type}.
Context`{Hmake_program: !MakeProgram Clight.function Ctypes.type Clight.fundef Ctypes.type}.
Instance GlobalLayerSpec : LayerSpecClass := {
  make_program_ops := make_program_ops;
  Hmake_program := Hmake_program;
  GetHighData := global_abstract_data_type
}.
Context`{global_abdata : !GlobalAbData init_global_abstract_data global_low_level_invariant}.
Context`{CTXT_prf : !Layer_SWAPCONTRACT_Context_prf}.
Context`{EVMOPCODE_pres_inv : !EVMOPCODE_preserves_invariants}.
Context`{SWAPCONTRACT_pres_inv : !SWAPCONTRACT_preserves_invariants}.

Existing Instances SWAPCONTRACT_overlay_spec SWAPCONTRACT_underlay_spec.

Record relate_RData (j : meminj) (habd : GetHighData) (labd : GetLowData) : Prop
    := mkrelate_RData {
  (* EVMOpcode *)
  _events_re : (_events habd) = (_events labd);
  (* DiGraph *)
  _leaders_re : (_leaders habd) = (_leaders labd);
  _parties_re : (_parties habd) = (_parties labd);
  _edges_re : (_edges habd) = (_edges labd);
  _edges_reverse_re : (_edges_reverse habd) = (_edges_reverse labd);
  _party_addr_to_ind_re : (_party_addr_to_ind habd) = (_party_addr_to_ind labd);
  _leader_addr_to_ind_re : (_leader_addr_to_ind habd) = (_leader_addr_to_ind labd);
  _party_re : (_party habd) = (_party labd);
  _counterparty_re : (_counterparty habd) = (_counterparty labd);
  _hashkeyinit_re : (_hashkeyinit habd) = (_hashkeyinit labd);
  _innerpathinit_re : (_innerpathinit habd) = (_innerpathinit labd);
  _allpaths_re : (_allpaths habd) = (_allpaths labd);
  _res_is_leader_re : (_res_is_leader habd) = (_res_is_leader labd);
  _res_is_party_re : (_res_is_party habd) = (_res_is_party labd);
  _res_is_edge_re : (_res_is_edge habd) = (_res_is_edge labd);
  _res_has_signed_re : (_res_has_signed habd) = (_res_has_signed labd);
  _res_can_sign_re : (_res_can_sign habd) = (_res_can_sign labd);
  _res_path_len_re : (_res_path_len habd) = (_res_path_len labd)
}.

Record match_RData (habd : GetHighData) (m : mem) (j : meminj) : Prop
    := MATCH_RDATA {
  _assetAmount_ma : variable_match SwapContract__assetAmount_var habd m;
  _timelocks_ma : variable_match SwapContract__timelocks_var habd m;
  _hashlocks_ma : variable_match SwapContract__hashlocks_var habd m;
  _party_ma : variable_match SwapContract__party_var habd m;
  _counterparty_ma : variable_match SwapContract__counterparty_var habd m;
  _start_ma : variable_match SwapContract__start_var habd m;
  _delta_ma : variable_match SwapContract__delta_var habd m;
  _unlocked_ma : variable_match SwapContract__unlocked_var habd m;
  _ended_ma : variable_match SwapContract__ended_var habd m;
  _canrefund_ma : variable_match SwapContract__canrefund_var habd m
}.

Local Hint Resolve MATCH_RDATA.

Global Instance rel_ops: CompatRelOps GetHighDataX GetLowDataX :=
{
  relate_AbData f d1 d2 := relate_RData f d1 d2;
  match_AbData d1 m f := match_RData d1 m f;
  new_glbl := var_SwapContract__assetAmount_ident :: var_SwapContract__timelocks_ident :: var_SwapContract__hashlocks_ident :: var_SwapContract__party_ident :: var_SwapContract__counterparty_ident :: var_SwapContract__start_ident :: var_SwapContract__delta_ident :: var_SwapContract__unlocked_ident :: var_SwapContract__ended_ident :: var_SwapContract__canrefund_ident :: nil
}.

Global Instance SwapContract__assetAmount_hyper_ltype_static :
    HyperLTypeStatic SwapContract__assetAmount_var new_glbl.
Proof.
  split; try solve
    [ Decision.decision
    | simpl; auto
    | simpl SwapContract__assetAmount_var.(ltype_offset);
      rewrite Int256.unsigned_zero; apply Z.divide_0_r ].
Qed.

Global Instance SwapContract__timelocks_hyper_ltype_static :
    HyperLTypeStatic SwapContract__timelocks_var new_glbl.
Proof.
  split; try solve
    [ Decision.decision
    | simpl; auto
    | simpl SwapContract__timelocks_var.(ltype_offset);
      rewrite Int256.unsigned_zero; apply Z.divide_0_r ].
Qed.

Global Instance SwapContract__hashlocks_hyper_ltype_static :
    HyperLTypeStatic SwapContract__hashlocks_var new_glbl.
Proof.
  split; try solve
    [ Decision.decision
    | simpl; auto
    | simpl SwapContract__hashlocks_var.(ltype_offset);
      rewrite Int256.unsigned_zero; apply Z.divide_0_r ].
Qed.

Global Instance SwapContract__party_hyper_ltype_static :
    HyperLTypeStatic SwapContract__party_var new_glbl.
Proof.
  split; try solve
    [ Decision.decision
    | simpl; auto
    | simpl SwapContract__party_var.(ltype_offset);
      rewrite Int256.unsigned_zero; apply Z.divide_0_r ].
Qed.

Global Instance SwapContract__counterparty_hyper_ltype_static :
    HyperLTypeStatic SwapContract__counterparty_var new_glbl.
Proof.
  split; try solve
    [ Decision.decision
    | simpl; auto
    | simpl SwapContract__counterparty_var.(ltype_offset);
      rewrite Int256.unsigned_zero; apply Z.divide_0_r ].
Qed.

Global Instance SwapContract__start_hyper_ltype_static :
    HyperLTypeStatic SwapContract__start_var new_glbl.
Proof.
  split; try solve
    [ Decision.decision
    | simpl; auto
    | simpl SwapContract__start_var.(ltype_offset);
      rewrite Int256.unsigned_zero; apply Z.divide_0_r ].
Qed.

Global Instance SwapContract__delta_hyper_ltype_static :
    HyperLTypeStatic SwapContract__delta_var new_glbl.
Proof.
  split; try solve
    [ Decision.decision
    | simpl; auto
    | simpl SwapContract__delta_var.(ltype_offset);
      rewrite Int256.unsigned_zero; apply Z.divide_0_r ].
Qed.

Global Instance SwapContract__unlocked_hyper_ltype_static :
    HyperLTypeStatic SwapContract__unlocked_var new_glbl.
Proof.
  split; try solve
    [ Decision.decision
    | simpl; auto
    | simpl SwapContract__unlocked_var.(ltype_offset);
      rewrite Int256.unsigned_zero; apply Z.divide_0_r ].
Qed.

Global Instance SwapContract__ended_hyper_ltype_static :
    HyperLTypeStatic SwapContract__ended_var new_glbl.
Proof.
  split; try solve
    [ Decision.decision
    | simpl; auto
    | simpl SwapContract__ended_var.(ltype_offset);
      rewrite Int256.unsigned_zero; apply Z.divide_0_r ].
Qed.

Global Instance SwapContract__canrefund_hyper_ltype_static :
    HyperLTypeStatic SwapContract__canrefund_var new_glbl.
Proof.
  split; try solve
    [ Decision.decision
    | simpl; auto
    | simpl SwapContract__canrefund_var.(ltype_offset);
      rewrite Int256.unsigned_zero; apply Z.divide_0_r ].
Qed.

Lemma relate_incr:
  forall abd abd' f f',
    relate_RData f abd abd' ->
    inject_incr f f' ->
    relate_RData f' abd abd'.
Proof.
  inversion 1; subst; intros; simpl in *.
  repeat match goal with
  | H : _ /\ _ |- _ => destruct H
  end.
  repeat (constructor; simpl; eauto).
Qed.
Global Instance rel_prf: CompatRel GetHighDataX GetLowDataX.
Proof.
  constructor; [ destruct 1 .. |]; intros.
  - constructor; eapply inject_match_correct; eauto with typeclass_instances.
  - constructor; eapply store_match_correct; eauto with typeclass_instances.
  - constructor; eapply alloc_match_correct; eauto with typeclass_instances.
  - constructor; eapply free_match_correct; eauto with typeclass_instances.
  - constructor; eapply storebytes_match_correct; eauto with typeclass_instances.
  - eapply relate_incr; eauto.
Qed.

(*
Local Instance: ExternalCallsOps (mwd GetLowDataX) := CompatExternalCalls.compatlayer_extcall_ops EVMOPCODE_Layer.
Local Instance: CompilerConfigOps _ := CompatExternalCalls.compatlayer_compiler_config_ops EVMOPCODE_Layer.
*)

Instance SWAPCONTRACT_hypermem : MemoryModel.HyperMem
  := { Hcompatrel := {| crel_prf := rel_prf |} }.

Class SWAPCONTRACT_Underlay_preserves_invariants := {
  SWAPCONTRACT_Underlay_EVMOpcode_transfer_preserves_invariants :>
    CompatGenSem.PreservesInvariants (HD := cdataLow) EVMOpcode_transfer_spec | 5;
  SWAPCONTRACT_Underlay_DiGraph_initialize_preserves_invariants :>
    CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_initialize_spec | 5;
  SWAPCONTRACT_Underlay_DiGraph_is_leader_preserves_invariants :>
    CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_is_leader_spec | 5;
  SWAPCONTRACT_Underlay_DiGraph_is_party_preserves_invariants :>
    CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_is_party_spec | 5;
  SWAPCONTRACT_Underlay_DiGraph_is_edge_preserves_invariants :>
    CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_is_edge_spec | 5;
  SWAPCONTRACT_Underlay_DiGraph_sign_follower_preserves_invariants :>
    CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_sign_follower_spec | 5;
  SWAPCONTRACT_Underlay_DiGraph_sign_leader_preserves_invariants :>
    CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_sign_leader_spec | 5;
  SWAPCONTRACT_Underlay_DiGraph_can_sign_follower_preserves_invariants :>
    CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_can_sign_follower_spec | 5;
  SWAPCONTRACT_Underlay_DiGraph_get_path_len_preserves_invariants :>
    CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_get_path_len_spec | 5
}.
Instance SWAPCONTRACT'EVMOPCODE_preserves_invariants : SWAPCONTRACT_Underlay_preserves_invariants.
Proof. esplit; apply EVMOPCODE_pres_inv. Defined.

(*
Lemma passthrough_correct:
  sim (crel (CompatRel0 := rel_prf) _ _) SWAPCONTRACT_Layer_passthrough EVMOPCODE_Layer.
Proof.
  Local Opaque simRR mapsto layer_mapsto_primitive.
  unfold GlobalLayerSpec, MemoryModel.GetHighDataX.
  simpl.

  sim_oplus; simpl.

  Local Transparent simRR mapsto layer_mapsto_primitive.
Qed.*)
End EdsgerGen.
