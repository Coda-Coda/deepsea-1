(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module swaps_general.DataTypeOps for swaps_general.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import swaps_general.EdsgerIdents.
Require Import swaps_general.DataTypes.

Section EdsgerGen.

Definition tint_U := (Tpair addr tint).
Global Instance tint_U_hyper_type_impl : HyperTypeImpl tint_U := {
  ht_cval f := (@ht_cval tint_U _ f);
  ht_ft_cond f := (@ht_ft_cond tint_U _ f);
  ht_default := (@ht_default tint_U _);
  ht_valid_ft_cond f := @ht_valid_ft_cond tint_U _ f;
  ht_valid_ft_ocond := (@ht_valid_ft_ocond tint_U _);
  ht_inject j a b := a = b
}.
Definition int_U_pair := mk_hyper_type_pair tint_U.
Global Instance tint_U_hyper_type : HyperType tint_U := _.
Global Instance tint_U_hyper_binary_impl_eq : HyperBinaryImpl Oeq tint_U tint_U tint_bool := {
  Hbinary_cond := fun _ _ => True;
  Hbinary_ocond := otrue2;
  Hbinary a b := (* XXX(output_hyper_binary_impl_eq:output_eq_expression) *) false
}.
Definition tint_U := (Tpair timeunit tint).
Global Instance tint_U_hyper_type_impl : HyperTypeImpl tint_U := {
  ht_cval f := (@ht_cval tint_U _ f);
  ht_ft_cond f := (@ht_ft_cond tint_U _ f);
  ht_default := (@ht_default tint_U _);
  ht_valid_ft_cond f := @ht_valid_ft_cond tint_U _ f;
  ht_valid_ft_ocond := (@ht_valid_ft_ocond tint_U _);
  ht_inject j a b := a = b
}.
Definition int_U_pair := mk_hyper_type_pair tint_U.
Global Instance tint_U_hyper_type : HyperType tint_U := _.
Global Instance tint_U_hyper_binary_impl_eq : HyperBinaryImpl Oeq tint_U tint_U tint_bool := {
  Hbinary_cond := fun _ _ => True;
  Hbinary_ocond := otrue2;
  Hbinary a b := (* XXX(output_hyper_binary_impl_eq:output_eq_expression) *) false
}.
Definition tTransfer_Transfer := (Tpair Transfer (Tstruct Transfer_struct_ident
  (Fcons Transfer_struct__amount_ident tint
  (Fcons Transfer_struct__to_ident tint
   Fnil)))).
Global Instance tTransfer_Transfer_hyper_type_impl : HyperTypeImpl tTransfer_Transfer := {
  ht_cval f := 
    (CVstruct (CSmap
      (PTree.set  Transfer_struct__amount_ident  (@ht_cval tint_U _ (_amount f))
      (PTree.set  Transfer_struct__to_ident  (@ht_cval tint_U _ (_to f))
      (@PTree.empty cval)))));
  ht_ft_cond f := (@ht_ft_cond tint_U _ (_amount f))
    /\ (@ht_ft_cond tint_U _ (_to f));
  ht_default := {| _amount := (@ht_default tint_U _);
       _to := (@ht_default tint_U _)
    |};
  ht_valid_ft_cond f := @ht_valid_ft_cond tint_U _ (_amount f)
    /\ @ht_valid_ft_cond tint_U _ (_to f);
  ht_valid_ft_ocond := (
    (@ht_valid_ft_ocond tint_U _) m{ _amount }
    /\ (@ht_valid_ft_ocond tint_U _) m{ _to })%oprop1;
  ht_inject j a b := a = b
}.
Definition Transfer_Transfer_pair := mk_hyper_type_pair tTransfer_Transfer.
Global Instance tTransfer_Transfer_hyper_type : HyperType tTransfer_Transfer.
Proof. solve_algebraic_record_data_type_hyper_type tTransfer_Transfer_hyper_type_impl. Qed.
Global Instance tTransfer_Transfer__amount_field_impl : HyperFieldImpl tTransfer_Transfer tint_U Transfer_struct__amount_ident := {
  Hfield_offset := 0;
  Hfield_get s := _amount s;
  Hfield_set v s := Build_Transfer v (_to s)
}.
Global Instance tTransfer_Transfer__amount_field : HyperField tTransfer_Transfer tint_U Transfer_struct__amount_ident.
Proof. solve_record_type_hyper_field. Qed.
Global Instance tTransfer_Transfer__to_field_impl : HyperFieldImpl tTransfer_Transfer tint_U Transfer_struct__to_ident := {
  Hfield_offset := 1;
  Hfield_get s := _to s;
  Hfield_set v s := Build_Transfer (_amount s) v
}.
Global Instance tTransfer_Transfer__to_field : HyperField tTransfer_Transfer tint_U Transfer_struct__to_ident.
Proof. solve_record_type_hyper_field. Qed.
Definition tint_list_Transfer := (Tpair list_Transfer tint).
Global Instance tint_list_Transfer_hyper_type_impl : HyperTypeImpl tint_list_Transfer := {
  ht_cval := fun _ => CVany;
  ht_ft_cond := fun _ => True;
  ht_default := nil;
  ht_valid_ft_cond := fun _ => True;
  ht_valid_ft_ocond := otrue1;
  ht_inject j a b := a = b
}.
Definition int_list_Transfer_pair := mk_hyper_type_pair tint_list_Transfer.
Global Instance tint_list_Transfer_hyper_binary_impl_eq : HyperBinaryImpl Oeq tint_list_Transfer tint_list_Transfer tint_bool := {
  Hbinary_cond := fun _ _ => True;
  Hbinary_ocond := otrue2;
  Hbinary a b := (* XXX(output_hyper_binary_impl_eq:output_eq_expression) *) false
}.
Definition tint_list_Z := (Tpair list_Z tint).
Global Instance tint_list_Z_hyper_type_impl : HyperTypeImpl tint_list_Z := {
  ht_cval := fun _ => CVany;
  ht_ft_cond := fun _ => True;
  ht_default := nil;
  ht_valid_ft_cond := fun _ => True;
  ht_valid_ft_ocond := otrue1;
  ht_inject j a b := a = b
}.
Definition int_list_Z_pair := mk_hyper_type_pair tint_list_Z.
Global Instance tint_list_Z_hyper_binary_impl_eq : HyperBinaryImpl Oeq tint_list_Z tint_list_Z tint_bool := {
  Hbinary_cond := fun _ _ => True;
  Hbinary_ocond := otrue2;
  Hbinary a b := (* XXX(output_hyper_binary_impl_eq:output_eq_expression) *) false
}.
Definition tedgeSet := (Tpair edgeSet tint).
Global Instance tedgeSet_hyper_type_impl : HyperTypeImpl tedgeSet := {
  ht_cval := fun _ => CVany;
  ht_ft_cond := fun _ => True;
  ht_default := (Int256Map.init (nil: (list addr)));
  ht_valid_ft_cond := fun _ => True;
  ht_valid_ft_ocond := otrue1;
  ht_inject j a b := a = b
}.
Definition edgeSet_pair := mk_hyper_type_pair tedgeSet.
Global Instance tedgeSet_hyper_binary_impl_eq : HyperBinaryImpl Oeq tedgeSet tedgeSet tint_bool := {
  Hbinary_cond := fun _ _ => True;
  Hbinary_ocond := otrue2;
  Hbinary a b := (* XXX(output_hyper_binary_impl_eq:output_eq_expression) *) false
}.
Definition tint2intMap := (Tpair int2intMap tint).
Global Instance tint2intMap_hyper_type_impl : HyperTypeImpl tint2intMap := {
  ht_cval := fun _ => CVany;
  ht_ft_cond := fun _ => True;
  ht_default := (Int256Map.init (Int256Map.zero));
  ht_valid_ft_cond := fun _ => True;
  ht_valid_ft_ocond := otrue1;
  ht_inject j a b := a = b
}.
Definition int2intMap_pair := mk_hyper_type_pair tint2intMap.
Global Instance tint2intMap_hyper_binary_impl_eq : HyperBinaryImpl Oeq tint2intMap tint2intMap tint_bool := {
  Hbinary_cond := fun _ _ => True;
  Hbinary_ocond := otrue2;
  Hbinary a b := (* XXX(output_hyper_binary_impl_eq:output_eq_expression) *) false
}.
Definition tarray_int_AR3_Z := (Tpair AR3_Z (Tarray tint 3)).
Global Instance tarray_int_AR3_Z_hyper_type_impl : HyperTypeImpl tarray_int_AR3_Z :=
  ZMap_inject_equal_array_hyper_type_impl tint_U 3.
Definition array_int_AR3_Z_pair := mk_hyper_type_pair tarray_int_AR3_Z.
Global Instance tarray_int_AR3_Z_hyper_type : HyperType tarray_int_AR3_Z :=
  Int256Tree_inject_equal_hashmap_hyper_type tint_U 3.
Global Instance tarray_int_AR3_Z_index_impl : HyperIndexImpl tarray_int_AR3_Z tint_U :=
  ZMap_inject_equal_array_hyper_index_impl tint_U 3.
Global Instance tarray_int_AR3_Z_index : HyperIndex tarray_int_AR3_Z tint_U :=
  ZMap_inject_equal_array_hyper_index tint_U 3.
Definition thash_array_int_HASH_Z_AR3_Z := (Tpair HASH_Z_AR3_Z (Thashmap tint (Tarray tint 3))).
Global Instance thash_array_int_HASH_Z_AR3_Z_hyper_type_impl : HyperTypeImpl thash_array_int_HASH_Z_AR3_Z :=
   Int256Tree_inject_equal_hashmap_hyper_type_impl tarray_int_AR3_Z.
Definition hash_array_int_HASH_Z_AR3_Z_pair := mk_hyper_type_pair thash_array_int_HASH_Z_AR3_Z.
Global Instance thash_array_int_HASH_Z_AR3_Z_hyper_type : HyperType thash_array_int_HASH_Z_AR3_Z :=
  Int256Tree_inject_equal_hashmap_hyper_type tarray_int_AR3_Z.
Global Instance thash_array_int_HASH_Z_AR3_Z_index_impl : HyperIntHashImpl thash_array_int_HASH_Z_AR3_Z tarray_int_AR3_Z :=
  Int256Tree_inject_equal_hashmap_hash_impl tarray_int_AR3_Z.
Global Instance thash_array_int_HASH_Z_AR3_Z_hash : HyperIntHash thash_array_int_HASH_Z_AR3_Z tarray_int_AR3_Z :=
  Int256Tree_inject_equal_hashmap_hash tarray_int_AR3_Z.
Definition thash_array_int_HASH_Z_AR3_Z := (Tpair edgeset (Thashmap tint (Tarray tint 3))).
Global Instance thash_array_int_HASH_Z_AR3_Z_hyper_type_impl : HyperTypeImpl thash_array_int_HASH_Z_AR3_Z :=
   Int256Tree_inject_equal_hashmap_hyper_type_impl tarray_int_AR3_Z.
Definition hash_array_int_HASH_Z_AR3_Z_pair := mk_hyper_type_pair thash_array_int_HASH_Z_AR3_Z.
Global Instance thash_array_int_HASH_Z_AR3_Z_hyper_type : HyperType thash_array_int_HASH_Z_AR3_Z :=
  Int256Tree_inject_equal_hashmap_hyper_type tarray_int_AR3_Z.
Global Instance thash_array_int_HASH_Z_AR3_Z_index_impl : HyperIntHashImpl thash_array_int_HASH_Z_AR3_Z tarray_int_AR3_Z :=
  Int256Tree_inject_equal_hashmap_hash_impl tarray_int_AR3_Z.
Global Instance thash_array_int_HASH_Z_AR3_Z_hash : HyperIntHash thash_array_int_HASH_Z_AR3_Z tarray_int_AR3_Z :=
  Int256Tree_inject_equal_hashmap_hash tarray_int_AR3_Z.
Definition tPath_Path := (Tpair Path (Tstruct Path_struct_ident
  (Fcons Path_struct_path_ident (Tarray tint 3)
  (Fcons Path_struct_nextInd_ident tint
   Fnil)))).
Global Instance tPath_Path_hyper_type_impl : HyperTypeImpl tPath_Path := {
  ht_cval f := 
    (CVstruct (CSmap
      (PTree.set  Path_struct_path_ident  (@ht_cval tarray_int_AR3_Z _ (path f))
      (PTree.set  Path_struct_nextInd_ident  (@ht_cval tint_Z32 _ (nextInd f))
      (@PTree.empty cval)))));
  ht_ft_cond f := (@ht_ft_cond tarray_int_AR3_Z _ (path f))
    /\ (@ht_ft_cond tint_Z32 _ (nextInd f));
  ht_default := {| path := (@ht_default tarray_int_AR3_Z _);
       nextInd := (@ht_default tint_Z32 _)
    |};
  ht_valid_ft_cond f := @ht_valid_ft_cond tarray_int_AR3_Z _ (path f)
    /\ @ht_valid_ft_cond tint_Z32 _ (nextInd f);
  ht_valid_ft_ocond := (
    (@ht_valid_ft_ocond tarray_int_AR3_Z _) m{ path }
    /\ (@ht_valid_ft_ocond tint_Z32 _) m{ nextInd })%oprop1;
  ht_inject j a b := a = b
}.
Definition Path_Path_pair := mk_hyper_type_pair tPath_Path.
Global Instance tPath_Path_hyper_type : HyperType tPath_Path.
Proof. solve_algebraic_record_data_type_hyper_type tPath_Path_hyper_type_impl. Qed.
Global Instance tPath_Path_path_field_impl : HyperFieldImpl tPath_Path tarray_int_AR3_Z Path_struct_path_ident := {
  Hfield_offset := 0;
  Hfield_get s := path s;
  Hfield_set v s := Build_Path v (nextInd s)
}.
Global Instance tPath_Path_path_field : HyperField tPath_Path tarray_int_AR3_Z Path_struct_path_ident.
Proof. solve_record_type_hyper_field. Qed.
Global Instance tPath_Path_nextInd_field_impl : HyperFieldImpl tPath_Path tint_Z32 Path_struct_nextInd_ident := {
  Hfield_offset := 1;
  Hfield_get s := nextInd s;
  Hfield_set v s := Build_Path (path s) v
}.
Global Instance tPath_Path_nextInd_field : HyperField tPath_Path tint_Z32 Path_struct_nextInd_ident.
Proof. solve_record_type_hyper_field. Qed.
Definition tarray_Path_AR1_Path := (Tpair AR1_Path (Tarray (Tstruct Path_struct_ident
  (Fcons Path_struct_path_ident (Tarray tint 3)
  (Fcons Path_struct_nextInd_ident tint
   Fnil))) 1)).
Global Instance tarray_Path_AR1_Path_hyper_type_impl : HyperTypeImpl tarray_Path_AR1_Path :=
  ZMap_inject_equal_array_hyper_type_impl tPath_Path 1.
Definition array_Path_AR1_Path_pair := mk_hyper_type_pair tarray_Path_AR1_Path.
Global Instance tarray_Path_AR1_Path_hyper_type : HyperType tarray_Path_AR1_Path :=
  Int256Tree_inject_equal_hashmap_hyper_type tPath_Path 1.
Global Instance tarray_Path_AR1_Path_index_impl : HyperIndexImpl tarray_Path_AR1_Path tPath_Path :=
  ZMap_inject_equal_array_hyper_index_impl tPath_Path 1.
Global Instance tarray_Path_AR1_Path_index : HyperIndex tarray_Path_AR1_Path tPath_Path :=
  ZMap_inject_equal_array_hyper_index tPath_Path 1.
Definition tHashkeys_Hashkeys := (Tpair Hashkeys (Tstruct Hashkeys_struct_ident
  (Fcons Hashkeys_struct_toleader_ident (Tarray (Tstruct Path_struct_ident
    (Fcons Path_struct_path_ident (Tarray tint 3)
    (Fcons Path_struct_nextInd_ident tint
     Fnil))) 1)
   Fnil))).
Global Instance tHashkeys_Hashkeys_hyper_type_impl : HyperTypeImpl tHashkeys_Hashkeys := {
  ht_cval f := 
    (CVstruct (CSmap
      (PTree.set  Hashkeys_struct_toleader_ident  (@ht_cval tarray_Path_AR1_Path _ (toleader f))
      (@PTree.empty cval))));
  ht_ft_cond f := (@ht_ft_cond tarray_Path_AR1_Path _ (toleader f));
  ht_default := {| toleader := (@ht_default tarray_Path_AR1_Path _)
    |};
  ht_valid_ft_cond f := @ht_valid_ft_cond tarray_Path_AR1_Path _ (toleader f);
  ht_valid_ft_ocond := (
    (@ht_valid_ft_ocond tarray_Path_AR1_Path _) m{ toleader })%oprop1;
  ht_inject j a b := a = b
}.
Definition Hashkeys_Hashkeys_pair := mk_hyper_type_pair tHashkeys_Hashkeys.
Global Instance tHashkeys_Hashkeys_hyper_type : HyperType tHashkeys_Hashkeys.
Proof. solve_algebraic_record_data_type_hyper_type tHashkeys_Hashkeys_hyper_type_impl. Qed.
Global Instance tHashkeys_Hashkeys_toleader_field_impl : HyperFieldImpl tHashkeys_Hashkeys tarray_Path_AR1_Path Hashkeys_struct_toleader_ident := {
  Hfield_offset := 0;
  Hfield_get s := toleader s;
  Hfield_set v s := Build_Hashkeys v
}.
Global Instance tHashkeys_Hashkeys_toleader_field : HyperField tHashkeys_Hashkeys tarray_Path_AR1_Path Hashkeys_struct_toleader_ident.
Proof. solve_record_type_hyper_field. Qed.
Definition tarray_int_AR1_Z := (Tpair AR1_Z (Tarray tint 1)).
Global Instance tarray_int_AR1_Z_hyper_type_impl : HyperTypeImpl tarray_int_AR1_Z :=
  ZMap_inject_equal_array_hyper_type_impl tint_U 1.
Definition array_int_AR1_Z_pair := mk_hyper_type_pair tarray_int_AR1_Z.
Global Instance tarray_int_AR1_Z_hyper_type : HyperType tarray_int_AR1_Z :=
  Int256Tree_inject_equal_hashmap_hyper_type tint_U 1.
Global Instance tarray_int_AR1_Z_index_impl : HyperIndexImpl tarray_int_AR1_Z tint_U :=
  ZMap_inject_equal_array_hyper_index_impl tint_U 1.
Global Instance tarray_int_AR1_Z_index : HyperIndex tarray_int_AR1_Z tint_U :=
  ZMap_inject_equal_array_hyper_index tint_U 1.
Definition thash_int_HASH_Z_Z32 := (Tpair HASH_Z_Z32 (Thashmap tint tint)).
Global Instance thash_int_HASH_Z_Z32_hyper_type_impl : HyperTypeImpl thash_int_HASH_Z_Z32 :=
   Int256Tree_inject_equal_hashmap_hyper_type_impl tint_Z32.
Definition hash_int_HASH_Z_Z32_pair := mk_hyper_type_pair thash_int_HASH_Z_Z32.
Global Instance thash_int_HASH_Z_Z32_hyper_type : HyperType thash_int_HASH_Z_Z32 :=
  Int256Tree_inject_equal_hashmap_hyper_type tint_Z32.
Global Instance thash_int_HASH_Z_Z32_index_impl : HyperIntHashImpl thash_int_HASH_Z_Z32 tint_Z32 :=
  Int256Tree_inject_equal_hashmap_hash_impl tint_Z32.
Global Instance thash_int_HASH_Z_Z32_hash : HyperIntHash thash_int_HASH_Z_Z32 tint_Z32 :=
  Int256Tree_inject_equal_hashmap_hash tint_Z32.
Definition tarray_Hashkeys_AR3_Hashkeys := (Tpair AR3_Hashkeys (Tarray (Tstruct Hashkeys_struct_ident
  (Fcons Hashkeys_struct_toleader_ident (Tarray (Tstruct Path_struct_ident
    (Fcons Path_struct_path_ident (Tarray tint 3)
    (Fcons Path_struct_nextInd_ident tint
     Fnil))) 1)
   Fnil)) 3)).
Global Instance tarray_Hashkeys_AR3_Hashkeys_hyper_type_impl : HyperTypeImpl tarray_Hashkeys_AR3_Hashkeys :=
  ZMap_inject_equal_array_hyper_type_impl tHashkeys_Hashkeys 3.
Definition array_Hashkeys_AR3_Hashkeys_pair := mk_hyper_type_pair tarray_Hashkeys_AR3_Hashkeys.
Global Instance tarray_Hashkeys_AR3_Hashkeys_hyper_type : HyperType tarray_Hashkeys_AR3_Hashkeys :=
  Int256Tree_inject_equal_hashmap_hyper_type tHashkeys_Hashkeys 3.
Global Instance tarray_Hashkeys_AR3_Hashkeys_index_impl : HyperIndexImpl tarray_Hashkeys_AR3_Hashkeys tHashkeys_Hashkeys :=
  ZMap_inject_equal_array_hyper_index_impl tHashkeys_Hashkeys 3.
Global Instance tarray_Hashkeys_AR3_Hashkeys_index : HyperIndex tarray_Hashkeys_AR3_Hashkeys tHashkeys_Hashkeys :=
  ZMap_inject_equal_array_hyper_index tHashkeys_Hashkeys 3.
Definition tarray_array_Hashkeys_AR3_AR3_Hashkeys := (Tpair AR3_AR3_Hashkeys (Tarray (Tarray (Tstruct Hashkeys_struct_ident
  (Fcons Hashkeys_struct_toleader_ident (Tarray (Tstruct Path_struct_ident
    (Fcons Path_struct_path_ident (Tarray tint 3)
    (Fcons Path_struct_nextInd_ident tint
     Fnil))) 1)
   Fnil)) 3) 3)).
Global Instance tarray_array_Hashkeys_AR3_AR3_Hashkeys_hyper_type_impl : HyperTypeImpl tarray_array_Hashkeys_AR3_AR3_Hashkeys :=
  ZMap_inject_equal_array_hyper_type_impl tarray_Hashkeys_AR3_Hashkeys 3.
Definition array_array_Hashkeys_AR3_AR3_Hashkeys_pair := mk_hyper_type_pair tarray_array_Hashkeys_AR3_AR3_Hashkeys.
Global Instance tarray_array_Hashkeys_AR3_AR3_Hashkeys_hyper_type : HyperType tarray_array_Hashkeys_AR3_AR3_Hashkeys :=
  Int256Tree_inject_equal_hashmap_hyper_type tarray_Hashkeys_AR3_Hashkeys 3.
Global Instance tarray_array_Hashkeys_AR3_AR3_Hashkeys_index_impl : HyperIndexImpl tarray_array_Hashkeys_AR3_AR3_Hashkeys tarray_Hashkeys_AR3_Hashkeys :=
  ZMap_inject_equal_array_hyper_index_impl tarray_Hashkeys_AR3_Hashkeys 3.
Global Instance tarray_array_Hashkeys_AR3_AR3_Hashkeys_index : HyperIndex tarray_array_Hashkeys_AR3_AR3_Hashkeys tarray_Hashkeys_AR3_Hashkeys :=
  ZMap_inject_equal_array_hyper_index tarray_Hashkeys_AR3_Hashkeys 3.
Definition tarray_int_AR1_hashvalue := (Tpair AR1_hashvalue (Tarray tint 1)).
Global Instance tarray_int_AR1_hashvalue_hyper_type_impl : HyperTypeImpl tarray_int_AR1_hashvalue :=
  ZMap_inject_equal_array_hyper_type_impl tint_hashvalue 1.
Definition array_int_AR1_hashvalue_pair := mk_hyper_type_pair tarray_int_AR1_hashvalue.
Global Instance tarray_int_AR1_hashvalue_hyper_type : HyperType tarray_int_AR1_hashvalue :=
  Int256Tree_inject_equal_hashmap_hyper_type tint_hashvalue 1.
Global Instance tarray_int_AR1_hashvalue_index_impl : HyperIndexImpl tarray_int_AR1_hashvalue tint_hashvalue :=
  ZMap_inject_equal_array_hyper_index_impl tint_hashvalue 1.
Global Instance tarray_int_AR1_hashvalue_index : HyperIndex tarray_int_AR1_hashvalue tint_hashvalue :=
  ZMap_inject_equal_array_hyper_index tint_hashvalue 1.
Definition tarray_int_AR1_bool := (Tpair AR1_bool (Tarray tint 1)).
Global Instance tarray_int_AR1_bool_hyper_type_impl : HyperTypeImpl tarray_int_AR1_bool :=
  ZMap_inject_equal_array_hyper_type_impl tint_bool 1.
Definition array_int_AR1_bool_pair := mk_hyper_type_pair tarray_int_AR1_bool.
Global Instance tarray_int_AR1_bool_hyper_type : HyperType tarray_int_AR1_bool :=
  Int256Tree_inject_equal_hashmap_hyper_type tint_bool 1.
Global Instance tarray_int_AR1_bool_index_impl : HyperIndexImpl tarray_int_AR1_bool tint_bool :=
  ZMap_inject_equal_array_hyper_index_impl tint_bool 1.
Global Instance tarray_int_AR1_bool_index : HyperIndex tarray_int_AR1_bool tint_bool :=
  ZMap_inject_equal_array_hyper_index tint_bool 1.
Record global_abstract_data_type : Type := {
  _assetAmount : int256;
  _timelocks : (ZMap.t int256);
  _hashlocks : (ZMap.t hashvalue);
  _party : int256;
  _counterparty : int256;
  _start : int256;
  _delta : int256;
  _unlocked : (ZMap.t bool);
  _ended : bool;
  _canrefund : bool;
  _events : (list Transfer);
  _leaders : (ZMap.t int256);
  _parties : (ZMap.t int256);
  _edges : (Int256Tree.t (ZMap.t int256));
  _edges_reverse : (Int256Tree.t (ZMap.t int256));
  _party_addr_to_ind : (Int256Tree.t Z32);
  _leader_addr_to_ind : (Int256Tree.t Z32);
  _party : int256;
  _counterparty : int256;
  _hashkeyinit : (ZMap.t Path);
  _innerpathinit : (ZMap.t Hashkeys);
  _allpaths : (ZMap.t (ZMap.t Hashkeys));
  _res_is_leader : bool;
  _res_is_party : bool;
  _res_is_edge : bool;
  _res_has_signed : bool;
  _res_can_sign : bool;
  _res_path_len : int256
}.
Definition update__assetAmount glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type glabs_b (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__timelocks glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) glabs_b (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__hashlocks glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) glabs_b (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__party glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) glabs_b (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__counterparty glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) glabs_b (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__start glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) glabs_b (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__delta glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) glabs_b (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__unlocked glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) glabs_b (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__ended glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) glabs_b (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__canrefund glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) glabs_b (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__events glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) glabs_b (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__leaders glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) glabs_b (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__parties glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) glabs_b (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__edges glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) glabs_b (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__edges_reverse glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) glabs_b (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__party_addr_to_ind glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) glabs_b (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__leader_addr_to_ind glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) glabs_b (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__party glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) glabs_b (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__counterparty glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) glabs_b (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__hashkeyinit glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) glabs_b (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__innerpathinit glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) glabs_b (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__allpaths glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) glabs_b (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__res_is_leader glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) glabs_b (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__res_is_party glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) glabs_b (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__res_is_edge glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) glabs_b (_res_has_signed glabs_a) (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__res_has_signed glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) glabs_b (_res_can_sign glabs_a) (_res_path_len glabs_a) .
Definition update__res_can_sign glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) glabs_b (_res_path_len glabs_a) .
Definition update__res_path_len glabs_b (glabs_a : global_abstract_data_type)
  := Build_global_abstract_data_type (_assetAmount glabs_a) (_timelocks glabs_a) (_hashlocks glabs_a) (_party glabs_a) (_counterparty glabs_a) (_start glabs_a) (_delta glabs_a) (_unlocked glabs_a) (_ended glabs_a) (_canrefund glabs_a) (_events glabs_a) (_leaders glabs_a) (_parties glabs_a) (_edges glabs_a) (_edges_reverse glabs_a) (_party_addr_to_ind glabs_a) (_leader_addr_to_ind glabs_a) (_party glabs_a) (_counterparty glabs_a) (_hashkeyinit glabs_a) (_innerpathinit glabs_a) (_allpaths glabs_a) (_res_is_leader glabs_a) (_res_is_party glabs_a) (_res_is_edge glabs_a) (_res_has_signed glabs_a) (_res_can_sign glabs_a) glabs_b .

Definition init_global_abstract_data : global_abstract_data_type := {|
  _assetAmount := (Int256.repr 0);
  _timelocks := (ZMap.init (@ht_default tint_U _));
  _hashlocks := (ZMap.init (@ht_default tint_hashvalue _));
  _party := (Int256.repr 0);
  _counterparty := (Int256.repr 0);
  _start := (Int256.repr 0);
  _delta := (Int256.repr 0);
  _unlocked := (ZMap.init (@ht_default tint_bool _));
  _ended := false;
  _canrefund := false;
  _events := nil;
  _leaders := (ZMap.init (@ht_default tint_U _));
  _parties := (ZMap.init (@ht_default tint_U _));
  _edges := (Int256Tree.empty (ZMap.t int256));
  _edges_reverse := (Int256Tree.empty (ZMap.t int256));
  _party_addr_to_ind := (Int256Tree.empty Z32);
  _leader_addr_to_ind := (Int256Tree.empty Z32);
  _party := (Int256.repr 0);
  _counterparty := (Int256.repr 0);
  _hashkeyinit := (ZMap.init {| path := (@ht_default tarray_int_AR3_Z _);
           nextInd := (@ht_default tint_Z32 _)
        |});
  _innerpathinit := (ZMap.init {| toleader := (@ht_default tarray_Path_AR1_Path _)
        |});
  _allpaths := (ZMap.init (ZMap.init (@ht_default tHashkeys_Hashkeys _)));
  _res_is_leader := false;
  _res_is_party := false;
  _res_is_edge := false;
  _res_has_signed := false;
  _res_can_sign := false;
  _res_path_len := (Int256.repr 0)
|}.

Definition block := positive.
Definition global_low_level_invariant (n : block)(abd : global_abstract_data_type) := True.
End EdsgerGen.

Lemma _assetAmount_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__assetAmount _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__assetAmount : updates.

Lemma _assetAmount_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__timelocks _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__timelocks : updates.

Lemma _assetAmount_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__hashlocks _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__hashlocks : updates.

Lemma _assetAmount_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__party _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__party : updates.

Lemma _assetAmount_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__counterparty _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__counterparty : updates.

Lemma _assetAmount_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__start _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__start : updates.

Lemma _assetAmount_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__delta _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__delta : updates.

Lemma _assetAmount_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__unlocked _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__unlocked : updates.

Lemma _assetAmount_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__ended _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__ended : updates.

Lemma _assetAmount_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__canrefund _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__canrefund : updates.

Lemma _assetAmount_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__events _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__events : updates.

Lemma _assetAmount_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__leaders _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__leaders : updates.

Lemma _assetAmount_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__parties _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__parties : updates.

Lemma _assetAmount_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__edges _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__edges : updates.

Lemma _assetAmount_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__edges_reverse _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__edges_reverse : updates.

Lemma _assetAmount_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__party_addr_to_ind _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__party_addr_to_ind : updates.

Lemma _assetAmount_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__leader_addr_to_ind _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__leader_addr_to_ind : updates.

Lemma _assetAmount_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__party _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__party : updates.

Lemma _assetAmount_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__counterparty _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__counterparty : updates.

Lemma _assetAmount_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__hashkeyinit _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__hashkeyinit : updates.

Lemma _assetAmount_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__innerpathinit _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__innerpathinit : updates.

Lemma _assetAmount_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__allpaths _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__allpaths : updates.

Lemma _assetAmount_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__res_is_leader _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__res_is_leader : updates.

Lemma _assetAmount_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__res_is_party _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__res_is_party : updates.

Lemma _assetAmount_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__res_is_edge _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__res_is_edge : updates.

Lemma _assetAmount_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__res_has_signed _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__res_has_signed : updates.

Lemma _assetAmount_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__res_can_sign _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__res_can_sign : updates.

Lemma _assetAmount_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _assetAmount (update__res_path_len _x glabs_a) = _assetAmount glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _assetAmount_of_update__res_path_len : updates.


Lemma _timelocks_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__assetAmount _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__assetAmount : updates.

Lemma _timelocks_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__timelocks _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__timelocks : updates.

Lemma _timelocks_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__hashlocks _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__hashlocks : updates.

Lemma _timelocks_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__party _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__party : updates.

Lemma _timelocks_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__counterparty _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__counterparty : updates.

Lemma _timelocks_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__start _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__start : updates.

Lemma _timelocks_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__delta _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__delta : updates.

Lemma _timelocks_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__unlocked _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__unlocked : updates.

Lemma _timelocks_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__ended _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__ended : updates.

Lemma _timelocks_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__canrefund _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__canrefund : updates.

Lemma _timelocks_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__events _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__events : updates.

Lemma _timelocks_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__leaders _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__leaders : updates.

Lemma _timelocks_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__parties _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__parties : updates.

Lemma _timelocks_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__edges _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__edges : updates.

Lemma _timelocks_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__edges_reverse _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__edges_reverse : updates.

Lemma _timelocks_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__party_addr_to_ind _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__party_addr_to_ind : updates.

Lemma _timelocks_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__leader_addr_to_ind _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__leader_addr_to_ind : updates.

Lemma _timelocks_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__party _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__party : updates.

Lemma _timelocks_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__counterparty _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__counterparty : updates.

Lemma _timelocks_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__hashkeyinit _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__hashkeyinit : updates.

Lemma _timelocks_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__innerpathinit _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__innerpathinit : updates.

Lemma _timelocks_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__allpaths _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__allpaths : updates.

Lemma _timelocks_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__res_is_leader _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__res_is_leader : updates.

Lemma _timelocks_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__res_is_party _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__res_is_party : updates.

Lemma _timelocks_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__res_is_edge _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__res_is_edge : updates.

Lemma _timelocks_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__res_has_signed _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__res_has_signed : updates.

Lemma _timelocks_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__res_can_sign _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__res_can_sign : updates.

Lemma _timelocks_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _timelocks (update__res_path_len _x glabs_a) = _timelocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _timelocks_of_update__res_path_len : updates.


Lemma _hashlocks_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__assetAmount _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__assetAmount : updates.

Lemma _hashlocks_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__timelocks _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__timelocks : updates.

Lemma _hashlocks_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__hashlocks _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__hashlocks : updates.

Lemma _hashlocks_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__party _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__party : updates.

Lemma _hashlocks_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__counterparty _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__counterparty : updates.

Lemma _hashlocks_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__start _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__start : updates.

Lemma _hashlocks_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__delta _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__delta : updates.

Lemma _hashlocks_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__unlocked _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__unlocked : updates.

Lemma _hashlocks_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__ended _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__ended : updates.

Lemma _hashlocks_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__canrefund _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__canrefund : updates.

Lemma _hashlocks_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__events _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__events : updates.

Lemma _hashlocks_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__leaders _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__leaders : updates.

Lemma _hashlocks_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__parties _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__parties : updates.

Lemma _hashlocks_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__edges _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__edges : updates.

Lemma _hashlocks_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__edges_reverse _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__edges_reverse : updates.

Lemma _hashlocks_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__party_addr_to_ind _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__party_addr_to_ind : updates.

Lemma _hashlocks_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__leader_addr_to_ind _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__leader_addr_to_ind : updates.

Lemma _hashlocks_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__party _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__party : updates.

Lemma _hashlocks_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__counterparty _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__counterparty : updates.

Lemma _hashlocks_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__hashkeyinit _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__hashkeyinit : updates.

Lemma _hashlocks_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__innerpathinit _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__innerpathinit : updates.

Lemma _hashlocks_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__allpaths _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__allpaths : updates.

Lemma _hashlocks_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__res_is_leader _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__res_is_leader : updates.

Lemma _hashlocks_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__res_is_party _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__res_is_party : updates.

Lemma _hashlocks_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__res_is_edge _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__res_is_edge : updates.

Lemma _hashlocks_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__res_has_signed _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__res_has_signed : updates.

Lemma _hashlocks_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__res_can_sign _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__res_can_sign : updates.

Lemma _hashlocks_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _hashlocks (update__res_path_len _x glabs_a) = _hashlocks glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashlocks_of_update__res_path_len : updates.


Lemma _party_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _party (update__assetAmount _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__assetAmount : updates.

Lemma _party_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _party (update__timelocks _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__timelocks : updates.

Lemma _party_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _party (update__hashlocks _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__hashlocks : updates.

Lemma _party_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _party (update__party _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__party : updates.

Lemma _party_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _party (update__counterparty _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__counterparty : updates.

Lemma _party_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _party (update__start _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__start : updates.

Lemma _party_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _party (update__delta _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__delta : updates.

Lemma _party_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _party (update__unlocked _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__unlocked : updates.

Lemma _party_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _party (update__ended _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__ended : updates.

Lemma _party_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _party (update__canrefund _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__canrefund : updates.

Lemma _party_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _party (update__events _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__events : updates.

Lemma _party_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _party (update__leaders _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__leaders : updates.

Lemma _party_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _party (update__parties _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__parties : updates.

Lemma _party_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _party (update__edges _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__edges : updates.

Lemma _party_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _party (update__edges_reverse _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__edges_reverse : updates.

Lemma _party_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _party (update__party_addr_to_ind _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__party_addr_to_ind : updates.

Lemma _party_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _party (update__leader_addr_to_ind _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__leader_addr_to_ind : updates.

Lemma _party_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _party (update__party _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__party : updates.

Lemma _party_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _party (update__counterparty _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__counterparty : updates.

Lemma _party_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _party (update__hashkeyinit _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__hashkeyinit : updates.

Lemma _party_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _party (update__innerpathinit _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__innerpathinit : updates.

Lemma _party_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _party (update__allpaths _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__allpaths : updates.

Lemma _party_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_is_leader _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_is_leader : updates.

Lemma _party_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_is_party _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_is_party : updates.

Lemma _party_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_is_edge _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_is_edge : updates.

Lemma _party_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_has_signed _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_has_signed : updates.

Lemma _party_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_can_sign _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_can_sign : updates.

Lemma _party_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_path_len _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_path_len : updates.


Lemma _counterparty_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__assetAmount _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__assetAmount : updates.

Lemma _counterparty_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__timelocks _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__timelocks : updates.

Lemma _counterparty_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__hashlocks _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__hashlocks : updates.

Lemma _counterparty_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__party _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__party : updates.

Lemma _counterparty_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__counterparty _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__counterparty : updates.

Lemma _counterparty_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__start _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__start : updates.

Lemma _counterparty_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__delta _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__delta : updates.

Lemma _counterparty_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__unlocked _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__unlocked : updates.

Lemma _counterparty_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__ended _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__ended : updates.

Lemma _counterparty_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__canrefund _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__canrefund : updates.

Lemma _counterparty_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__events _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__events : updates.

Lemma _counterparty_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__leaders _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__leaders : updates.

Lemma _counterparty_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__parties _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__parties : updates.

Lemma _counterparty_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__edges _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__edges : updates.

Lemma _counterparty_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__edges_reverse _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__edges_reverse : updates.

Lemma _counterparty_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__party_addr_to_ind _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__party_addr_to_ind : updates.

Lemma _counterparty_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__leader_addr_to_ind _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__leader_addr_to_ind : updates.

Lemma _counterparty_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__party _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__party : updates.

Lemma _counterparty_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__counterparty _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__counterparty : updates.

Lemma _counterparty_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__hashkeyinit _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__hashkeyinit : updates.

Lemma _counterparty_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__innerpathinit _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__innerpathinit : updates.

Lemma _counterparty_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__allpaths _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__allpaths : updates.

Lemma _counterparty_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_is_leader _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_is_leader : updates.

Lemma _counterparty_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_is_party _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_is_party : updates.

Lemma _counterparty_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_is_edge _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_is_edge : updates.

Lemma _counterparty_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_has_signed _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_has_signed : updates.

Lemma _counterparty_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_can_sign _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_can_sign : updates.

Lemma _counterparty_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_path_len _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_path_len : updates.


Lemma _start_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _start (update__assetAmount _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__assetAmount : updates.

Lemma _start_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _start (update__timelocks _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__timelocks : updates.

Lemma _start_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _start (update__hashlocks _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__hashlocks : updates.

Lemma _start_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _start (update__party _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__party : updates.

Lemma _start_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _start (update__counterparty _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__counterparty : updates.

Lemma _start_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _start (update__start _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__start : updates.

Lemma _start_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _start (update__delta _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__delta : updates.

Lemma _start_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _start (update__unlocked _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__unlocked : updates.

Lemma _start_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _start (update__ended _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__ended : updates.

Lemma _start_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _start (update__canrefund _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__canrefund : updates.

Lemma _start_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _start (update__events _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__events : updates.

Lemma _start_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _start (update__leaders _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__leaders : updates.

Lemma _start_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _start (update__parties _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__parties : updates.

Lemma _start_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _start (update__edges _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__edges : updates.

Lemma _start_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _start (update__edges_reverse _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__edges_reverse : updates.

Lemma _start_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _start (update__party_addr_to_ind _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__party_addr_to_ind : updates.

Lemma _start_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _start (update__leader_addr_to_ind _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__leader_addr_to_ind : updates.

Lemma _start_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _start (update__party _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__party : updates.

Lemma _start_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _start (update__counterparty _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__counterparty : updates.

Lemma _start_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _start (update__hashkeyinit _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__hashkeyinit : updates.

Lemma _start_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _start (update__innerpathinit _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__innerpathinit : updates.

Lemma _start_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _start (update__allpaths _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__allpaths : updates.

Lemma _start_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _start (update__res_is_leader _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__res_is_leader : updates.

Lemma _start_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _start (update__res_is_party _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__res_is_party : updates.

Lemma _start_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _start (update__res_is_edge _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__res_is_edge : updates.

Lemma _start_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _start (update__res_has_signed _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__res_has_signed : updates.

Lemma _start_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _start (update__res_can_sign _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__res_can_sign : updates.

Lemma _start_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _start (update__res_path_len _x glabs_a) = _start glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _start_of_update__res_path_len : updates.


Lemma _delta_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__assetAmount _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__assetAmount : updates.

Lemma _delta_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__timelocks _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__timelocks : updates.

Lemma _delta_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__hashlocks _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__hashlocks : updates.

Lemma _delta_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__party _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__party : updates.

Lemma _delta_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__counterparty _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__counterparty : updates.

Lemma _delta_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__start _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__start : updates.

Lemma _delta_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__delta _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__delta : updates.

Lemma _delta_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__unlocked _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__unlocked : updates.

Lemma _delta_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__ended _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__ended : updates.

Lemma _delta_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__canrefund _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__canrefund : updates.

Lemma _delta_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__events _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__events : updates.

Lemma _delta_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__leaders _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__leaders : updates.

Lemma _delta_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__parties _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__parties : updates.

Lemma _delta_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__edges _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__edges : updates.

Lemma _delta_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__edges_reverse _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__edges_reverse : updates.

Lemma _delta_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__party_addr_to_ind _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__party_addr_to_ind : updates.

Lemma _delta_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__leader_addr_to_ind _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__leader_addr_to_ind : updates.

Lemma _delta_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__party _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__party : updates.

Lemma _delta_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__counterparty _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__counterparty : updates.

Lemma _delta_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__hashkeyinit _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__hashkeyinit : updates.

Lemma _delta_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__innerpathinit _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__innerpathinit : updates.

Lemma _delta_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__allpaths _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__allpaths : updates.

Lemma _delta_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__res_is_leader _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__res_is_leader : updates.

Lemma _delta_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__res_is_party _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__res_is_party : updates.

Lemma _delta_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__res_is_edge _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__res_is_edge : updates.

Lemma _delta_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__res_has_signed _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__res_has_signed : updates.

Lemma _delta_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__res_can_sign _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__res_can_sign : updates.

Lemma _delta_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _delta (update__res_path_len _x glabs_a) = _delta glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _delta_of_update__res_path_len : updates.


Lemma _unlocked_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__assetAmount _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__assetAmount : updates.

Lemma _unlocked_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__timelocks _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__timelocks : updates.

Lemma _unlocked_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__hashlocks _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__hashlocks : updates.

Lemma _unlocked_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__party _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__party : updates.

Lemma _unlocked_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__counterparty _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__counterparty : updates.

Lemma _unlocked_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__start _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__start : updates.

Lemma _unlocked_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__delta _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__delta : updates.

Lemma _unlocked_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__unlocked _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__unlocked : updates.

Lemma _unlocked_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__ended _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__ended : updates.

Lemma _unlocked_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__canrefund _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__canrefund : updates.

Lemma _unlocked_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__events _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__events : updates.

Lemma _unlocked_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__leaders _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__leaders : updates.

Lemma _unlocked_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__parties _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__parties : updates.

Lemma _unlocked_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__edges _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__edges : updates.

Lemma _unlocked_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__edges_reverse _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__edges_reverse : updates.

Lemma _unlocked_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__party_addr_to_ind _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__party_addr_to_ind : updates.

Lemma _unlocked_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__leader_addr_to_ind _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__leader_addr_to_ind : updates.

Lemma _unlocked_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__party _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__party : updates.

Lemma _unlocked_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__counterparty _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__counterparty : updates.

Lemma _unlocked_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__hashkeyinit _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__hashkeyinit : updates.

Lemma _unlocked_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__innerpathinit _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__innerpathinit : updates.

Lemma _unlocked_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__allpaths _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__allpaths : updates.

Lemma _unlocked_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__res_is_leader _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__res_is_leader : updates.

Lemma _unlocked_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__res_is_party _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__res_is_party : updates.

Lemma _unlocked_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__res_is_edge _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__res_is_edge : updates.

Lemma _unlocked_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__res_has_signed _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__res_has_signed : updates.

Lemma _unlocked_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__res_can_sign _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__res_can_sign : updates.

Lemma _unlocked_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _unlocked (update__res_path_len _x glabs_a) = _unlocked glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _unlocked_of_update__res_path_len : updates.


Lemma _ended_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__assetAmount _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__assetAmount : updates.

Lemma _ended_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__timelocks _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__timelocks : updates.

Lemma _ended_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__hashlocks _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__hashlocks : updates.

Lemma _ended_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__party _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__party : updates.

Lemma _ended_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__counterparty _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__counterparty : updates.

Lemma _ended_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__start _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__start : updates.

Lemma _ended_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__delta _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__delta : updates.

Lemma _ended_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__unlocked _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__unlocked : updates.

Lemma _ended_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__ended _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__ended : updates.

Lemma _ended_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__canrefund _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__canrefund : updates.

Lemma _ended_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__events _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__events : updates.

Lemma _ended_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__leaders _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__leaders : updates.

Lemma _ended_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__parties _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__parties : updates.

Lemma _ended_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__edges _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__edges : updates.

Lemma _ended_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__edges_reverse _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__edges_reverse : updates.

Lemma _ended_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__party_addr_to_ind _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__party_addr_to_ind : updates.

Lemma _ended_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__leader_addr_to_ind _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__leader_addr_to_ind : updates.

Lemma _ended_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__party _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__party : updates.

Lemma _ended_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__counterparty _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__counterparty : updates.

Lemma _ended_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__hashkeyinit _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__hashkeyinit : updates.

Lemma _ended_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__innerpathinit _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__innerpathinit : updates.

Lemma _ended_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__allpaths _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__allpaths : updates.

Lemma _ended_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__res_is_leader _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__res_is_leader : updates.

Lemma _ended_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__res_is_party _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__res_is_party : updates.

Lemma _ended_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__res_is_edge _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__res_is_edge : updates.

Lemma _ended_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__res_has_signed _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__res_has_signed : updates.

Lemma _ended_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__res_can_sign _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__res_can_sign : updates.

Lemma _ended_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _ended (update__res_path_len _x glabs_a) = _ended glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _ended_of_update__res_path_len : updates.


Lemma _canrefund_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__assetAmount _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__assetAmount : updates.

Lemma _canrefund_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__timelocks _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__timelocks : updates.

Lemma _canrefund_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__hashlocks _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__hashlocks : updates.

Lemma _canrefund_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__party _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__party : updates.

Lemma _canrefund_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__counterparty _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__counterparty : updates.

Lemma _canrefund_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__start _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__start : updates.

Lemma _canrefund_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__delta _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__delta : updates.

Lemma _canrefund_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__unlocked _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__unlocked : updates.

Lemma _canrefund_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__ended _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__ended : updates.

Lemma _canrefund_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__canrefund _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__canrefund : updates.

Lemma _canrefund_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__events _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__events : updates.

Lemma _canrefund_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__leaders _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__leaders : updates.

Lemma _canrefund_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__parties _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__parties : updates.

Lemma _canrefund_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__edges _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__edges : updates.

Lemma _canrefund_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__edges_reverse _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__edges_reverse : updates.

Lemma _canrefund_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__party_addr_to_ind _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__party_addr_to_ind : updates.

Lemma _canrefund_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__leader_addr_to_ind _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__leader_addr_to_ind : updates.

Lemma _canrefund_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__party _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__party : updates.

Lemma _canrefund_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__counterparty _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__counterparty : updates.

Lemma _canrefund_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__hashkeyinit _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__hashkeyinit : updates.

Lemma _canrefund_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__innerpathinit _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__innerpathinit : updates.

Lemma _canrefund_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__allpaths _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__allpaths : updates.

Lemma _canrefund_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__res_is_leader _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__res_is_leader : updates.

Lemma _canrefund_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__res_is_party _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__res_is_party : updates.

Lemma _canrefund_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__res_is_edge _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__res_is_edge : updates.

Lemma _canrefund_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__res_has_signed _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__res_has_signed : updates.

Lemma _canrefund_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__res_can_sign _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__res_can_sign : updates.

Lemma _canrefund_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _canrefund (update__res_path_len _x glabs_a) = _canrefund glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _canrefund_of_update__res_path_len : updates.


Lemma _events_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _events (update__assetAmount _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__assetAmount : updates.

Lemma _events_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _events (update__timelocks _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__timelocks : updates.

Lemma _events_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _events (update__hashlocks _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__hashlocks : updates.

Lemma _events_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _events (update__party _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__party : updates.

Lemma _events_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _events (update__counterparty _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__counterparty : updates.

Lemma _events_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _events (update__start _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__start : updates.

Lemma _events_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _events (update__delta _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__delta : updates.

Lemma _events_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _events (update__unlocked _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__unlocked : updates.

Lemma _events_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _events (update__ended _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__ended : updates.

Lemma _events_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _events (update__canrefund _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__canrefund : updates.

Lemma _events_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _events (update__events _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__events : updates.

Lemma _events_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _events (update__leaders _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__leaders : updates.

Lemma _events_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _events (update__parties _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__parties : updates.

Lemma _events_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _events (update__edges _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__edges : updates.

Lemma _events_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _events (update__edges_reverse _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__edges_reverse : updates.

Lemma _events_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _events (update__party_addr_to_ind _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__party_addr_to_ind : updates.

Lemma _events_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _events (update__leader_addr_to_ind _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__leader_addr_to_ind : updates.

Lemma _events_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _events (update__party _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__party : updates.

Lemma _events_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _events (update__counterparty _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__counterparty : updates.

Lemma _events_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _events (update__hashkeyinit _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__hashkeyinit : updates.

Lemma _events_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _events (update__innerpathinit _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__innerpathinit : updates.

Lemma _events_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _events (update__allpaths _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__allpaths : updates.

Lemma _events_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _events (update__res_is_leader _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__res_is_leader : updates.

Lemma _events_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _events (update__res_is_party _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__res_is_party : updates.

Lemma _events_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _events (update__res_is_edge _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__res_is_edge : updates.

Lemma _events_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _events (update__res_has_signed _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__res_has_signed : updates.

Lemma _events_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _events (update__res_can_sign _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__res_can_sign : updates.

Lemma _events_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _events (update__res_path_len _x glabs_a) = _events glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _events_of_update__res_path_len : updates.


Lemma _leaders_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__assetAmount _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__assetAmount : updates.

Lemma _leaders_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__timelocks _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__timelocks : updates.

Lemma _leaders_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__hashlocks _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__hashlocks : updates.

Lemma _leaders_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__party _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__party : updates.

Lemma _leaders_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__counterparty _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__counterparty : updates.

Lemma _leaders_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__start _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__start : updates.

Lemma _leaders_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__delta _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__delta : updates.

Lemma _leaders_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__unlocked _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__unlocked : updates.

Lemma _leaders_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__ended _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__ended : updates.

Lemma _leaders_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__canrefund _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__canrefund : updates.

Lemma _leaders_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__events _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__events : updates.

Lemma _leaders_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__leaders _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__leaders : updates.

Lemma _leaders_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__parties _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__parties : updates.

Lemma _leaders_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__edges _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__edges : updates.

Lemma _leaders_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__edges_reverse _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__edges_reverse : updates.

Lemma _leaders_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__party_addr_to_ind _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__party_addr_to_ind : updates.

Lemma _leaders_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__leader_addr_to_ind _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__leader_addr_to_ind : updates.

Lemma _leaders_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__party _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__party : updates.

Lemma _leaders_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__counterparty _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__counterparty : updates.

Lemma _leaders_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__hashkeyinit _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__hashkeyinit : updates.

Lemma _leaders_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__innerpathinit _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__innerpathinit : updates.

Lemma _leaders_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__allpaths _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__allpaths : updates.

Lemma _leaders_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__res_is_leader _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__res_is_leader : updates.

Lemma _leaders_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__res_is_party _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__res_is_party : updates.

Lemma _leaders_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__res_is_edge _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__res_is_edge : updates.

Lemma _leaders_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__res_has_signed _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__res_has_signed : updates.

Lemma _leaders_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__res_can_sign _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__res_can_sign : updates.

Lemma _leaders_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _leaders (update__res_path_len _x glabs_a) = _leaders glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leaders_of_update__res_path_len : updates.


Lemma _parties_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__assetAmount _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__assetAmount : updates.

Lemma _parties_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__timelocks _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__timelocks : updates.

Lemma _parties_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__hashlocks _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__hashlocks : updates.

Lemma _parties_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__party _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__party : updates.

Lemma _parties_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__counterparty _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__counterparty : updates.

Lemma _parties_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__start _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__start : updates.

Lemma _parties_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__delta _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__delta : updates.

Lemma _parties_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__unlocked _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__unlocked : updates.

Lemma _parties_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__ended _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__ended : updates.

Lemma _parties_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__canrefund _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__canrefund : updates.

Lemma _parties_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__events _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__events : updates.

Lemma _parties_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__leaders _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__leaders : updates.

Lemma _parties_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__parties _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__parties : updates.

Lemma _parties_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__edges _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__edges : updates.

Lemma _parties_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__edges_reverse _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__edges_reverse : updates.

Lemma _parties_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__party_addr_to_ind _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__party_addr_to_ind : updates.

Lemma _parties_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__leader_addr_to_ind _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__leader_addr_to_ind : updates.

Lemma _parties_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__party _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__party : updates.

Lemma _parties_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__counterparty _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__counterparty : updates.

Lemma _parties_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__hashkeyinit _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__hashkeyinit : updates.

Lemma _parties_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__innerpathinit _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__innerpathinit : updates.

Lemma _parties_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__allpaths _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__allpaths : updates.

Lemma _parties_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__res_is_leader _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__res_is_leader : updates.

Lemma _parties_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__res_is_party _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__res_is_party : updates.

Lemma _parties_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__res_is_edge _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__res_is_edge : updates.

Lemma _parties_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__res_has_signed _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__res_has_signed : updates.

Lemma _parties_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__res_can_sign _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__res_can_sign : updates.

Lemma _parties_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _parties (update__res_path_len _x glabs_a) = _parties glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _parties_of_update__res_path_len : updates.


Lemma _edges_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__assetAmount _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__assetAmount : updates.

Lemma _edges_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__timelocks _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__timelocks : updates.

Lemma _edges_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__hashlocks _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__hashlocks : updates.

Lemma _edges_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__party _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__party : updates.

Lemma _edges_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__counterparty _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__counterparty : updates.

Lemma _edges_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__start _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__start : updates.

Lemma _edges_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__delta _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__delta : updates.

Lemma _edges_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__unlocked _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__unlocked : updates.

Lemma _edges_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__ended _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__ended : updates.

Lemma _edges_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__canrefund _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__canrefund : updates.

Lemma _edges_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__events _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__events : updates.

Lemma _edges_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__leaders _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__leaders : updates.

Lemma _edges_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__parties _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__parties : updates.

Lemma _edges_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__edges _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__edges : updates.

Lemma _edges_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__edges_reverse _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__edges_reverse : updates.

Lemma _edges_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__party_addr_to_ind _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__party_addr_to_ind : updates.

Lemma _edges_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__leader_addr_to_ind _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__leader_addr_to_ind : updates.

Lemma _edges_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__party _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__party : updates.

Lemma _edges_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__counterparty _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__counterparty : updates.

Lemma _edges_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__hashkeyinit _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__hashkeyinit : updates.

Lemma _edges_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__innerpathinit _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__innerpathinit : updates.

Lemma _edges_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__allpaths _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__allpaths : updates.

Lemma _edges_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__res_is_leader _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__res_is_leader : updates.

Lemma _edges_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__res_is_party _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__res_is_party : updates.

Lemma _edges_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__res_is_edge _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__res_is_edge : updates.

Lemma _edges_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__res_has_signed _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__res_has_signed : updates.

Lemma _edges_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__res_can_sign _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__res_can_sign : updates.

Lemma _edges_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _edges (update__res_path_len _x glabs_a) = _edges glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_of_update__res_path_len : updates.


Lemma _edges_reverse_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__assetAmount _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__assetAmount : updates.

Lemma _edges_reverse_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__timelocks _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__timelocks : updates.

Lemma _edges_reverse_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__hashlocks _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__hashlocks : updates.

Lemma _edges_reverse_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__party _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__party : updates.

Lemma _edges_reverse_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__counterparty _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__counterparty : updates.

Lemma _edges_reverse_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__start _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__start : updates.

Lemma _edges_reverse_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__delta _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__delta : updates.

Lemma _edges_reverse_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__unlocked _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__unlocked : updates.

Lemma _edges_reverse_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__ended _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__ended : updates.

Lemma _edges_reverse_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__canrefund _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__canrefund : updates.

Lemma _edges_reverse_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__events _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__events : updates.

Lemma _edges_reverse_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__leaders _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__leaders : updates.

Lemma _edges_reverse_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__parties _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__parties : updates.

Lemma _edges_reverse_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__edges _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__edges : updates.

Lemma _edges_reverse_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__edges_reverse _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__edges_reverse : updates.

Lemma _edges_reverse_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__party_addr_to_ind _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__party_addr_to_ind : updates.

Lemma _edges_reverse_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__leader_addr_to_ind _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__leader_addr_to_ind : updates.

Lemma _edges_reverse_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__party _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__party : updates.

Lemma _edges_reverse_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__counterparty _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__counterparty : updates.

Lemma _edges_reverse_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__hashkeyinit _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__hashkeyinit : updates.

Lemma _edges_reverse_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__innerpathinit _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__innerpathinit : updates.

Lemma _edges_reverse_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__allpaths _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__allpaths : updates.

Lemma _edges_reverse_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__res_is_leader _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__res_is_leader : updates.

Lemma _edges_reverse_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__res_is_party _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__res_is_party : updates.

Lemma _edges_reverse_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__res_is_edge _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__res_is_edge : updates.

Lemma _edges_reverse_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__res_has_signed _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__res_has_signed : updates.

Lemma _edges_reverse_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__res_can_sign _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__res_can_sign : updates.

Lemma _edges_reverse_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _edges_reverse (update__res_path_len _x glabs_a) = _edges_reverse glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _edges_reverse_of_update__res_path_len : updates.


Lemma _party_addr_to_ind_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__assetAmount _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__assetAmount : updates.

Lemma _party_addr_to_ind_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__timelocks _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__timelocks : updates.

Lemma _party_addr_to_ind_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__hashlocks _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__hashlocks : updates.

Lemma _party_addr_to_ind_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__party _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__party : updates.

Lemma _party_addr_to_ind_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__counterparty _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__counterparty : updates.

Lemma _party_addr_to_ind_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__start _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__start : updates.

Lemma _party_addr_to_ind_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__delta _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__delta : updates.

Lemma _party_addr_to_ind_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__unlocked _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__unlocked : updates.

Lemma _party_addr_to_ind_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__ended _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__ended : updates.

Lemma _party_addr_to_ind_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__canrefund _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__canrefund : updates.

Lemma _party_addr_to_ind_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__events _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__events : updates.

Lemma _party_addr_to_ind_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__leaders _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__leaders : updates.

Lemma _party_addr_to_ind_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__parties _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__parties : updates.

Lemma _party_addr_to_ind_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__edges _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__edges : updates.

Lemma _party_addr_to_ind_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__edges_reverse _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__edges_reverse : updates.

Lemma _party_addr_to_ind_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__party_addr_to_ind _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__party_addr_to_ind : updates.

Lemma _party_addr_to_ind_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__leader_addr_to_ind _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__leader_addr_to_ind : updates.

Lemma _party_addr_to_ind_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__party _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__party : updates.

Lemma _party_addr_to_ind_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__counterparty _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__counterparty : updates.

Lemma _party_addr_to_ind_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__hashkeyinit _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__hashkeyinit : updates.

Lemma _party_addr_to_ind_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__innerpathinit _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__innerpathinit : updates.

Lemma _party_addr_to_ind_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__allpaths _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__allpaths : updates.

Lemma _party_addr_to_ind_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__res_is_leader _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__res_is_leader : updates.

Lemma _party_addr_to_ind_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__res_is_party _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__res_is_party : updates.

Lemma _party_addr_to_ind_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__res_is_edge _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__res_is_edge : updates.

Lemma _party_addr_to_ind_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__res_has_signed _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__res_has_signed : updates.

Lemma _party_addr_to_ind_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__res_can_sign _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__res_can_sign : updates.

Lemma _party_addr_to_ind_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _party_addr_to_ind (update__res_path_len _x glabs_a) = _party_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_addr_to_ind_of_update__res_path_len : updates.


Lemma _leader_addr_to_ind_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__assetAmount _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__assetAmount : updates.

Lemma _leader_addr_to_ind_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__timelocks _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__timelocks : updates.

Lemma _leader_addr_to_ind_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__hashlocks _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__hashlocks : updates.

Lemma _leader_addr_to_ind_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__party _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__party : updates.

Lemma _leader_addr_to_ind_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__counterparty _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__counterparty : updates.

Lemma _leader_addr_to_ind_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__start _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__start : updates.

Lemma _leader_addr_to_ind_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__delta _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__delta : updates.

Lemma _leader_addr_to_ind_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__unlocked _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__unlocked : updates.

Lemma _leader_addr_to_ind_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__ended _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__ended : updates.

Lemma _leader_addr_to_ind_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__canrefund _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__canrefund : updates.

Lemma _leader_addr_to_ind_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__events _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__events : updates.

Lemma _leader_addr_to_ind_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__leaders _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__leaders : updates.

Lemma _leader_addr_to_ind_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__parties _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__parties : updates.

Lemma _leader_addr_to_ind_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__edges _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__edges : updates.

Lemma _leader_addr_to_ind_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__edges_reverse _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__edges_reverse : updates.

Lemma _leader_addr_to_ind_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__party_addr_to_ind _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__party_addr_to_ind : updates.

Lemma _leader_addr_to_ind_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__leader_addr_to_ind _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__leader_addr_to_ind : updates.

Lemma _leader_addr_to_ind_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__party _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__party : updates.

Lemma _leader_addr_to_ind_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__counterparty _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__counterparty : updates.

Lemma _leader_addr_to_ind_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__hashkeyinit _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__hashkeyinit : updates.

Lemma _leader_addr_to_ind_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__innerpathinit _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__innerpathinit : updates.

Lemma _leader_addr_to_ind_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__allpaths _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__allpaths : updates.

Lemma _leader_addr_to_ind_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__res_is_leader _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__res_is_leader : updates.

Lemma _leader_addr_to_ind_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__res_is_party _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__res_is_party : updates.

Lemma _leader_addr_to_ind_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__res_is_edge _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__res_is_edge : updates.

Lemma _leader_addr_to_ind_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__res_has_signed _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__res_has_signed : updates.

Lemma _leader_addr_to_ind_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__res_can_sign _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__res_can_sign : updates.

Lemma _leader_addr_to_ind_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _leader_addr_to_ind (update__res_path_len _x glabs_a) = _leader_addr_to_ind glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _leader_addr_to_ind_of_update__res_path_len : updates.


Lemma _party_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _party (update__assetAmount _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__assetAmount : updates.

Lemma _party_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _party (update__timelocks _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__timelocks : updates.

Lemma _party_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _party (update__hashlocks _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__hashlocks : updates.

Lemma _party_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _party (update__party _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__party : updates.

Lemma _party_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _party (update__counterparty _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__counterparty : updates.

Lemma _party_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _party (update__start _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__start : updates.

Lemma _party_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _party (update__delta _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__delta : updates.

Lemma _party_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _party (update__unlocked _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__unlocked : updates.

Lemma _party_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _party (update__ended _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__ended : updates.

Lemma _party_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _party (update__canrefund _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__canrefund : updates.

Lemma _party_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _party (update__events _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__events : updates.

Lemma _party_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _party (update__leaders _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__leaders : updates.

Lemma _party_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _party (update__parties _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__parties : updates.

Lemma _party_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _party (update__edges _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__edges : updates.

Lemma _party_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _party (update__edges_reverse _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__edges_reverse : updates.

Lemma _party_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _party (update__party_addr_to_ind _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__party_addr_to_ind : updates.

Lemma _party_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _party (update__leader_addr_to_ind _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__leader_addr_to_ind : updates.

Lemma _party_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _party (update__party _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__party : updates.

Lemma _party_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _party (update__counterparty _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__counterparty : updates.

Lemma _party_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _party (update__hashkeyinit _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__hashkeyinit : updates.

Lemma _party_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _party (update__innerpathinit _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__innerpathinit : updates.

Lemma _party_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _party (update__allpaths _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__allpaths : updates.

Lemma _party_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_is_leader _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_is_leader : updates.

Lemma _party_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_is_party _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_is_party : updates.

Lemma _party_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_is_edge _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_is_edge : updates.

Lemma _party_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_has_signed _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_has_signed : updates.

Lemma _party_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_can_sign _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_can_sign : updates.

Lemma _party_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _party (update__res_path_len _x glabs_a) = _party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _party_of_update__res_path_len : updates.


Lemma _counterparty_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__assetAmount _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__assetAmount : updates.

Lemma _counterparty_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__timelocks _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__timelocks : updates.

Lemma _counterparty_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__hashlocks _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__hashlocks : updates.

Lemma _counterparty_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__party _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__party : updates.

Lemma _counterparty_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__counterparty _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__counterparty : updates.

Lemma _counterparty_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__start _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__start : updates.

Lemma _counterparty_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__delta _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__delta : updates.

Lemma _counterparty_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__unlocked _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__unlocked : updates.

Lemma _counterparty_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__ended _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__ended : updates.

Lemma _counterparty_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__canrefund _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__canrefund : updates.

Lemma _counterparty_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__events _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__events : updates.

Lemma _counterparty_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__leaders _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__leaders : updates.

Lemma _counterparty_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__parties _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__parties : updates.

Lemma _counterparty_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__edges _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__edges : updates.

Lemma _counterparty_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__edges_reverse _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__edges_reverse : updates.

Lemma _counterparty_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__party_addr_to_ind _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__party_addr_to_ind : updates.

Lemma _counterparty_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__leader_addr_to_ind _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__leader_addr_to_ind : updates.

Lemma _counterparty_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__party _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__party : updates.

Lemma _counterparty_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__counterparty _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__counterparty : updates.

Lemma _counterparty_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__hashkeyinit _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__hashkeyinit : updates.

Lemma _counterparty_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__innerpathinit _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__innerpathinit : updates.

Lemma _counterparty_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__allpaths _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__allpaths : updates.

Lemma _counterparty_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_is_leader _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_is_leader : updates.

Lemma _counterparty_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_is_party _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_is_party : updates.

Lemma _counterparty_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_is_edge _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_is_edge : updates.

Lemma _counterparty_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_has_signed _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_has_signed : updates.

Lemma _counterparty_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_can_sign _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_can_sign : updates.

Lemma _counterparty_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _counterparty (update__res_path_len _x glabs_a) = _counterparty glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _counterparty_of_update__res_path_len : updates.


Lemma _hashkeyinit_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__assetAmount _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__assetAmount : updates.

Lemma _hashkeyinit_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__timelocks _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__timelocks : updates.

Lemma _hashkeyinit_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__hashlocks _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__hashlocks : updates.

Lemma _hashkeyinit_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__party _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__party : updates.

Lemma _hashkeyinit_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__counterparty _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__counterparty : updates.

Lemma _hashkeyinit_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__start _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__start : updates.

Lemma _hashkeyinit_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__delta _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__delta : updates.

Lemma _hashkeyinit_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__unlocked _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__unlocked : updates.

Lemma _hashkeyinit_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__ended _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__ended : updates.

Lemma _hashkeyinit_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__canrefund _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__canrefund : updates.

Lemma _hashkeyinit_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__events _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__events : updates.

Lemma _hashkeyinit_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__leaders _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__leaders : updates.

Lemma _hashkeyinit_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__parties _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__parties : updates.

Lemma _hashkeyinit_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__edges _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__edges : updates.

Lemma _hashkeyinit_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__edges_reverse _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__edges_reverse : updates.

Lemma _hashkeyinit_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__party_addr_to_ind _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__party_addr_to_ind : updates.

Lemma _hashkeyinit_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__leader_addr_to_ind _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__leader_addr_to_ind : updates.

Lemma _hashkeyinit_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__party _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__party : updates.

Lemma _hashkeyinit_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__counterparty _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__counterparty : updates.

Lemma _hashkeyinit_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__hashkeyinit _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__hashkeyinit : updates.

Lemma _hashkeyinit_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__innerpathinit _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__innerpathinit : updates.

Lemma _hashkeyinit_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__allpaths _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__allpaths : updates.

Lemma _hashkeyinit_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__res_is_leader _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__res_is_leader : updates.

Lemma _hashkeyinit_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__res_is_party _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__res_is_party : updates.

Lemma _hashkeyinit_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__res_is_edge _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__res_is_edge : updates.

Lemma _hashkeyinit_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__res_has_signed _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__res_has_signed : updates.

Lemma _hashkeyinit_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__res_can_sign _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__res_can_sign : updates.

Lemma _hashkeyinit_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _hashkeyinit (update__res_path_len _x glabs_a) = _hashkeyinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _hashkeyinit_of_update__res_path_len : updates.


Lemma _innerpathinit_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__assetAmount _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__assetAmount : updates.

Lemma _innerpathinit_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__timelocks _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__timelocks : updates.

Lemma _innerpathinit_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__hashlocks _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__hashlocks : updates.

Lemma _innerpathinit_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__party _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__party : updates.

Lemma _innerpathinit_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__counterparty _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__counterparty : updates.

Lemma _innerpathinit_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__start _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__start : updates.

Lemma _innerpathinit_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__delta _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__delta : updates.

Lemma _innerpathinit_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__unlocked _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__unlocked : updates.

Lemma _innerpathinit_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__ended _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__ended : updates.

Lemma _innerpathinit_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__canrefund _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__canrefund : updates.

Lemma _innerpathinit_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__events _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__events : updates.

Lemma _innerpathinit_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__leaders _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__leaders : updates.

Lemma _innerpathinit_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__parties _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__parties : updates.

Lemma _innerpathinit_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__edges _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__edges : updates.

Lemma _innerpathinit_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__edges_reverse _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__edges_reverse : updates.

Lemma _innerpathinit_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__party_addr_to_ind _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__party_addr_to_ind : updates.

Lemma _innerpathinit_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__leader_addr_to_ind _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__leader_addr_to_ind : updates.

Lemma _innerpathinit_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__party _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__party : updates.

Lemma _innerpathinit_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__counterparty _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__counterparty : updates.

Lemma _innerpathinit_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__hashkeyinit _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__hashkeyinit : updates.

Lemma _innerpathinit_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__innerpathinit _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__innerpathinit : updates.

Lemma _innerpathinit_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__allpaths _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__allpaths : updates.

Lemma _innerpathinit_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__res_is_leader _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__res_is_leader : updates.

Lemma _innerpathinit_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__res_is_party _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__res_is_party : updates.

Lemma _innerpathinit_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__res_is_edge _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__res_is_edge : updates.

Lemma _innerpathinit_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__res_has_signed _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__res_has_signed : updates.

Lemma _innerpathinit_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__res_can_sign _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__res_can_sign : updates.

Lemma _innerpathinit_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _innerpathinit (update__res_path_len _x glabs_a) = _innerpathinit glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _innerpathinit_of_update__res_path_len : updates.


Lemma _allpaths_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__assetAmount _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__assetAmount : updates.

Lemma _allpaths_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__timelocks _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__timelocks : updates.

Lemma _allpaths_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__hashlocks _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__hashlocks : updates.

Lemma _allpaths_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__party _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__party : updates.

Lemma _allpaths_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__counterparty _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__counterparty : updates.

Lemma _allpaths_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__start _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__start : updates.

Lemma _allpaths_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__delta _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__delta : updates.

Lemma _allpaths_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__unlocked _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__unlocked : updates.

Lemma _allpaths_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__ended _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__ended : updates.

Lemma _allpaths_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__canrefund _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__canrefund : updates.

Lemma _allpaths_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__events _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__events : updates.

Lemma _allpaths_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__leaders _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__leaders : updates.

Lemma _allpaths_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__parties _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__parties : updates.

Lemma _allpaths_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__edges _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__edges : updates.

Lemma _allpaths_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__edges_reverse _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__edges_reverse : updates.

Lemma _allpaths_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__party_addr_to_ind _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__party_addr_to_ind : updates.

Lemma _allpaths_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__leader_addr_to_ind _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__leader_addr_to_ind : updates.

Lemma _allpaths_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__party _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__party : updates.

Lemma _allpaths_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__counterparty _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__counterparty : updates.

Lemma _allpaths_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__hashkeyinit _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__hashkeyinit : updates.

Lemma _allpaths_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__innerpathinit _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__innerpathinit : updates.

Lemma _allpaths_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__allpaths _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__allpaths : updates.

Lemma _allpaths_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__res_is_leader _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__res_is_leader : updates.

Lemma _allpaths_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__res_is_party _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__res_is_party : updates.

Lemma _allpaths_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__res_is_edge _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__res_is_edge : updates.

Lemma _allpaths_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__res_has_signed _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__res_has_signed : updates.

Lemma _allpaths_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__res_can_sign _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__res_can_sign : updates.

Lemma _allpaths_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _allpaths (update__res_path_len _x glabs_a) = _allpaths glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _allpaths_of_update__res_path_len : updates.


Lemma _res_is_leader_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__assetAmount _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__assetAmount : updates.

Lemma _res_is_leader_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__timelocks _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__timelocks : updates.

Lemma _res_is_leader_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__hashlocks _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__hashlocks : updates.

Lemma _res_is_leader_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__party _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__party : updates.

Lemma _res_is_leader_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__counterparty _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__counterparty : updates.

Lemma _res_is_leader_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__start _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__start : updates.

Lemma _res_is_leader_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__delta _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__delta : updates.

Lemma _res_is_leader_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__unlocked _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__unlocked : updates.

Lemma _res_is_leader_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__ended _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__ended : updates.

Lemma _res_is_leader_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__canrefund _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__canrefund : updates.

Lemma _res_is_leader_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__events _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__events : updates.

Lemma _res_is_leader_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__leaders _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__leaders : updates.

Lemma _res_is_leader_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__parties _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__parties : updates.

Lemma _res_is_leader_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__edges _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__edges : updates.

Lemma _res_is_leader_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__edges_reverse _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__edges_reverse : updates.

Lemma _res_is_leader_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__party_addr_to_ind _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__party_addr_to_ind : updates.

Lemma _res_is_leader_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__leader_addr_to_ind _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__leader_addr_to_ind : updates.

Lemma _res_is_leader_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__party _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__party : updates.

Lemma _res_is_leader_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__counterparty _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__counterparty : updates.

Lemma _res_is_leader_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__hashkeyinit _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__hashkeyinit : updates.

Lemma _res_is_leader_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__innerpathinit _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__innerpathinit : updates.

Lemma _res_is_leader_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__allpaths _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__allpaths : updates.

Lemma _res_is_leader_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__res_is_leader _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__res_is_leader : updates.

Lemma _res_is_leader_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__res_is_party _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__res_is_party : updates.

Lemma _res_is_leader_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__res_is_edge _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__res_is_edge : updates.

Lemma _res_is_leader_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__res_has_signed _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__res_has_signed : updates.

Lemma _res_is_leader_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__res_can_sign _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__res_can_sign : updates.

Lemma _res_is_leader_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _res_is_leader (update__res_path_len _x glabs_a) = _res_is_leader glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_leader_of_update__res_path_len : updates.


Lemma _res_is_party_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__assetAmount _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__assetAmount : updates.

Lemma _res_is_party_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__timelocks _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__timelocks : updates.

Lemma _res_is_party_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__hashlocks _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__hashlocks : updates.

Lemma _res_is_party_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__party _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__party : updates.

Lemma _res_is_party_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__counterparty _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__counterparty : updates.

Lemma _res_is_party_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__start _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__start : updates.

Lemma _res_is_party_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__delta _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__delta : updates.

Lemma _res_is_party_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__unlocked _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__unlocked : updates.

Lemma _res_is_party_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__ended _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__ended : updates.

Lemma _res_is_party_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__canrefund _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__canrefund : updates.

Lemma _res_is_party_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__events _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__events : updates.

Lemma _res_is_party_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__leaders _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__leaders : updates.

Lemma _res_is_party_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__parties _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__parties : updates.

Lemma _res_is_party_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__edges _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__edges : updates.

Lemma _res_is_party_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__edges_reverse _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__edges_reverse : updates.

Lemma _res_is_party_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__party_addr_to_ind _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__party_addr_to_ind : updates.

Lemma _res_is_party_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__leader_addr_to_ind _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__leader_addr_to_ind : updates.

Lemma _res_is_party_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__party _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__party : updates.

Lemma _res_is_party_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__counterparty _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__counterparty : updates.

Lemma _res_is_party_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__hashkeyinit _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__hashkeyinit : updates.

Lemma _res_is_party_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__innerpathinit _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__innerpathinit : updates.

Lemma _res_is_party_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__allpaths _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__allpaths : updates.

Lemma _res_is_party_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__res_is_leader _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__res_is_leader : updates.

Lemma _res_is_party_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__res_is_party _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__res_is_party : updates.

Lemma _res_is_party_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__res_is_edge _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__res_is_edge : updates.

Lemma _res_is_party_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__res_has_signed _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__res_has_signed : updates.

Lemma _res_is_party_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__res_can_sign _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__res_can_sign : updates.

Lemma _res_is_party_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _res_is_party (update__res_path_len _x glabs_a) = _res_is_party glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_party_of_update__res_path_len : updates.


Lemma _res_is_edge_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__assetAmount _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__assetAmount : updates.

Lemma _res_is_edge_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__timelocks _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__timelocks : updates.

Lemma _res_is_edge_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__hashlocks _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__hashlocks : updates.

Lemma _res_is_edge_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__party _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__party : updates.

Lemma _res_is_edge_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__counterparty _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__counterparty : updates.

Lemma _res_is_edge_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__start _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__start : updates.

Lemma _res_is_edge_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__delta _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__delta : updates.

Lemma _res_is_edge_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__unlocked _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__unlocked : updates.

Lemma _res_is_edge_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__ended _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__ended : updates.

Lemma _res_is_edge_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__canrefund _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__canrefund : updates.

Lemma _res_is_edge_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__events _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__events : updates.

Lemma _res_is_edge_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__leaders _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__leaders : updates.

Lemma _res_is_edge_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__parties _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__parties : updates.

Lemma _res_is_edge_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__edges _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__edges : updates.

Lemma _res_is_edge_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__edges_reverse _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__edges_reverse : updates.

Lemma _res_is_edge_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__party_addr_to_ind _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__party_addr_to_ind : updates.

Lemma _res_is_edge_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__leader_addr_to_ind _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__leader_addr_to_ind : updates.

Lemma _res_is_edge_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__party _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__party : updates.

Lemma _res_is_edge_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__counterparty _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__counterparty : updates.

Lemma _res_is_edge_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__hashkeyinit _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__hashkeyinit : updates.

Lemma _res_is_edge_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__innerpathinit _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__innerpathinit : updates.

Lemma _res_is_edge_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__allpaths _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__allpaths : updates.

Lemma _res_is_edge_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__res_is_leader _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__res_is_leader : updates.

Lemma _res_is_edge_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__res_is_party _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__res_is_party : updates.

Lemma _res_is_edge_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__res_is_edge _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__res_is_edge : updates.

Lemma _res_is_edge_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__res_has_signed _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__res_has_signed : updates.

Lemma _res_is_edge_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__res_can_sign _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__res_can_sign : updates.

Lemma _res_is_edge_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _res_is_edge (update__res_path_len _x glabs_a) = _res_is_edge glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_is_edge_of_update__res_path_len : updates.


Lemma _res_has_signed_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__assetAmount _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__assetAmount : updates.

Lemma _res_has_signed_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__timelocks _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__timelocks : updates.

Lemma _res_has_signed_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__hashlocks _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__hashlocks : updates.

Lemma _res_has_signed_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__party _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__party : updates.

Lemma _res_has_signed_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__counterparty _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__counterparty : updates.

Lemma _res_has_signed_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__start _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__start : updates.

Lemma _res_has_signed_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__delta _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__delta : updates.

Lemma _res_has_signed_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__unlocked _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__unlocked : updates.

Lemma _res_has_signed_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__ended _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__ended : updates.

Lemma _res_has_signed_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__canrefund _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__canrefund : updates.

Lemma _res_has_signed_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__events _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__events : updates.

Lemma _res_has_signed_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__leaders _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__leaders : updates.

Lemma _res_has_signed_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__parties _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__parties : updates.

Lemma _res_has_signed_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__edges _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__edges : updates.

Lemma _res_has_signed_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__edges_reverse _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__edges_reverse : updates.

Lemma _res_has_signed_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__party_addr_to_ind _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__party_addr_to_ind : updates.

Lemma _res_has_signed_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__leader_addr_to_ind _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__leader_addr_to_ind : updates.

Lemma _res_has_signed_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__party _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__party : updates.

Lemma _res_has_signed_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__counterparty _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__counterparty : updates.

Lemma _res_has_signed_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__hashkeyinit _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__hashkeyinit : updates.

Lemma _res_has_signed_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__innerpathinit _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__innerpathinit : updates.

Lemma _res_has_signed_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__allpaths _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__allpaths : updates.

Lemma _res_has_signed_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__res_is_leader _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__res_is_leader : updates.

Lemma _res_has_signed_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__res_is_party _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__res_is_party : updates.

Lemma _res_has_signed_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__res_is_edge _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__res_is_edge : updates.

Lemma _res_has_signed_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__res_has_signed _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__res_has_signed : updates.

Lemma _res_has_signed_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__res_can_sign _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__res_can_sign : updates.

Lemma _res_has_signed_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _res_has_signed (update__res_path_len _x glabs_a) = _res_has_signed glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_has_signed_of_update__res_path_len : updates.


Lemma _res_can_sign_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__assetAmount _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__assetAmount : updates.

Lemma _res_can_sign_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__timelocks _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__timelocks : updates.

Lemma _res_can_sign_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__hashlocks _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__hashlocks : updates.

Lemma _res_can_sign_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__party _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__party : updates.

Lemma _res_can_sign_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__counterparty _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__counterparty : updates.

Lemma _res_can_sign_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__start _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__start : updates.

Lemma _res_can_sign_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__delta _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__delta : updates.

Lemma _res_can_sign_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__unlocked _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__unlocked : updates.

Lemma _res_can_sign_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__ended _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__ended : updates.

Lemma _res_can_sign_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__canrefund _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__canrefund : updates.

Lemma _res_can_sign_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__events _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__events : updates.

Lemma _res_can_sign_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__leaders _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__leaders : updates.

Lemma _res_can_sign_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__parties _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__parties : updates.

Lemma _res_can_sign_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__edges _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__edges : updates.

Lemma _res_can_sign_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__edges_reverse _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__edges_reverse : updates.

Lemma _res_can_sign_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__party_addr_to_ind _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__party_addr_to_ind : updates.

Lemma _res_can_sign_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__leader_addr_to_ind _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__leader_addr_to_ind : updates.

Lemma _res_can_sign_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__party _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__party : updates.

Lemma _res_can_sign_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__counterparty _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__counterparty : updates.

Lemma _res_can_sign_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__hashkeyinit _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__hashkeyinit : updates.

Lemma _res_can_sign_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__innerpathinit _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__innerpathinit : updates.

Lemma _res_can_sign_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__allpaths _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__allpaths : updates.

Lemma _res_can_sign_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__res_is_leader _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__res_is_leader : updates.

Lemma _res_can_sign_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__res_is_party _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__res_is_party : updates.

Lemma _res_can_sign_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__res_is_edge _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__res_is_edge : updates.

Lemma _res_can_sign_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__res_has_signed _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__res_has_signed : updates.

Lemma _res_can_sign_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__res_can_sign _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__res_can_sign : updates.

Lemma _res_can_sign_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _res_can_sign (update__res_path_len _x glabs_a) = _res_can_sign glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_can_sign_of_update__res_path_len : updates.


Lemma _res_path_len_of_update__assetAmount : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__assetAmount _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__assetAmount : updates.

Lemma _res_path_len_of_update__timelocks : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__timelocks _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__timelocks : updates.

Lemma _res_path_len_of_update__hashlocks : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__hashlocks _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__hashlocks : updates.

Lemma _res_path_len_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__party _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__party : updates.

Lemma _res_path_len_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__counterparty _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__counterparty : updates.

Lemma _res_path_len_of_update__start : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__start _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__start : updates.

Lemma _res_path_len_of_update__delta : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__delta _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__delta : updates.

Lemma _res_path_len_of_update__unlocked : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__unlocked _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__unlocked : updates.

Lemma _res_path_len_of_update__ended : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__ended _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__ended : updates.

Lemma _res_path_len_of_update__canrefund : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__canrefund _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__canrefund : updates.

Lemma _res_path_len_of_update__events : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__events _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__events : updates.

Lemma _res_path_len_of_update__leaders : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__leaders _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__leaders : updates.

Lemma _res_path_len_of_update__parties : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__parties _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__parties : updates.

Lemma _res_path_len_of_update__edges : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__edges _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__edges : updates.

Lemma _res_path_len_of_update__edges_reverse : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__edges_reverse _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__edges_reverse : updates.

Lemma _res_path_len_of_update__party_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__party_addr_to_ind _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__party_addr_to_ind : updates.

Lemma _res_path_len_of_update__leader_addr_to_ind : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__leader_addr_to_ind _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__leader_addr_to_ind : updates.

Lemma _res_path_len_of_update__party : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__party _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__party : updates.

Lemma _res_path_len_of_update__counterparty : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__counterparty _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__counterparty : updates.

Lemma _res_path_len_of_update__hashkeyinit : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__hashkeyinit _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__hashkeyinit : updates.

Lemma _res_path_len_of_update__innerpathinit : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__innerpathinit _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__innerpathinit : updates.

Lemma _res_path_len_of_update__allpaths : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__allpaths _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__allpaths : updates.

Lemma _res_path_len_of_update__res_is_leader : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__res_is_leader _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__res_is_leader : updates.

Lemma _res_path_len_of_update__res_is_party : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__res_is_party _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__res_is_party : updates.

Lemma _res_path_len_of_update__res_is_edge : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__res_is_edge _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__res_is_edge : updates.

Lemma _res_path_len_of_update__res_has_signed : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__res_has_signed _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__res_has_signed : updates.

Lemma _res_path_len_of_update__res_can_sign : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__res_can_sign _x glabs_a) = _res_path_len glabs_a.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__res_can_sign : updates.

Lemma _res_path_len_of_update__res_path_len : forall _x (glabs_a : global_abstract_data_type),
  _res_path_len (update__res_path_len _x glabs_a) = _x.
Proof. intros. destruct glabs_a. reflexivity. Qed.
Hint Rewrite _res_path_len_of_update__res_path_len : updates.

Opaque _assetAmount update__assetAmount _timelocks update__timelocks _hashlocks update__hashlocks _party update__party _counterparty update__counterparty _start update__start _delta update__delta _unlocked update__unlocked _ended update__ended _canrefund update__canrefund _events update__events _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len.

