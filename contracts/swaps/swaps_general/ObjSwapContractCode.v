(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module swaps_general.ObjSwapContractCode for swaps_general.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import DeepSpec.Linking.
Require Import swaps_general.EdsgerIdents.
Require Import swaps_general.DataTypes.
Require Import swaps_general.DataTypeOps.
Require Import swaps_general.DataTypeProofs.
Require Import liblayers.compcertx.MakeProgram.
Require Import liblayers.compcertx.MemWithData.
Require Import layerlib.LinkSourceTemplate.

Require Import swaps_general.LayerSWAPCONTRACT.
Require Import swaps_general.RefineSWAPCONTRACT.
Require Import swaps_general.ObjSwapContractCodeProofs.

Section EdsgerGen.


Context {mem}`{Hmem: Mem.MemoryModel mem}.
Context`{Hmwd: UseMemWithData mem}.
Context`{make_program_ops: !MakeProgramOps Clight.function Ctypes.type Clight.fundef Ctypes.type}.
Context`{Hmake_program: !MakeProgram Clight.function Ctypes.type Clight.fundef Ctypes.type}.
Instance GlobalLayerSpec : LayerSpecClass := {
  make_program_ops := make_program_ops;
  Hmake_program := Hmake_program;
  GetHighData := global_abstract_data_type
}.
Context`{global_abdata : !GlobalAbData init_global_abstract_data global_low_level_invariant}.
Context`{CTXT_prf : !Layer_SWAPCONTRACT_Context_prf}.
Context`{EVMOPCODE_pres_inv : !EVMOPCODE_preserves_invariants}.
Existing Instances SWAPCONTRACT_overlay_spec SWAPCONTRACT_underlay_spec
                   SWAPCONTRACT_hypermem.

Lemma relate_AbData_translates_kernel_mode j d1 d2 :
    relate_AbData j d1 d2 -> kernel_mode d1 -> kernel_mode d2.
Proof.
  simpl; intros rel d1_kern.
  (* rewrite <- (ikern_re _ _ _ rel), <- (ihost_re _ _ _ rel). *)
  exact d1_kern.
Qed.

Instance EVMOPCODE_evm_transfer_prim_prf :
    primitive_prf EVMOPCODE_evm_transfer_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem EVMOpcode_transfer_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *) discriminate.
Qed.

Instance EVMOPCODE_digraph_initialize_prim_prf :
    primitive_prf EVMOPCODE_digraph_initialize_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_initialize_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *) discriminate.
Qed.

Instance EVMOPCODE_digraph_is_leader_prim_prf :
    primitive_prf EVMOPCODE_digraph_is_leader_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_is_leader_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *) discriminate.
Qed.

Instance EVMOPCODE_digraph_is_party_prim_prf :
    primitive_prf EVMOPCODE_digraph_is_party_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_is_party_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *) discriminate.
Qed.

Instance EVMOPCODE_digraph_is_edge_prim_prf :
    primitive_prf EVMOPCODE_digraph_is_edge_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_is_edge_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *) discriminate.
Qed.

Instance EVMOPCODE_digraph_get_leader_ind_prim_prf :
    primitive_prf EVMOPCODE_digraph_get_leader_ind_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_get_leader_ind_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *)
    simpl. intros.
    repeat match goal with
      | |- context [?X _ d] => unfold X
      | |- ?G => CommonTactic.subdestruct_if G
      | |- _ => reflexivity
      end.
Qed.

Instance EVMOPCODE_digraph_get_party_ind_prim_prf :
    primitive_prf EVMOPCODE_digraph_get_party_ind_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_get_party_ind_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *)
    simpl. intros.
    repeat match goal with
      | |- context [?X _ d] => unfold X
      | |- ?G => CommonTactic.subdestruct_if G
      | |- _ => reflexivity
      end.
Qed.

Instance EVMOPCODE_digraph_valid_path_prim_prf :
    primitive_prf EVMOPCODE_digraph_valid_path_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_valid_path_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *)
    simpl. intros.
    repeat match goal with
      | |- context [?X _ d] => unfold X
      | |- ?G => CommonTactic.subdestruct_if G
      | |- _ => reflexivity
      end.
Qed.

Instance EVMOPCODE_digraph_sign_follower_prim_prf :
    primitive_prf EVMOPCODE_digraph_sign_follower_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_sign_follower_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *) discriminate.
Qed.

Instance EVMOPCODE_digraph_sign_leader_prim_prf :
    primitive_prf EVMOPCODE_digraph_sign_leader_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_sign_leader_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *) discriminate.
Qed.

Instance EVMOPCODE_digraph_can_sign_follower_prim_prf :
    primitive_prf EVMOPCODE_digraph_can_sign_follower_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_can_sign_follower_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *) discriminate.
Qed.

Instance EVMOPCODE_digraph_get_path_len_prim_prf :
    primitive_prf EVMOPCODE_digraph_get_path_len_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_get_path_len_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *) discriminate.
Qed.

Instance EVMOPCODE_digraph_diam_prim_prf :
    primitive_prf EVMOPCODE_digraph_diam_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_diam_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *)
    simpl. intros.
    repeat match goal with
      | |- context [?X _ d] => unfold X
      | |- ?G => CommonTactic.subdestruct_if G
      | |- _ => reflexivity
      end.
Qed.

Instance EVMOPCODE_digraph_maxpathlen_prim_prf :
    primitive_prf EVMOPCODE_digraph_maxpathlen_prim.
Proof. esplit; [|
    | intros _;
      set (sem := gencsem DiGraph_maxpathlen_spec);
      apply mk_prim_exec_prf with sem
    | discriminate |].
  - (* PRIMsem_opt_simulates_sem *) admit.
  - (* PRIMret_cond *) admit.
  - (* PRIMargs_cast *)
    simpl.
    repeat match goal with
      | |- HList _ _ => constructor
      | |- HyperArgRet (tp_type_pair _) => simpl
      | |- HyperArgRet _ => typeclasses eauto
      end.
  - (* PRIMreturns_cast *) simpl; typeclasses eauto || constructor.
  - (* PRIMget_layer_primitive *)
    reflexivity.
  - (* PRIMsextcall_step *)
    admit.
  - (* PRIMprimsem_sig *)
    reflexivity.
  - (* PRIMmake_external *)
    reflexivity.
  - (* PRIMis_pure *)
    simpl. intros.
    repeat match goal with
      | |- context [?X _ d] => unfold X
      | |- ?G => CommonTactic.subdestruct_if G
      | |- _ => reflexivity
      end.
Qed.

Instance SwapContract__assetAmount_var_prf :
    HyperLType SwapContract__assetAmount_var.
Proof. esplit; [ typeclasses eauto | intros _; esplit | discriminate ].
  - (* ltype_writable *)
    intros j d m mm; apply mm.
  - (* ltype_get_match *)
    intros j d m mm dc; split.
    admit. (* ht_ft_cond (ltype_get SwapContract__assetAmount_var d) *)
    apply mm.
  - (* ltype_set_match *)
    intros f j d m fc mm dc m' disjoint_eq match_indirect.
    constructor.
    admit. (* [relate_AbData j (ltype_set ... f d) (snd m')]: premise does not
              bound [snd m'] *)
    constructor.
    split.
    + exact match_indirect.
    + admit. (* [Mem.range_perm (fst m') ...]: premise does not bound the
                permissions of [fst m'] *)
Qed.

Instance SwapContract__timelocks_var_prf :
    HyperLType SwapContract__timelocks_var.
Proof. esplit; [ typeclasses eauto | intros _; esplit | discriminate ].
  - (* ltype_writable *)
    intros j d m mm; apply mm.
  - (* ltype_get_match *)
    intros j d m mm dc; split.
    admit. (* ht_ft_cond (ltype_get SwapContract__timelocks_var d) *)
    apply mm.
  - (* ltype_set_match *)
    intros f j d m fc mm dc m' disjoint_eq match_indirect.
    constructor.
    admit. (* [relate_AbData j (ltype_set ... f d) (snd m')]: premise does not
              bound [snd m'] *)
    constructor.
    split.
    + exact match_indirect.
    + admit. (* [Mem.range_perm (fst m') ...]: premise does not bound the
                permissions of [fst m'] *)
Qed.

Instance SwapContract__hashlocks_var_prf :
    HyperLType SwapContract__hashlocks_var.
Proof. esplit; [ typeclasses eauto | intros _; esplit | discriminate ].
  - (* ltype_writable *)
    intros j d m mm; apply mm.
  - (* ltype_get_match *)
    intros j d m mm dc; split.
    admit. (* ht_ft_cond (ltype_get SwapContract__hashlocks_var d) *)
    apply mm.
  - (* ltype_set_match *)
    intros f j d m fc mm dc m' disjoint_eq match_indirect.
    constructor.
    admit. (* [relate_AbData j (ltype_set ... f d) (snd m')]: premise does not
              bound [snd m'] *)
    constructor.
    split.
    + exact match_indirect.
    + admit. (* [Mem.range_perm (fst m') ...]: premise does not bound the
                permissions of [fst m'] *)
Qed.

Instance SwapContract__party_var_prf :
    HyperLType SwapContract__party_var.
Proof. esplit; [ typeclasses eauto | intros _; esplit | discriminate ].
  - (* ltype_writable *)
    intros j d m mm; apply mm.
  - (* ltype_get_match *)
    intros j d m mm dc; split.
    admit. (* ht_ft_cond (ltype_get SwapContract__party_var d) *)
    apply mm.
  - (* ltype_set_match *)
    intros f j d m fc mm dc m' disjoint_eq match_indirect.
    constructor.
    admit. (* [relate_AbData j (ltype_set ... f d) (snd m')]: premise does not
              bound [snd m'] *)
    constructor.
    split.
    + exact match_indirect.
    + admit. (* [Mem.range_perm (fst m') ...]: premise does not bound the
                permissions of [fst m'] *)
Qed.

Instance SwapContract__counterparty_var_prf :
    HyperLType SwapContract__counterparty_var.
Proof. esplit; [ typeclasses eauto | intros _; esplit | discriminate ].
  - (* ltype_writable *)
    intros j d m mm; apply mm.
  - (* ltype_get_match *)
    intros j d m mm dc; split.
    admit. (* ht_ft_cond (ltype_get SwapContract__counterparty_var d) *)
    apply mm.
  - (* ltype_set_match *)
    intros f j d m fc mm dc m' disjoint_eq match_indirect.
    constructor.
    admit. (* [relate_AbData j (ltype_set ... f d) (snd m')]: premise does not
              bound [snd m'] *)
    constructor.
    split.
    + exact match_indirect.
    + admit. (* [Mem.range_perm (fst m') ...]: premise does not bound the
                permissions of [fst m'] *)
Qed.

Instance SwapContract__start_var_prf :
    HyperLType SwapContract__start_var.
Proof. esplit; [ typeclasses eauto | intros _; esplit | discriminate ].
  - (* ltype_writable *)
    intros j d m mm; apply mm.
  - (* ltype_get_match *)
    intros j d m mm dc; split.
    admit. (* ht_ft_cond (ltype_get SwapContract__start_var d) *)
    apply mm.
  - (* ltype_set_match *)
    intros f j d m fc mm dc m' disjoint_eq match_indirect.
    constructor.
    admit. (* [relate_AbData j (ltype_set ... f d) (snd m')]: premise does not
              bound [snd m'] *)
    constructor.
    split.
    + exact match_indirect.
    + admit. (* [Mem.range_perm (fst m') ...]: premise does not bound the
                permissions of [fst m'] *)
Qed.

Instance SwapContract__delta_var_prf :
    HyperLType SwapContract__delta_var.
Proof. esplit; [ typeclasses eauto | intros _; esplit | discriminate ].
  - (* ltype_writable *)
    intros j d m mm; apply mm.
  - (* ltype_get_match *)
    intros j d m mm dc; split.
    admit. (* ht_ft_cond (ltype_get SwapContract__delta_var d) *)
    apply mm.
  - (* ltype_set_match *)
    intros f j d m fc mm dc m' disjoint_eq match_indirect.
    constructor.
    admit. (* [relate_AbData j (ltype_set ... f d) (snd m')]: premise does not
              bound [snd m'] *)
    constructor.
    split.
    + exact match_indirect.
    + admit. (* [Mem.range_perm (fst m') ...]: premise does not bound the
                permissions of [fst m'] *)
Qed.

Instance SwapContract__unlocked_var_prf :
    HyperLType SwapContract__unlocked_var.
Proof. esplit; [ typeclasses eauto | intros _; esplit | discriminate ].
  - (* ltype_writable *)
    intros j d m mm; apply mm.
  - (* ltype_get_match *)
    intros j d m mm dc; split.
    admit. (* ht_ft_cond (ltype_get SwapContract__unlocked_var d) *)
    apply mm.
  - (* ltype_set_match *)
    intros f j d m fc mm dc m' disjoint_eq match_indirect.
    constructor.
    admit. (* [relate_AbData j (ltype_set ... f d) (snd m')]: premise does not
              bound [snd m'] *)
    constructor.
    split.
    + exact match_indirect.
    + admit. (* [Mem.range_perm (fst m') ...]: premise does not bound the
                permissions of [fst m'] *)
Qed.

Instance SwapContract__ended_var_prf :
    HyperLType SwapContract__ended_var.
Proof. esplit; [ typeclasses eauto | intros _; esplit | discriminate ].
  - (* ltype_writable *)
    intros j d m mm; apply mm.
  - (* ltype_get_match *)
    intros j d m mm dc; split.
    admit. (* ht_ft_cond (ltype_get SwapContract__ended_var d) *)
    apply mm.
  - (* ltype_set_match *)
    intros f j d m fc mm dc m' disjoint_eq match_indirect.
    constructor.
    admit. (* [relate_AbData j (ltype_set ... f d) (snd m')]: premise does not
              bound [snd m'] *)
    constructor.
    split.
    + exact match_indirect.
    + admit. (* [Mem.range_perm (fst m') ...]: premise does not bound the
                permissions of [fst m'] *)
Qed.

Instance SwapContract__canrefund_var_prf :
    HyperLType SwapContract__canrefund_var.
Proof. esplit; [ typeclasses eauto | intros _; esplit | discriminate ].
  - (* ltype_writable *)
    intros j d m mm; apply mm.
  - (* ltype_get_match *)
    intros j d m mm dc; split.
    admit. (* ht_ft_cond (ltype_get SwapContract__canrefund_var d) *)
    apply mm.
  - (* ltype_set_match *)
    intros f j d m fc mm dc m' disjoint_eq match_indirect.
    constructor.
    admit. (* [relate_AbData j (ltype_set ... f d) (snd m')]: premise does not
              bound [snd m'] *)
    constructor.
    split.
    + exact match_indirect.
    + admit. (* [Mem.range_perm (fst m') ...]: premise does not bound the
                permissions of [fst m'] *)
Qed.

(* Do not assume this context until now to avoid above proofs using the wrong one *)
Context`{SWAPCONTRACT_pres_inv : !SWAPCONTRACT_preserves_invariants}.

Lemma SwapContract_initialize_prf : function_constr_prf SwapContract_initialize.
Proof. solve_function_constr_prf @SwapContract_initialize. Qed.

Theorem SwapContract_initialize_code_correct:
  simRR GetHighDataX GetLowDataX (path_inj Hcompatrel)
    (ident_SwapContract_initialize ↦ CompatGenSem.gensem SwapContract_initialize_spec)
    (clight_DeepSpec_layer GetLowLayer ident_SwapContract_initialize SwapContract_initialize_cfun).
Proof.
  assert (cc := cl_sim_sem_code_correct).
  apply cc; clear cc; try reflexivity.
  - rewrite SwapContract_initialize_spec_eq.
    change SwapContract_initialize_cfun
      with (synth_func_func SwapContract_initialize).
    apply synth_correct_4_void.
    + exact SwapContract_initialize_prf.
    + exact SwapContract_initialize_vc.
    + exact SwapContract_initialize_oblg.
(*  - apply semof_prim_kernel_mode_4_void.
    + exact relate_AbData_translates_kernel_mode.
    + exact SwapContract_initialize_spec_requires_kernel_mode. *)
Qed.

Lemma SwapContract_unlock_prf : function_constr_prf SwapContract_unlock.
Proof. solve_function_constr_prf @SwapContract_unlock. Qed.

Theorem SwapContract_unlock_code_correct:
  simRR GetHighDataX GetLowDataX (path_inj Hcompatrel)
    (ident_SwapContract_unlock ↦ CompatGenSem.gensem SwapContract_unlock_spec)
    (clight_DeepSpec_layer GetLowLayer ident_SwapContract_unlock SwapContract_unlock_cfun).
Proof.
  assert (cc := cl_sim_sem_code_correct).
  apply cc; clear cc; try reflexivity.
  - rewrite SwapContract_unlock_spec_eq.
    change SwapContract_unlock_cfun
      with (synth_func_func SwapContract_unlock).
    apply synth_correct_2_void.
    + exact SwapContract_unlock_prf.
    + exact SwapContract_unlock_vc.
    + exact SwapContract_unlock_oblg.
(*  - apply semof_prim_kernel_mode_2_void.
    + exact relate_AbData_translates_kernel_mode.
    + exact SwapContract_unlock_spec_requires_kernel_mode. *)
Qed.

Lemma SwapContract_claim_prf : function_constr_prf SwapContract_claim.
Proof. solve_function_constr_prf @SwapContract_claim. Qed.

Theorem SwapContract_claim_code_correct:
  simRR GetHighDataX GetLowDataX (path_inj Hcompatrel)
    (ident_SwapContract_claim ↦ CompatGenSem.gensem SwapContract_claim_spec)
    (clight_DeepSpec_layer GetLowLayer ident_SwapContract_claim SwapContract_claim_cfun).
Proof.
  assert (cc := cl_sim_sem_code_correct).
  apply cc; clear cc; try reflexivity.
  - rewrite SwapContract_claim_spec_eq.
    change SwapContract_claim_cfun
      with (synth_func_func SwapContract_claim).
    apply synth_correct_0_void.
    + exact SwapContract_claim_prf.
    + exact SwapContract_claim_vc.
    + exact SwapContract_claim_oblg.
(*  - apply semof_prim_kernel_mode_0_void.
    + exact relate_AbData_translates_kernel_mode.
    + exact SwapContract_claim_spec_requires_kernel_mode. *)
Qed.

Lemma SwapContract_refund_prf : function_constr_prf SwapContract_refund.
Proof. solve_function_constr_prf @SwapContract_refund. Qed.

Theorem SwapContract_refund_code_correct:
  simRR GetHighDataX GetLowDataX (path_inj Hcompatrel)
    (ident_SwapContract_refund ↦ CompatGenSem.gensem SwapContract_refund_spec)
    (clight_DeepSpec_layer GetLowLayer ident_SwapContract_refund SwapContract_refund_cfun).
Proof.
  assert (cc := cl_sim_sem_code_correct).
  apply cc; clear cc; try reflexivity.
  - rewrite SwapContract_refund_spec_eq.
    change SwapContract_refund_cfun
      with (synth_func_func SwapContract_refund).
    apply synth_correct_0_void.
    + exact SwapContract_refund_prf.
    + exact SwapContract_refund_vc.
    + exact SwapContract_refund_oblg.
(*  - apply semof_prim_kernel_mode_0_void.
    + exact relate_AbData_translates_kernel_mode.
    + exact SwapContract_refund_spec_requires_kernel_mode. *)
Qed.

End EdsgerGen.
