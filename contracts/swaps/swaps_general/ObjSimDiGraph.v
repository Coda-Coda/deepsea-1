(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module swaps_general.ObjSimDiGraph for swaps_general.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import swaps_general.EdsgerIdents.
Require Import swaps_general.DataTypes.
Require Import swaps_general.DataTypeOps.
Require Import swaps_general.DataTypeProofs.
Require Import liblayers.compcertx.MakeProgram.
Require Import liblayers.compcertx.MemWithData.
Require Import layerlib.RefinementTactic.
Require Import layerlib.RefinementTacticAux.

Require Import swaps_general.LayerEVMOPCODE.

Section EdsgerGen.


Context {Hmem: Mem.MemoryModel mem}.
Context`{Hmwd: UseMemWithData mem}.
Context`{make_program_ops: !MakeProgramOps Clight.function Ctypes.type Clight.fundef Ctypes.type}.
Context`{Hmake_program: !MakeProgram Clight.function Ctypes.type Clight.fundef Ctypes.type}.
Instance GlobalLayerSpec : LayerSpecClass := {
  make_program_ops := make_program_ops;
  Hmake_program := Hmake_program;
  GetHighData := global_abstract_data_type
}.
Context`{HM : HyperMem (LayerSpec := GlobalLayerSpec)}.

  Context {DiGraph__leaders_var_pt_prf : variable_passthrough_prf DiGraph__leaders_var}.
  Context {DiGraph__parties_var_pt_prf : variable_passthrough_prf DiGraph__parties_var}.
  Context {DiGraph__edges_var_pt_prf : variable_passthrough_prf DiGraph__edges_var}.
  Context {DiGraph__edges_reverse_var_pt_prf : variable_passthrough_prf DiGraph__edges_reverse_var}.
  Context {DiGraph__party_addr_to_ind_var_pt_prf : variable_passthrough_prf DiGraph__party_addr_to_ind_var}.
  Context {DiGraph__leader_addr_to_ind_var_pt_prf : variable_passthrough_prf DiGraph__leader_addr_to_ind_var}.
  Context {DiGraph__party_var_pt_prf : variable_passthrough_prf DiGraph__party_var}.
  Context {DiGraph__counterparty_var_pt_prf : variable_passthrough_prf DiGraph__counterparty_var}.
  Context {DiGraph__hashkeyinit_var_pt_prf : variable_passthrough_prf DiGraph__hashkeyinit_var}.
  Context {DiGraph__innerpathinit_var_pt_prf : variable_passthrough_prf DiGraph__innerpathinit_var}.
  Context {DiGraph__allpaths_var_pt_prf : variable_passthrough_prf DiGraph__allpaths_var}.
  Context {DiGraph__res_is_leader_var_pt_prf : variable_passthrough_prf DiGraph__res_is_leader_var}.
  Context {DiGraph__res_is_party_var_pt_prf : variable_passthrough_prf DiGraph__res_is_party_var}.
  Context {DiGraph__res_is_edge_var_pt_prf : variable_passthrough_prf DiGraph__res_is_edge_var}.
  Context {DiGraph__res_has_signed_var_pt_prf : variable_passthrough_prf DiGraph__res_has_signed_var}.
  Context {DiGraph__res_can_sign_var_pt_prf : variable_passthrough_prf DiGraph__res_can_sign_var}.
  Context {DiGraph__res_path_len_var_pt_prf : variable_passthrough_prf DiGraph__res_path_len_var}.

  Lemma DiGraph_initialize_passthrough_prf :
      function_constr_passthrough_prf DiGraph_initialize.
  Proof. solve_passthrough_prf @DiGraph_initialize. Qed.
  Lemma DiGraph_initialize_passthrough_cond :
      synth_func_passthrough_cond DiGraph_initialize DiGraph_initialize_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_initialize_prim_passthrough
      : primitive_passthrough_prf DiGraph_initialize_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_initialize_prim.
      rewrite DiGraph_initialize_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_initialize_passthrough_prf
              DiGraph_initialize_wf
              DiGraph_initialize_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_initialize_prim.
      rewrite DiGraph_initialize_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_initialize_passthrough_prf
              DiGraph_initialize_wf
              DiGraph_initialize_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_initialize_prim.
      rewrite DiGraph_initialize_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_initialize_passthrough_prf
              DiGraph_initialize_wf
              DiGraph_initialize_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_initialize_prim.
      rewrite DiGraph_initialize_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_initialize_passthrough_prf
              DiGraph_initialize_wf
              DiGraph_initialize_passthrough_cond).
  Qed.

  Lemma DiGraph_initialize_exists :
    forall j a0 d1 d2 d1',
      relate_AbData j d1 d2 ->
      DiGraph_initialize_spec a0 d1 = Some d1' ->
      exists d2',
        DiGraph_initialize_spec a0 d2 = Some d2' /\
        relate_AbData j d1' d2'.
  Proof.
    intro j.
    rewrite * DiGraph_initialize_spec_eq.
    exact (synth_func_relate_1_void
            DiGraph_initialize_passthrough_prf
            DiGraph_initialize_wf
            DiGraph_initialize_passthrough_cond
            j (fun _ _ x => x)).
  Qed.

  Lemma DiGraph_initialize_match :
    forall j d d' m a0,
      match_AbData d m j ->
      DiGraph_initialize_spec a0 d = Some d' ->
      match_AbData d' m j.
  Proof.
    rewrite * DiGraph_initialize_spec_eq.
    exact (synth_func_match_1_void
            DiGraph_initialize_passthrough_prf
            DiGraph_initialize_wf
            DiGraph_initialize_passthrough_cond).
  Qed.

  Section initialize.
    Context`{inv : !CompatGenSem.PreservesInvariants (HD := cdataHigh) DiGraph_initialize_spec}.
    Context`{inv0 : !CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_initialize_spec}.

    Lemma DiGraph_initialize_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_initialize_spec)
            (id ↦ CompatGenSem.gensem DiGraph_initialize_spec).
    Proof.
      (* non-pure C-primitives *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      try inv_semof H0.
      try (inversion H0; subst; simpl in H0).
      exploit DiGraph_initialize_exists; eauto 1; intros (labd' & HP & rel).
      match_external_states_csem; auto;
      eapply DiGraph_initialize_match; eauto.
    Qed.
  End initialize.

  Lemma DiGraph_is_leader_passthrough_prf :
      function_constr_passthrough_prf DiGraph_is_leader.
  Proof. solve_passthrough_prf @DiGraph_is_leader. Qed.
  Lemma DiGraph_is_leader_passthrough_cond :
      synth_func_passthrough_cond DiGraph_is_leader DiGraph_is_leader_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_is_leader_prim_passthrough
      : primitive_passthrough_prf DiGraph_is_leader_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_is_leader_prim.
      rewrite DiGraph_is_leader_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_is_leader_passthrough_prf
              DiGraph_is_leader_wf
              DiGraph_is_leader_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_is_leader_prim.
      rewrite DiGraph_is_leader_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_is_leader_passthrough_prf
              DiGraph_is_leader_wf
              DiGraph_is_leader_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_is_leader_prim.
      rewrite DiGraph_is_leader_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_is_leader_passthrough_prf
              DiGraph_is_leader_wf
              DiGraph_is_leader_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_is_leader_prim.
      rewrite DiGraph_is_leader_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_is_leader_passthrough_prf
              DiGraph_is_leader_wf
              DiGraph_is_leader_passthrough_cond).
  Qed.

  Lemma DiGraph_is_leader_exists :
    forall j a0 d1 d2 d1' r,
      relate_AbData j d1 d2 ->
      DiGraph_is_leader_spec a0 d1 = Some (r, d1') ->
      exists d2',
        DiGraph_is_leader_spec a0 d2 = Some (r, d2') /\
        relate_AbData j d1' d2'.
  Proof.
    intro j.
    rewrite * DiGraph_is_leader_spec_eq.
    exact (synth_func_relate_1
            DiGraph_is_leader_passthrough_prf
            DiGraph_is_leader_wf
            DiGraph_is_leader_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Lemma DiGraph_is_leader_match :
    forall j d d' m a0 r,
      match_AbData d m j ->
      DiGraph_is_leader_spec a0 d = Some (r, d') ->
      match_AbData d' m j.
  Proof.
    rewrite * DiGraph_is_leader_spec_eq.
    exact (synth_func_match_1
            DiGraph_is_leader_passthrough_prf
            DiGraph_is_leader_wf
            DiGraph_is_leader_passthrough_cond).
  Qed.

  Section is_leader.
    Context`{inv : !CompatGenSem.PreservesInvariants (HD := cdataHigh) DiGraph_is_leader_spec}.
    Context`{inv0 : !CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_is_leader_spec}.

    Lemma DiGraph_is_leader_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_is_leader_spec)
            (id ↦ CompatGenSem.gensem DiGraph_is_leader_spec).
    Proof.
      (* non-pure C-primitives *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      try inv_semof H0.
      try (inversion H0; subst; simpl in H0).
      exploit DiGraph_is_leader_exists; eauto 1; intros (labd' & HP & rel).
      match_external_states_csem; auto;
      eapply DiGraph_is_leader_match; eauto.
    Qed.
  End is_leader.

  Lemma DiGraph_is_party_passthrough_prf :
      function_constr_passthrough_prf DiGraph_is_party.
  Proof. solve_passthrough_prf @DiGraph_is_party. Qed.
  Lemma DiGraph_is_party_passthrough_cond :
      synth_func_passthrough_cond DiGraph_is_party DiGraph_is_party_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_is_party_prim_passthrough
      : primitive_passthrough_prf DiGraph_is_party_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_is_party_prim.
      rewrite DiGraph_is_party_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_is_party_passthrough_prf
              DiGraph_is_party_wf
              DiGraph_is_party_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_is_party_prim.
      rewrite DiGraph_is_party_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_is_party_passthrough_prf
              DiGraph_is_party_wf
              DiGraph_is_party_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_is_party_prim.
      rewrite DiGraph_is_party_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_is_party_passthrough_prf
              DiGraph_is_party_wf
              DiGraph_is_party_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_is_party_prim.
      rewrite DiGraph_is_party_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_is_party_passthrough_prf
              DiGraph_is_party_wf
              DiGraph_is_party_passthrough_cond).
  Qed.

  Lemma DiGraph_is_party_exists :
    forall j a0 d1 d2 d1' r,
      relate_AbData j d1 d2 ->
      DiGraph_is_party_spec a0 d1 = Some (r, d1') ->
      exists d2',
        DiGraph_is_party_spec a0 d2 = Some (r, d2') /\
        relate_AbData j d1' d2'.
  Proof.
    intro j.
    rewrite * DiGraph_is_party_spec_eq.
    exact (synth_func_relate_1
            DiGraph_is_party_passthrough_prf
            DiGraph_is_party_wf
            DiGraph_is_party_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Lemma DiGraph_is_party_match :
    forall j d d' m a0 r,
      match_AbData d m j ->
      DiGraph_is_party_spec a0 d = Some (r, d') ->
      match_AbData d' m j.
  Proof.
    rewrite * DiGraph_is_party_spec_eq.
    exact (synth_func_match_1
            DiGraph_is_party_passthrough_prf
            DiGraph_is_party_wf
            DiGraph_is_party_passthrough_cond).
  Qed.

  Section is_party.
    Context`{inv : !CompatGenSem.PreservesInvariants (HD := cdataHigh) DiGraph_is_party_spec}.
    Context`{inv0 : !CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_is_party_spec}.

    Lemma DiGraph_is_party_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_is_party_spec)
            (id ↦ CompatGenSem.gensem DiGraph_is_party_spec).
    Proof.
      (* non-pure C-primitives *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      try inv_semof H0.
      try (inversion H0; subst; simpl in H0).
      exploit DiGraph_is_party_exists; eauto 1; intros (labd' & HP & rel).
      match_external_states_csem; auto;
      eapply DiGraph_is_party_match; eauto.
    Qed.
  End is_party.

  Lemma DiGraph_is_edge_passthrough_prf :
      function_constr_passthrough_prf DiGraph_is_edge.
  Proof. solve_passthrough_prf @DiGraph_is_edge. Qed.
  Lemma DiGraph_is_edge_passthrough_cond :
      synth_func_passthrough_cond DiGraph_is_edge DiGraph_is_edge_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_is_edge_prim_passthrough
      : primitive_passthrough_prf DiGraph_is_edge_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_is_edge_prim.
      rewrite DiGraph_is_edge_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_is_edge_passthrough_prf
              DiGraph_is_edge_wf
              DiGraph_is_edge_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_is_edge_prim.
      rewrite DiGraph_is_edge_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_is_edge_passthrough_prf
              DiGraph_is_edge_wf
              DiGraph_is_edge_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_is_edge_prim.
      rewrite DiGraph_is_edge_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_is_edge_passthrough_prf
              DiGraph_is_edge_wf
              DiGraph_is_edge_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_is_edge_prim.
      rewrite DiGraph_is_edge_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_is_edge_passthrough_prf
              DiGraph_is_edge_wf
              DiGraph_is_edge_passthrough_cond).
  Qed.

  Lemma DiGraph_is_edge_exists :
    forall j a0 a1 d1 d2 d1' r,
      relate_AbData j d1 d2 ->
      DiGraph_is_edge_spec a0 a1 d1 = Some (r, d1') ->
      exists d2',
        DiGraph_is_edge_spec a0 a1 d2 = Some (r, d2') /\
        relate_AbData j d1' d2'.
  Proof.
    intro j.
    rewrite * DiGraph_is_edge_spec_eq.
    exact (synth_func_relate_2
            DiGraph_is_edge_passthrough_prf
            DiGraph_is_edge_wf
            DiGraph_is_edge_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Lemma DiGraph_is_edge_match :
    forall j d d' m a0 a1 r,
      match_AbData d m j ->
      DiGraph_is_edge_spec a0 a1 d = Some (r, d') ->
      match_AbData d' m j.
  Proof.
    rewrite * DiGraph_is_edge_spec_eq.
    exact (synth_func_match_2
            DiGraph_is_edge_passthrough_prf
            DiGraph_is_edge_wf
            DiGraph_is_edge_passthrough_cond).
  Qed.

  Section is_edge.
    Context`{inv : !CompatGenSem.PreservesInvariants (HD := cdataHigh) DiGraph_is_edge_spec}.
    Context`{inv0 : !CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_is_edge_spec}.

    Lemma DiGraph_is_edge_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_is_edge_spec)
            (id ↦ CompatGenSem.gensem DiGraph_is_edge_spec).
    Proof.
      (* non-pure C-primitives *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      try inv_semof H0.
      try (inversion H0; subst; simpl in H0).
      exploit DiGraph_is_edge_exists; eauto 1; intros (labd' & HP & rel).
      match_external_states_csem; auto;
      eapply DiGraph_is_edge_match; eauto.
    Qed.
  End is_edge.

  Lemma DiGraph_get_leader_ind_passthrough_prf :
      function_constr_passthrough_prf DiGraph_get_leader_ind.
  Proof. solve_passthrough_prf @DiGraph_get_leader_ind. Qed.
  Lemma DiGraph_get_leader_ind_passthrough_cond :
      synth_func_passthrough_cond DiGraph_get_leader_ind DiGraph_get_leader_ind_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_get_leader_ind_prim_passthrough
      : primitive_passthrough_prf DiGraph_get_leader_ind_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_get_leader_ind_prim.
      rewrite DiGraph_get_leader_ind_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_get_leader_ind_passthrough_prf
              DiGraph_get_leader_ind_wf
              DiGraph_get_leader_ind_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_get_leader_ind_prim.
      rewrite DiGraph_get_leader_ind_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_get_leader_ind_passthrough_prf
              DiGraph_get_leader_ind_wf
              DiGraph_get_leader_ind_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_get_leader_ind_prim.
      rewrite DiGraph_get_leader_ind_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_get_leader_ind_passthrough_prf
              DiGraph_get_leader_ind_wf
              DiGraph_get_leader_ind_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_get_leader_ind_prim.
      rewrite DiGraph_get_leader_ind_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_get_leader_ind_passthrough_prf
              DiGraph_get_leader_ind_wf
              DiGraph_get_leader_ind_passthrough_cond).
  Qed.

  Lemma DiGraph_get_leader_ind_exists :
    forall j a0 d1 d2 r,
      relate_AbData j d1 d2 ->
      DiGraph_get_leader_ind_spec a0 d1 = Some r ->
      DiGraph_get_leader_ind_spec a0 d2 = Some r.
  Proof.
    intro j.
    rewrite * DiGraph_get_leader_ind_spec_eq.
    exact (synth_func_relate_1_pure
            DiGraph_get_leader_ind_passthrough_prf
            DiGraph_get_leader_ind_wf
            DiGraph_get_leader_ind_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Section get_leader_ind.
    Lemma DiGraph_get_leader_ind_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_get_leader_ind_spec)
            (id ↦ CompatGenSem.gensem DiGraph_get_leader_ind_spec).
    Proof.
      (* pure method *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      inv_semof H0.
      inversion H0; subst; simpl in H0;
      match_external_states_csem; auto;
      erewrite DiGraph_get_leader_ind_exists; eauto; reflexivity.
    Qed.
  End get_leader_ind.

  Lemma DiGraph_get_party_ind_passthrough_prf :
      function_constr_passthrough_prf DiGraph_get_party_ind.
  Proof. solve_passthrough_prf @DiGraph_get_party_ind. Qed.
  Lemma DiGraph_get_party_ind_passthrough_cond :
      synth_func_passthrough_cond DiGraph_get_party_ind DiGraph_get_party_ind_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_get_party_ind_prim_passthrough
      : primitive_passthrough_prf DiGraph_get_party_ind_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_get_party_ind_prim.
      rewrite DiGraph_get_party_ind_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_get_party_ind_passthrough_prf
              DiGraph_get_party_ind_wf
              DiGraph_get_party_ind_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_get_party_ind_prim.
      rewrite DiGraph_get_party_ind_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_get_party_ind_passthrough_prf
              DiGraph_get_party_ind_wf
              DiGraph_get_party_ind_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_get_party_ind_prim.
      rewrite DiGraph_get_party_ind_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_get_party_ind_passthrough_prf
              DiGraph_get_party_ind_wf
              DiGraph_get_party_ind_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_get_party_ind_prim.
      rewrite DiGraph_get_party_ind_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_get_party_ind_passthrough_prf
              DiGraph_get_party_ind_wf
              DiGraph_get_party_ind_passthrough_cond).
  Qed.

  Lemma DiGraph_get_party_ind_exists :
    forall j a0 d1 d2 r,
      relate_AbData j d1 d2 ->
      DiGraph_get_party_ind_spec a0 d1 = Some r ->
      DiGraph_get_party_ind_spec a0 d2 = Some r.
  Proof.
    intro j.
    rewrite * DiGraph_get_party_ind_spec_eq.
    exact (synth_func_relate_1_pure
            DiGraph_get_party_ind_passthrough_prf
            DiGraph_get_party_ind_wf
            DiGraph_get_party_ind_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Section get_party_ind.
    Lemma DiGraph_get_party_ind_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_get_party_ind_spec)
            (id ↦ CompatGenSem.gensem DiGraph_get_party_ind_spec).
    Proof.
      (* pure method *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      inv_semof H0.
      inversion H0; subst; simpl in H0;
      match_external_states_csem; auto;
      erewrite DiGraph_get_party_ind_exists; eauto; reflexivity.
    Qed.
  End get_party_ind.

  Lemma DiGraph_valid_path_passthrough_prf :
      function_constr_passthrough_prf DiGraph_valid_path.
  Proof. solve_passthrough_prf @DiGraph_valid_path. Qed.
  Lemma DiGraph_valid_path_passthrough_cond :
      synth_func_passthrough_cond DiGraph_valid_path DiGraph_valid_path_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_valid_path_prim_passthrough
      : primitive_passthrough_prf DiGraph_valid_path_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_valid_path_prim.
      rewrite DiGraph_valid_path_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_valid_path_passthrough_prf
              DiGraph_valid_path_wf
              DiGraph_valid_path_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_valid_path_prim.
      rewrite DiGraph_valid_path_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_valid_path_passthrough_prf
              DiGraph_valid_path_wf
              DiGraph_valid_path_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_valid_path_prim.
      rewrite DiGraph_valid_path_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_valid_path_passthrough_prf
              DiGraph_valid_path_wf
              DiGraph_valid_path_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_valid_path_prim.
      rewrite DiGraph_valid_path_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_valid_path_passthrough_prf
              DiGraph_valid_path_wf
              DiGraph_valid_path_passthrough_cond).
  Qed.

  Lemma DiGraph_valid_path_exists :
    forall j a0 a1 a2 d1 d2 r,
      relate_AbData j d1 d2 ->
      DiGraph_valid_path_spec a0 a1 a2 d1 = Some r ->
      DiGraph_valid_path_spec a0 a1 a2 d2 = Some r.
  Proof.
    intro j.
    rewrite * DiGraph_valid_path_spec_eq.
    exact (synth_func_relate_3_pure
            DiGraph_valid_path_passthrough_prf
            DiGraph_valid_path_wf
            DiGraph_valid_path_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x) (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Section valid_path.
    Lemma DiGraph_valid_path_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_valid_path_spec)
            (id ↦ CompatGenSem.gensem DiGraph_valid_path_spec).
    Proof.
      (* pure method *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      inv_semof H0.
      inversion H0; subst; simpl in H0;
      match_external_states_csem; auto;
      erewrite DiGraph_valid_path_exists; eauto; reflexivity.
    Qed.
  End valid_path.

  Lemma DiGraph_sign_follower_passthrough_prf :
      function_constr_passthrough_prf DiGraph_sign_follower.
  Proof. solve_passthrough_prf @DiGraph_sign_follower. Qed.
  Lemma DiGraph_sign_follower_passthrough_cond :
      synth_func_passthrough_cond DiGraph_sign_follower DiGraph_sign_follower_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_sign_follower_prim_passthrough
      : primitive_passthrough_prf DiGraph_sign_follower_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_sign_follower_prim.
      rewrite DiGraph_sign_follower_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_sign_follower_passthrough_prf
              DiGraph_sign_follower_wf
              DiGraph_sign_follower_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_sign_follower_prim.
      rewrite DiGraph_sign_follower_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_sign_follower_passthrough_prf
              DiGraph_sign_follower_wf
              DiGraph_sign_follower_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_sign_follower_prim.
      rewrite DiGraph_sign_follower_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_sign_follower_passthrough_prf
              DiGraph_sign_follower_wf
              DiGraph_sign_follower_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_sign_follower_prim.
      rewrite DiGraph_sign_follower_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_sign_follower_passthrough_prf
              DiGraph_sign_follower_wf
              DiGraph_sign_follower_passthrough_cond).
  Qed.

  Lemma DiGraph_sign_follower_exists :
    forall j a0 a1 a2 a3 d1 d2 d1',
      relate_AbData j d1 d2 ->
      DiGraph_sign_follower_spec a0 a1 a2 a3 d1 = Some d1' ->
      exists d2',
        DiGraph_sign_follower_spec a0 a1 a2 a3 d2 = Some d2' /\
        relate_AbData j d1' d2'.
  Proof.
    intro j.
    rewrite * DiGraph_sign_follower_spec_eq.
    exact (synth_func_relate_4_void
            DiGraph_sign_follower_passthrough_prf
            DiGraph_sign_follower_wf
            DiGraph_sign_follower_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x) (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Lemma DiGraph_sign_follower_match :
    forall j d d' m a0 a1 a2 a3,
      match_AbData d m j ->
      DiGraph_sign_follower_spec a0 a1 a2 a3 d = Some d' ->
      match_AbData d' m j.
  Proof.
    rewrite * DiGraph_sign_follower_spec_eq.
    exact (synth_func_match_4_void
            DiGraph_sign_follower_passthrough_prf
            DiGraph_sign_follower_wf
            DiGraph_sign_follower_passthrough_cond).
  Qed.

  Section sign_follower.
    Context`{inv : !CompatGenSem.PreservesInvariants (HD := cdataHigh) DiGraph_sign_follower_spec}.
    Context`{inv0 : !CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_sign_follower_spec}.

    Lemma DiGraph_sign_follower_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_sign_follower_spec)
            (id ↦ CompatGenSem.gensem DiGraph_sign_follower_spec).
    Proof.
      (* non-pure C-primitives *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      try inv_semof H0.
      try (inversion H0; subst; simpl in H0).
      exploit DiGraph_sign_follower_exists; eauto 1; intros (labd' & HP & rel).
      match_external_states_csem; auto;
      eapply DiGraph_sign_follower_match; eauto.
    Qed.
  End sign_follower.

  Lemma DiGraph_sign_leader_passthrough_prf :
      function_constr_passthrough_prf DiGraph_sign_leader.
  Proof. solve_passthrough_prf @DiGraph_sign_leader. Qed.
  Lemma DiGraph_sign_leader_passthrough_cond :
      synth_func_passthrough_cond DiGraph_sign_leader DiGraph_sign_leader_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_sign_leader_prim_passthrough
      : primitive_passthrough_prf DiGraph_sign_leader_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_sign_leader_prim.
      rewrite DiGraph_sign_leader_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_sign_leader_passthrough_prf
              DiGraph_sign_leader_wf
              DiGraph_sign_leader_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_sign_leader_prim.
      rewrite DiGraph_sign_leader_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_sign_leader_passthrough_prf
              DiGraph_sign_leader_wf
              DiGraph_sign_leader_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_sign_leader_prim.
      rewrite DiGraph_sign_leader_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_sign_leader_passthrough_prf
              DiGraph_sign_leader_wf
              DiGraph_sign_leader_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_sign_leader_prim.
      rewrite DiGraph_sign_leader_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_sign_leader_passthrough_prf
              DiGraph_sign_leader_wf
              DiGraph_sign_leader_passthrough_cond).
  Qed.

  Lemma DiGraph_sign_leader_exists :
    forall j a0 a1 a2 d1 d2 d1',
      relate_AbData j d1 d2 ->
      DiGraph_sign_leader_spec a0 a1 a2 d1 = Some d1' ->
      exists d2',
        DiGraph_sign_leader_spec a0 a1 a2 d2 = Some d2' /\
        relate_AbData j d1' d2'.
  Proof.
    intro j.
    rewrite * DiGraph_sign_leader_spec_eq.
    exact (synth_func_relate_3_void
            DiGraph_sign_leader_passthrough_prf
            DiGraph_sign_leader_wf
            DiGraph_sign_leader_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Lemma DiGraph_sign_leader_match :
    forall j d d' m a0 a1 a2,
      match_AbData d m j ->
      DiGraph_sign_leader_spec a0 a1 a2 d = Some d' ->
      match_AbData d' m j.
  Proof.
    rewrite * DiGraph_sign_leader_spec_eq.
    exact (synth_func_match_3_void
            DiGraph_sign_leader_passthrough_prf
            DiGraph_sign_leader_wf
            DiGraph_sign_leader_passthrough_cond).
  Qed.

  Section sign_leader.
    Context`{inv : !CompatGenSem.PreservesInvariants (HD := cdataHigh) DiGraph_sign_leader_spec}.
    Context`{inv0 : !CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_sign_leader_spec}.

    Lemma DiGraph_sign_leader_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_sign_leader_spec)
            (id ↦ CompatGenSem.gensem DiGraph_sign_leader_spec).
    Proof.
      (* non-pure C-primitives *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      try inv_semof H0.
      try (inversion H0; subst; simpl in H0).
      exploit DiGraph_sign_leader_exists; eauto 1; intros (labd' & HP & rel).
      match_external_states_csem; auto;
      eapply DiGraph_sign_leader_match; eauto.
    Qed.
  End sign_leader.

  Lemma DiGraph_can_sign_follower_passthrough_prf :
      function_constr_passthrough_prf DiGraph_can_sign_follower.
  Proof. solve_passthrough_prf @DiGraph_can_sign_follower. Qed.
  Lemma DiGraph_can_sign_follower_passthrough_cond :
      synth_func_passthrough_cond DiGraph_can_sign_follower DiGraph_can_sign_follower_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_can_sign_follower_prim_passthrough
      : primitive_passthrough_prf DiGraph_can_sign_follower_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_can_sign_follower_prim.
      rewrite DiGraph_can_sign_follower_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_can_sign_follower_passthrough_prf
              DiGraph_can_sign_follower_wf
              DiGraph_can_sign_follower_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_can_sign_follower_prim.
      rewrite DiGraph_can_sign_follower_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_can_sign_follower_passthrough_prf
              DiGraph_can_sign_follower_wf
              DiGraph_can_sign_follower_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_can_sign_follower_prim.
      rewrite DiGraph_can_sign_follower_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_can_sign_follower_passthrough_prf
              DiGraph_can_sign_follower_wf
              DiGraph_can_sign_follower_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_can_sign_follower_prim.
      rewrite DiGraph_can_sign_follower_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_can_sign_follower_passthrough_prf
              DiGraph_can_sign_follower_wf
              DiGraph_can_sign_follower_passthrough_cond).
  Qed.

  Lemma DiGraph_can_sign_follower_exists :
    forall j a0 a1 a2 d1 d2 d1' r,
      relate_AbData j d1 d2 ->
      DiGraph_can_sign_follower_spec a0 a1 a2 d1 = Some (r, d1') ->
      exists d2',
        DiGraph_can_sign_follower_spec a0 a1 a2 d2 = Some (r, d2') /\
        relate_AbData j d1' d2'.
  Proof.
    intro j.
    rewrite * DiGraph_can_sign_follower_spec_eq.
    exact (synth_func_relate_3
            DiGraph_can_sign_follower_passthrough_prf
            DiGraph_can_sign_follower_wf
            DiGraph_can_sign_follower_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x) (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Lemma DiGraph_can_sign_follower_match :
    forall j d d' m a0 a1 a2 r,
      match_AbData d m j ->
      DiGraph_can_sign_follower_spec a0 a1 a2 d = Some (r, d') ->
      match_AbData d' m j.
  Proof.
    rewrite * DiGraph_can_sign_follower_spec_eq.
    exact (synth_func_match_3
            DiGraph_can_sign_follower_passthrough_prf
            DiGraph_can_sign_follower_wf
            DiGraph_can_sign_follower_passthrough_cond).
  Qed.

  Section can_sign_follower.
    Context`{inv : !CompatGenSem.PreservesInvariants (HD := cdataHigh) DiGraph_can_sign_follower_spec}.
    Context`{inv0 : !CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_can_sign_follower_spec}.

    Lemma DiGraph_can_sign_follower_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_can_sign_follower_spec)
            (id ↦ CompatGenSem.gensem DiGraph_can_sign_follower_spec).
    Proof.
      (* non-pure C-primitives *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      try inv_semof H0.
      try (inversion H0; subst; simpl in H0).
      exploit DiGraph_can_sign_follower_exists; eauto 1; intros (labd' & HP & rel).
      match_external_states_csem; auto;
      eapply DiGraph_can_sign_follower_match; eauto.
    Qed.
  End can_sign_follower.

  Lemma DiGraph_get_path_len_passthrough_prf :
      function_constr_passthrough_prf DiGraph_get_path_len.
  Proof. solve_passthrough_prf @DiGraph_get_path_len. Qed.
  Lemma DiGraph_get_path_len_passthrough_cond :
      synth_func_passthrough_cond DiGraph_get_path_len DiGraph_get_path_len_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_get_path_len_prim_passthrough
      : primitive_passthrough_prf DiGraph_get_path_len_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_get_path_len_prim.
      rewrite DiGraph_get_path_len_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_get_path_len_passthrough_prf
              DiGraph_get_path_len_wf
              DiGraph_get_path_len_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_get_path_len_prim.
      rewrite DiGraph_get_path_len_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_get_path_len_passthrough_prf
              DiGraph_get_path_len_wf
              DiGraph_get_path_len_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_get_path_len_prim.
      rewrite DiGraph_get_path_len_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_get_path_len_passthrough_prf
              DiGraph_get_path_len_wf
              DiGraph_get_path_len_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_get_path_len_prim.
      rewrite DiGraph_get_path_len_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_get_path_len_passthrough_prf
              DiGraph_get_path_len_wf
              DiGraph_get_path_len_passthrough_cond).
  Qed.

  Lemma DiGraph_get_path_len_exists :
    forall j a0 a1 a2 d1 d2 d1' r,
      relate_AbData j d1 d2 ->
      DiGraph_get_path_len_spec a0 a1 a2 d1 = Some (r, d1') ->
      exists d2',
        DiGraph_get_path_len_spec a0 a1 a2 d2 = Some (r, d2') /\
        relate_AbData j d1' d2'.
  Proof.
    intro j.
    rewrite * DiGraph_get_path_len_spec_eq.
    exact (synth_func_relate_3
            DiGraph_get_path_len_passthrough_prf
            DiGraph_get_path_len_wf
            DiGraph_get_path_len_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x) (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Lemma DiGraph_get_path_len_match :
    forall j d d' m a0 a1 a2 r,
      match_AbData d m j ->
      DiGraph_get_path_len_spec a0 a1 a2 d = Some (r, d') ->
      match_AbData d' m j.
  Proof.
    rewrite * DiGraph_get_path_len_spec_eq.
    exact (synth_func_match_3
            DiGraph_get_path_len_passthrough_prf
            DiGraph_get_path_len_wf
            DiGraph_get_path_len_passthrough_cond).
  Qed.

  Section get_path_len.
    Context`{inv : !CompatGenSem.PreservesInvariants (HD := cdataHigh) DiGraph_get_path_len_spec}.
    Context`{inv0 : !CompatGenSem.PreservesInvariants (HD := cdataLow) DiGraph_get_path_len_spec}.

    Lemma DiGraph_get_path_len_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_get_path_len_spec)
            (id ↦ CompatGenSem.gensem DiGraph_get_path_len_spec).
    Proof.
      (* non-pure C-primitives *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      try inv_semof H0.
      try (inversion H0; subst; simpl in H0).
      exploit DiGraph_get_path_len_exists; eauto 1; intros (labd' & HP & rel).
      match_external_states_csem; auto;
      eapply DiGraph_get_path_len_match; eauto.
    Qed.
  End get_path_len.

  Lemma DiGraph_diam_passthrough_prf :
      function_constr_passthrough_prf DiGraph_diam.
  Proof. solve_passthrough_prf @DiGraph_diam. Qed.
  Lemma DiGraph_diam_passthrough_cond :
      synth_func_passthrough_cond DiGraph_diam DiGraph_diam_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_diam_prim_passthrough
      : primitive_passthrough_prf DiGraph_diam_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_diam_prim.
      rewrite DiGraph_diam_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_diam_passthrough_prf
              DiGraph_diam_wf
              DiGraph_diam_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_diam_prim.
      rewrite DiGraph_diam_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_diam_passthrough_prf
              DiGraph_diam_wf
              DiGraph_diam_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_diam_prim.
      rewrite DiGraph_diam_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_diam_passthrough_prf
              DiGraph_diam_wf
              DiGraph_diam_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_diam_prim.
      rewrite DiGraph_diam_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_diam_passthrough_prf
              DiGraph_diam_wf
              DiGraph_diam_passthrough_cond).
  Qed.

  Lemma DiGraph_diam_exists :
    forall j d1 d2 r,
      relate_AbData j d1 d2 ->
      DiGraph_diam_spec d1 = Some r ->
      DiGraph_diam_spec d2 = Some r.
  Proof.
    intro j.
    rewrite * DiGraph_diam_spec_eq.
    exact (synth_func_relate_0_pure
            DiGraph_diam_passthrough_prf
            DiGraph_diam_wf
            DiGraph_diam_passthrough_cond
            j (fun _ _ x => x)).
  Qed.

  Section diam.
    Lemma DiGraph_diam_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_diam_spec)
            (id ↦ CompatGenSem.gensem DiGraph_diam_spec).
    Proof.
      (* pure method *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      inv_semof H0.
      inversion H0; subst; simpl in H0;
      match_external_states_csem; auto;
      erewrite DiGraph_diam_exists; eauto; reflexivity.
    Qed.
  End diam.

  Lemma DiGraph_maxpathlen_passthrough_prf :
      function_constr_passthrough_prf DiGraph_maxpathlen.
  Proof. solve_passthrough_prf @DiGraph_maxpathlen. Qed.
  Lemma DiGraph_maxpathlen_passthrough_cond :
      synth_func_passthrough_cond DiGraph_maxpathlen DiGraph_maxpathlen_wf.
  Proof.
    (* XXX: Only works if no [CCrespec], [CCrespec_opt], or [ECrespec] is used. *)
    compute.
    exact I.
  Qed.

  Global Instance DiGraph_maxpathlen_prim_passthrough
      : primitive_passthrough_prf DiGraph_maxpathlen_prim.
  Proof. esplit.
    (*
    - unfold PRIMsem, DiGraph_maxpathlen_prim.
      rewrite DiGraph_maxpathlen_spec_hlist_eq.
      exact (synth_func_spec_relate
              DiGraph_maxpathlen_passthrough_prf
              DiGraph_maxpathlen_wf
              DiGraph_maxpathlen_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_maxpathlen_prim.
      rewrite DiGraph_maxpathlen_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_relate
              DiGraph_maxpathlen_passthrough_prf
              DiGraph_maxpathlen_wf
              DiGraph_maxpathlen_passthrough_cond).
    (*
    - unfold PRIMsem, DiGraph_maxpathlen_prim.
      rewrite DiGraph_maxpathlen_spec_hlist_eq.
      exact (synth_func_spec_match
              DiGraph_maxpathlen_passthrough_prf
              DiGraph_maxpathlen_wf
              DiGraph_maxpathlen_passthrough_cond).
    *)
    - unfold PRIMsem_opt, DiGraph_maxpathlen_prim.
      rewrite DiGraph_maxpathlen_spec_hlist_opt_eq.
      exact (synth_func_spec_opt_match
              DiGraph_maxpathlen_passthrough_prf
              DiGraph_maxpathlen_wf
              DiGraph_maxpathlen_passthrough_cond).
  Qed.

  Lemma DiGraph_maxpathlen_exists :
    forall j a0 a1 d1 d2 r,
      relate_AbData j d1 d2 ->
      DiGraph_maxpathlen_spec a0 a1 d1 = Some r ->
      DiGraph_maxpathlen_spec a0 a1 d2 = Some r.
  Proof.
    intro j.
    rewrite * DiGraph_maxpathlen_spec_eq.
    exact (synth_func_relate_2_pure
            DiGraph_maxpathlen_passthrough_prf
            DiGraph_maxpathlen_wf
            DiGraph_maxpathlen_passthrough_cond
            j (fun _ _ x => x) (fun _ _ x => x) (fun _ _ x => x)).
  Qed.

  Section maxpathlen.
    Lemma DiGraph_maxpathlen_sim :
      forall id,
        sim (crel (CompatRel0 := crel_prf (compatrel := Hcompatrel)) _ _)
            (id ↦ CompatGenSem.gensem DiGraph_maxpathlen_spec)
            (id ↦ CompatGenSem.gensem DiGraph_maxpathlen_spec).
    Proof.
      (* pure method *)
      intros. layer_sim_simpl. compatsim_simpl (@match_AbData). intros.
      inv_semof H0.
      inversion H0; subst; simpl in H0;
      match_external_states_csem; auto;
      erewrite DiGraph_maxpathlen_exists; eauto; reflexivity.
    Qed.
  End maxpathlen.

End EdsgerGen.
