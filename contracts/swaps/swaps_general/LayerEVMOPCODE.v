(* WARNING: This file is generated by Edsger, the DeepSEA compiler.
            All modification will be lost when regenerating. *)
(* Module swaps_general.LayerEVMOPCODE for swaps_general.ds *)
Require Import BinPos.
Require Import DeepSpec.Runtime.
Require Import swaps_general.EdsgerIdents.
Require Import swaps_general.DataTypes.
Require Import swaps_general.DataTypeOps.
Require Import swaps_general.DataTypeProofs.
(*Require Import liblayers.compcertx.MakeProgram.
Require Import liblayers.compcertx.MemWithData.*)
Require Import DeepSpec.lib.Monad.Monad.
Require Import DeepSpec.lib.Monad.MonadState.
Require Import DeepSpec.lib.Monad.StateMonad.
Require Import DeepSpec.lib.Monad.OptionMonad.
Require Import DeepSpec.lib.Monad.MonadZero.
Require Import DeepSpec.core.SynthesisStmt.
Require Import backend.MachineModel.
Existing Instance MonadState_DS.
Existing Instance MonadZero_DS.

Section EdsgerGen.



Context {memModelOps : MemoryModelOps mem}.
Instance GlobalLayerSpec : LayerSpecClass := {
  memModelOps := memModelOps;                                            
  GetHighData := global_abstract_data_type 
}.


Context`{global_abdata : !GlobalAbData init_global_abstract_data global_low_level_invariant}.
Definition EVMOPCODE_kernel_mode (abd : global_abstract_data_type) := True.
Global Arguments EVMOPCODE_kernel_mode / abd.

Class Layer_EVMOPCODE_Context_prf  := {
  (* ensuring global empty data matches those in the object definitions *)
  EVMOPCODE_init__events_eq : _events init_global_abstract_data = nil;
  EVMOPCODE_init__leaders_eq : _leaders init_global_abstract_data = (ZMap.init (@ht_default tint_U _));
  EVMOPCODE_init__parties_eq : _parties init_global_abstract_data = (ZMap.init (@ht_default tint_U _));
  EVMOPCODE_init__edges_eq : _edges init_global_abstract_data = (Int256Tree.empty (ZMap.t int256));
  EVMOPCODE_init__edges_reverse_eq : _edges_reverse init_global_abstract_data = (Int256Tree.empty (ZMap.t int256));
  EVMOPCODE_init__party_addr_to_ind_eq : _party_addr_to_ind init_global_abstract_data = (Int256Tree.empty Z32);
  EVMOPCODE_init__leader_addr_to_ind_eq : _leader_addr_to_ind init_global_abstract_data = (Int256Tree.empty Z32);
  EVMOPCODE_init__party_eq : _party init_global_abstract_data = (Int256.repr 0);
  EVMOPCODE_init__counterparty_eq : _counterparty init_global_abstract_data = (Int256.repr 0);
  EVMOPCODE_init__hashkeyinit_eq : _hashkeyinit init_global_abstract_data = (ZMap.init {| path := (@ht_default tarray_int_AR3_Z _);
         nextInd := (@ht_default tint_Z32 _)
      |});
  EVMOPCODE_init__innerpathinit_eq : _innerpathinit init_global_abstract_data = (ZMap.init {| toleader := (@ht_default tarray_Path_AR1_Path _)
      |});
  EVMOPCODE_init__allpaths_eq : _allpaths init_global_abstract_data = (ZMap.init (ZMap.init (@ht_default tHashkeys_Hashkeys _)));
  EVMOPCODE_init__res_is_leader_eq : _res_is_leader init_global_abstract_data = false;
  EVMOPCODE_init__res_is_party_eq : _res_is_party init_global_abstract_data = false;
  EVMOPCODE_init__res_is_edge_eq : _res_is_edge init_global_abstract_data = false;
  EVMOPCODE_init__res_has_signed_eq : _res_has_signed init_global_abstract_data = false;
  EVMOPCODE_init__res_can_sign_eq : _res_can_sign init_global_abstract_data = false;
  EVMOPCODE_init__res_path_len_eq : _res_path_len init_global_abstract_data = (Int256.repr 0)
}.
Context`{CTXT_prf : !Layer_EVMOPCODE_Context_prf}.

Instance EVMOPCODE_data_ops : CompatDataOps global_abstract_data_type := {
  empty_data := init_global_abstract_data;
  high_level_invariant d := True;
  (* low_level_invariant := global_low_level_invariant; *) (* Omitted in Ethereum backend. 
  kernel_mode d := EVMOPCODE_kernel_mode d *)
}.

Instance EVMOPCODE_data : CompatData global_abstract_data_type := {
  (* low_level_invariant_incr := AbData_low_level_invariant_incr;
  empty_data_low_level_invariant := AbData_empty_data_low_level_invariant; *) (* Omitted in Ethereum backend. *)
  empty_data_high_level_invariant := I
}.

Instance EVMOPCODE_overlay_spec : OverlaySpecClass := {
  (*cdataOpsHigh := EVMOPCODE_data_ops;
  cdataHigh := EVMOPCODE_data *)
}.



Instance EVMOPCODE_underlay_spec : UnderlaySpecClass := {
  cdataOpsLow := @BuiltinBase_data_ops GlobalLayerSpec init_global_abstract_data;
  cdataLow := BuiltinBase_data;
  (*GetLowLayer := BuiltinBase_Layer *)
}.


Section OBJECT_EVMOpcode_DEFINITION.
  Context`{HM : !HyperMem}.

  (* Object variables *)
  Definition EVMOpcode__events_var := {|
    ltype_tp_marker := tint_list_Transfer;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _events;
    ltype_set := update__events;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.

  Definition EVMOpcode_transfer := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* toaddr : *) int_U_pair (cons (* much : *) int_U_pair nil));
    FC_returns := void_unit_pair;
    FC_body := (CClet (* e := *) 13%positive
      (CCload (LCvar EVMOpcode__events_var))
      (CCsequence
        (CCrespec_opt
          (AList.set 13%positive int_list_Transfer_pair (AList.set 12%positive int_U_pair (AList.set 11%positive int_U_pair (@AList.empty hyper_type_pair))))
          (CCpanic tvoid_unit)
          (fun se => @bind _ (@Monad_DS GlobalLayerSpec) _ _ get (fun d =>
          let a := (fun toaddr much e => {|_amount := much; _to := toaddr |} :: e)
               (SpecTree.get 12%positive (* much *) se)
               (SpecTree.get 11%positive (* toaddr *) se)
               (SpecTree.get 13%positive (* e *) se) in
put (EVMOpcode__events_var.(ltype_set) a d)
           )))
        (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))))
  |}.
  Lemma EVMOpcode_transfer_wf
      : synth_func_wellformed EVMOpcode_transfer.
  Proof. solve_wellformed. Defined.
  Definition EVMOpcode_transfer_opt :int256 -> int256 ->  machine_env -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _events update__events]
  in synth_func_spec_opt EVMOpcode_transfer EVMOpcode_transfer_wf.
  Definition EVMOpcode_transfer_spec_hlist_opt args :=
    @apply_param_func EVMOpcode_transfer.(FC_params) _
                      (EVMOpcode_transfer_opt) args.
  Definition EVMOpcode_transfer_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _events update__events]
  in *)
  synth_func_spec_cond EVMOpcode_transfer EVMOpcode_transfer_wf.

  Definition EVMOpcode_transfer_prim := {|
    PRIMident := ident_EVMOpcode_transfer;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := EVMOpcode_transfer.(FC_params);
    PRIMret_marker := EVMOpcode_transfer.(FC_returns);
    PRIMcond := EVMOpcode_transfer_spec_cond;
    (* PRIMsem := EVMOpcode_transfer_spec_hlist; *)
    PRIMsem_opt := EVMOpcode_transfer_spec_hlist_opt
  |}.

  Lemma EVMOpcode_transfer_spec_hlist_opt_eq :
    EVMOpcode_transfer_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt EVMOpcode_transfer EVMOpcode_transfer_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _events update__events]. *)
     reflexivity. 
  Qed.
  Definition EVMOpcode_transfer_cfun :=
  Eval cbv in synth_func_func EVMOpcode_transfer.

  Definition EVMOpcode_transfer_cond  a0 a1 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_cond EVMOpcode_transfer EVMOpcode_transfer_wf
								      a0 a1 me d.
  
  Lemma EVMOpcode_transfer_cond_eq : forall  a0 a1 me d, 
    EVMOpcode_transfer_cond  a0 a1 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_cond EVMOpcode_transfer EVMOpcode_transfer_wf  a0 a1 me d.
    Proof.
      intros  a0 a1 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _events update__events].
       exact H_cond.
    Qed.

  Definition EVMOpcode_transfer_obligation  a0 a1 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_obligation EVMOpcode_transfer EVMOpcode_transfer_wf
								      a0 a1 me d.
  
  Lemma EVMOpcode_transfer_obligation_eq : forall  a0 a1 me d, 
    EVMOpcode_transfer_obligation  a0 a1 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_obligation EVMOpcode_transfer EVMOpcode_transfer_wf  a0 a1 me d.
    Proof.
      intros  a0 a1 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _events update__events].
       exact H_cond.
    Qed.

  Definition EVMOpcode_transfer_spec :=
  Eval cbv [sf_mem sf_return fst snd EVMOpcode_transfer_opt] in
    fun  a0 a1 me => execStateT (EVMOpcode_transfer_opt a0 a1 me).
  Lemma EVMOpcode_transfer_spec_eq :
    EVMOpcode_transfer_spec =
    fun  a0 a1 me => execStateT (synth_func_spec_opt EVMOpcode_transfer EVMOpcode_transfer_wf a0 a1 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _events update__events].
    reflexivity.
  Qed.

Global Opaque EVMOpcode_transfer_opt.
End OBJECT_EVMOpcode_DEFINITION.

Section OBJECT_DiGraph_DEFINITION.
  Context`{HM : !HyperMem}.

  (* Object variables *)
  Definition DiGraph__leaders_var := {|
    ltype_tp_marker := tarray_int_AR1_Z;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _leaders;
    ltype_set := update__leaders;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__parties_var := {|
    ltype_tp_marker := tarray_int_AR3_Z;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _parties;
    ltype_set := update__parties;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__edges_var := {|
    ltype_tp_marker := thash_array_int_HASH_Z_AR3_Z;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _edges;
    ltype_set := update__edges;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__edges_reverse_var := {|
    ltype_tp_marker := thash_array_int_HASH_Z_AR3_Z;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _edges_reverse;
    ltype_set := update__edges_reverse;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__party_addr_to_ind_var := {|
    ltype_tp_marker := thash_int_HASH_Z_Z32;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _party_addr_to_ind;
    ltype_set := update__party_addr_to_ind;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__leader_addr_to_ind_var := {|
    ltype_tp_marker := thash_int_HASH_Z_Z32;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _leader_addr_to_ind;
    ltype_set := update__leader_addr_to_ind;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__party_var := {|
    ltype_tp_marker := tint_U;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _party;
    ltype_set := update__party;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__counterparty_var := {|
    ltype_tp_marker := tint_U;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _counterparty;
    ltype_set := update__counterparty;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__hashkeyinit_var := {|
    ltype_tp_marker := tarray_Path_AR1_Path;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _hashkeyinit;
    ltype_set := update__hashkeyinit;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__innerpathinit_var := {|
    ltype_tp_marker := tarray_Hashkeys_AR3_Hashkeys;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _innerpathinit;
    ltype_set := update__innerpathinit;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__allpaths_var := {|
    ltype_tp_marker := tarray_array_Hashkeys_AR3_AR3_Hashkeys;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _allpaths;
    ltype_set := update__allpaths;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__res_is_leader_var := {|
    ltype_tp_marker := tint_bool;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _res_is_leader;
    ltype_set := update__res_is_leader;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__res_is_party_var := {|
    ltype_tp_marker := tint_bool;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _res_is_party;
    ltype_set := update__res_is_party;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__res_is_edge_var := {|
    ltype_tp_marker := tint_bool;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _res_is_edge;
    ltype_set := update__res_is_edge;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__res_has_signed_var := {|
    ltype_tp_marker := tint_bool;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _res_has_signed;
    ltype_set := update__res_has_signed;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__res_can_sign_var := {|
    ltype_tp_marker := tint_bool;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _res_can_sign;
    ltype_set := update__res_can_sign;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.
  Definition DiGraph__res_path_len_var := {|
    ltype_tp_marker := tint_U;

    ltype_ident := Values.Iident 99%positive;
    ltype_ghost := true;

    ltype_get := _res_path_len;
    ltype_set := update__res_path_len;

    ltype_set_ocond := otrue1;
    ltype_get_extra_ocond := otrue1
  |}.

  Definition DiGraph_initialize := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* counterparty : *) int_U_pair nil);
    FC_returns := void_unit_pair;
    FC_body := (CCsequence
      (CCstore
        (LCvar DiGraph__counterparty_var)
        (ECtempvar tint_U 11%positive (* counterparty *)))
      (CCsequence
        (CCstore
          (LCvar DiGraph__party_var)
          (@ECbuiltin0 _ _  _ builtin0_caller_impl))
        (CCsequence
          (CCfor (* i := *) 12%positive 13%positive (ECconst_int256 tint_Z32 0 (Int256.repr 0)) (ECconst_int256 tint_Z32 1 (Int256.repr 1))
            (CCsequence
              (CCstore
                (LCfield tarray_int_AR3_Z Path_struct_path_ident
                  (LCindex tPath_Path
                    (LCvar DiGraph__hashkeyinit_var)
                    (ECtempvar tint_Z32 12%positive (* i *))))
                (ECconst_int256 tarray_int_AR3_Z array_init Int256.zero))
              (CCstore
                (LCfield tint_Z32 Path_struct_nextInd_ident
                  (LCindex tPath_Path
                    (LCvar DiGraph__hashkeyinit_var)
                    (ECtempvar tint_Z32 12%positive (* i *))))
                (ECconst_int256 tint_Z32 0 (Int256.repr 0)))))
          (CClet (* hashkeyinit := *) 14%positive
            (CCload (LCvar DiGraph__hashkeyinit_var))
            (CCsequence
              (CCfor (* i := *) 15%positive 16%positive (ECconst_int256 tint_Z32 0 (Int256.repr 0)) (ECconst_int256 tint_Z32 3 (Int256.repr 3))
                (CCstore
                  (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                    (LCindex tHashkeys_Hashkeys
                      (LCvar DiGraph__innerpathinit_var)
                      (ECtempvar tint_Z32 15%positive (* i *))))
                  (ECtempvar tarray_Path_AR1_Path 14%positive (* hashkeyinit *))))
              (CClet (* innerpathinit := *) 17%positive
                (CCload (LCvar DiGraph__innerpathinit_var))
                (CCsequence
                  (CCfor (* i := *) 18%positive 19%positive (ECconst_int256 tint_Z32 0 (Int256.repr 0)) (ECconst_int256 tint_Z32 3 (Int256.repr 3))
                    (CCstore
                      (LCindex tarray_Hashkeys_AR3_Hashkeys
                        (LCvar DiGraph__allpaths_var)
                        (ECtempvar tint_Z32 18%positive (* i *)))
                      (ECtempvar tarray_Hashkeys_AR3_Hashkeys 17%positive (* innerpathinit *))))
                  (CCyield (ECconst_int256 tvoid_unit tt Int256.zero)))))))))
  |}.
  Lemma DiGraph_initialize_wf
      : synth_func_wellformed DiGraph_initialize.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_initialize_opt :int256 ->  machine_env -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_initialize DiGraph_initialize_wf.
  Definition DiGraph_initialize_spec_hlist_opt args :=
    @apply_param_func DiGraph_initialize.(FC_params) _
                      (DiGraph_initialize_opt) args.
  Definition DiGraph_initialize_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_initialize DiGraph_initialize_wf.

  Definition DiGraph_initialize_prim := {|
    PRIMident := ident_DiGraph_initialize;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := DiGraph_initialize.(FC_params);
    PRIMret_marker := DiGraph_initialize.(FC_returns);
    PRIMcond := DiGraph_initialize_spec_cond;
    (* PRIMsem := DiGraph_initialize_spec_hlist; *)
    PRIMsem_opt := DiGraph_initialize_spec_hlist_opt
  |}.

  Lemma DiGraph_initialize_spec_hlist_opt_eq :
    DiGraph_initialize_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_initialize DiGraph_initialize_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_initialize_cfun :=
  Eval cbv in synth_func_func DiGraph_initialize.

  Definition DiGraph_initialize_cond  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_initialize DiGraph_initialize_wf
								      a0 me d.
  
  Lemma DiGraph_initialize_cond_eq : forall  a0 me d, 
    DiGraph_initialize_cond  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_initialize DiGraph_initialize_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_initialize_obligation  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_initialize DiGraph_initialize_wf
								      a0 me d.
  
  Lemma DiGraph_initialize_obligation_eq : forall  a0 me d, 
    DiGraph_initialize_obligation  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_initialize DiGraph_initialize_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_initialize_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_initialize_opt] in
    fun  a0 me => execStateT (DiGraph_initialize_opt a0 me).
  Lemma DiGraph_initialize_spec_eq :
    DiGraph_initialize_spec =
    fun  a0 me => execStateT (synth_func_spec_opt DiGraph_initialize DiGraph_initialize_wf a0 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_initialize_opt.

  Definition DiGraph_is_leader := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* ld_addr : *) int_U_pair nil);
    FC_returns := int_bool_pair;
    FC_body := (CCsequence
      (CCstore
        (LCvar DiGraph__res_is_leader_var)
        (ECconst_int256 tint_bool false Int256.zero))
      (CCsequence
        (CCfor (* i := *) 12%positive 13%positive (ECconst_int256 tint_Z32 0 (Int256.repr 0)) (ECconst_int256 tint_Z32 1 (Int256.repr 1))
          (CClet (* it := *) 14%positive
            (CCload (LCindex tint_U
              (LCvar DiGraph__leaders_var)
              (ECtempvar tint_Z32 12%positive (* i *))))
            (CCifthenelse (ECbinop tint_bool Oeq
                (ECtempvar tint_U 14%positive (* it *))
                (ECtempvar tint_U 11%positive (* ld_addr *)))
              (CCstore
                (LCvar DiGraph__res_is_leader_var)
                (ECconst_int256 tint_bool true Int256.one))
              (CCyield (ECconst_int256 tvoid_unit tt Int256.zero)))))
        (CClet (* res_is_leader := *) 15%positive
          (CCload (LCvar DiGraph__res_is_leader_var))
          (CCyield (ECtempvar tint_bool 15%positive (* res_is_leader *))))))
  |}.
  Lemma DiGraph_is_leader_wf
      : synth_func_wellformed DiGraph_is_leader.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_is_leader_opt :int256 ->  machine_env -> DS bool  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_is_leader DiGraph_is_leader_wf.
  Definition DiGraph_is_leader_spec_hlist_opt args :=
    @apply_param_func DiGraph_is_leader.(FC_params) _
                      (DiGraph_is_leader_opt) args.
  Definition DiGraph_is_leader_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_is_leader DiGraph_is_leader_wf.

  Definition DiGraph_is_leader_prim := {|
    PRIMident := ident_DiGraph_is_leader;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := DiGraph_is_leader.(FC_params);
    PRIMret_marker := DiGraph_is_leader.(FC_returns);
    PRIMcond := DiGraph_is_leader_spec_cond;
    (* PRIMsem := DiGraph_is_leader_spec_hlist; *)
    PRIMsem_opt := DiGraph_is_leader_spec_hlist_opt
  |}.

  Lemma DiGraph_is_leader_spec_hlist_opt_eq :
    DiGraph_is_leader_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_is_leader DiGraph_is_leader_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_is_leader_cfun :=
  Eval cbv in synth_func_func DiGraph_is_leader.

  Definition DiGraph_is_leader_cond  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_is_leader DiGraph_is_leader_wf
								      a0 me d.
  
  Lemma DiGraph_is_leader_cond_eq : forall  a0 me d, 
    DiGraph_is_leader_cond  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_is_leader DiGraph_is_leader_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_is_leader_obligation  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_is_leader DiGraph_is_leader_wf
								      a0 me d.
  
  Lemma DiGraph_is_leader_obligation_eq : forall  a0 me d, 
    DiGraph_is_leader_obligation  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_is_leader DiGraph_is_leader_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_is_leader_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_is_leader_opt] in
    fun  a0 me => runStateT (DiGraph_is_leader_opt a0 me).
  Lemma DiGraph_is_leader_spec_eq :
    DiGraph_is_leader_spec =
    fun  a0 me => runStateT (synth_func_spec_opt DiGraph_is_leader DiGraph_is_leader_wf a0 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_is_leader_opt.

  Definition DiGraph_is_party := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* pt_addr : *) int_U_pair nil);
    FC_returns := int_bool_pair;
    FC_body := (CCsequence
      (CCstore
        (LCvar DiGraph__res_is_party_var)
        (ECconst_int256 tint_bool false Int256.zero))
      (CCsequence
        (CCfor (* i := *) 12%positive 13%positive (ECconst_int256 tint_Z32 0 (Int256.repr 0)) (ECconst_int256 tint_Z32 3 (Int256.repr 3))
          (CClet (* it := *) 14%positive
            (CCload (LCindex tint_U
              (LCvar DiGraph__parties_var)
              (ECtempvar tint_Z32 12%positive (* i *))))
            (CCifthenelse (ECbinop tint_bool Oeq
                (ECtempvar tint_U 14%positive (* it *))
                (ECtempvar tint_U 11%positive (* pt_addr *)))
              (CCstore
                (LCvar DiGraph__res_is_party_var)
                (ECconst_int256 tint_bool true Int256.one))
              (CCyield (ECconst_int256 tvoid_unit tt Int256.zero)))))
        (CClet (* res_is_party := *) 15%positive
          (CCload (LCvar DiGraph__res_is_party_var))
          (CCyield (ECtempvar tint_bool 15%positive (* res_is_party *))))))
  |}.
  Lemma DiGraph_is_party_wf
      : synth_func_wellformed DiGraph_is_party.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_is_party_opt :int256 ->  machine_env -> DS bool  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_is_party DiGraph_is_party_wf.
  Definition DiGraph_is_party_spec_hlist_opt args :=
    @apply_param_func DiGraph_is_party.(FC_params) _
                      (DiGraph_is_party_opt) args.
  Definition DiGraph_is_party_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_is_party DiGraph_is_party_wf.

  Definition DiGraph_is_party_prim := {|
    PRIMident := ident_DiGraph_is_party;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := DiGraph_is_party.(FC_params);
    PRIMret_marker := DiGraph_is_party.(FC_returns);
    PRIMcond := DiGraph_is_party_spec_cond;
    (* PRIMsem := DiGraph_is_party_spec_hlist; *)
    PRIMsem_opt := DiGraph_is_party_spec_hlist_opt
  |}.

  Lemma DiGraph_is_party_spec_hlist_opt_eq :
    DiGraph_is_party_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_is_party DiGraph_is_party_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_is_party_cfun :=
  Eval cbv in synth_func_func DiGraph_is_party.

  Definition DiGraph_is_party_cond  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_is_party DiGraph_is_party_wf
								      a0 me d.
  
  Lemma DiGraph_is_party_cond_eq : forall  a0 me d, 
    DiGraph_is_party_cond  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_is_party DiGraph_is_party_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_is_party_obligation  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_is_party DiGraph_is_party_wf
								      a0 me d.
  
  Lemma DiGraph_is_party_obligation_eq : forall  a0 me d, 
    DiGraph_is_party_obligation  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_is_party DiGraph_is_party_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_is_party_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_is_party_opt] in
    fun  a0 me => runStateT (DiGraph_is_party_opt a0 me).
  Lemma DiGraph_is_party_spec_eq :
    DiGraph_is_party_spec =
    fun  a0 me => runStateT (synth_func_spec_opt DiGraph_is_party DiGraph_is_party_wf a0 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_is_party_opt.

  Definition DiGraph_is_edge := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* src : *) int_U_pair (cons (* dst : *) int_U_pair nil));
    FC_returns := int_bool_pair;
    FC_body := (CCsequence
      (CCstore
        (LCvar DiGraph__res_is_edge_var)
        (ECconst_int256 tint_bool false Int256.zero))
      (CCsequence
        (CCfor (* i := *) 13%positive 14%positive (ECconst_int256 tint_Z32 0 (Int256.repr 0)) (ECconst_int256 tint_Z32 3 (Int256.repr 3))
          (CClet (* it := *) 15%positive
            (CCload (LCindex tint_U
              (LChash tarray_int_AR3_Z
                (LCvar DiGraph__edges_var)
                (ECtempvar tint_U 11%positive (* src *)))
              (ECtempvar tint_Z32 13%positive (* i *))))
            (CCifthenelse (ECbinop tint_bool Oeq
                (ECtempvar tint_U 15%positive (* it *))
                (ECtempvar tint_U 12%positive (* dst *)))
              (CCstore
                (LCvar DiGraph__res_is_edge_var)
                (ECconst_int256 tint_bool true Int256.one))
              (CCyield (ECconst_int256 tvoid_unit tt Int256.zero)))))
        (CClet (* res_is_edge := *) 16%positive
          (CCload (LCvar DiGraph__res_is_edge_var))
          (CCyield (ECtempvar tint_bool 16%positive (* res_is_edge *))))))
  |}.
  Lemma DiGraph_is_edge_wf
      : synth_func_wellformed DiGraph_is_edge.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_is_edge_opt :int256 -> int256 ->  machine_env -> DS bool  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_is_edge DiGraph_is_edge_wf.
  Definition DiGraph_is_edge_spec_hlist_opt args :=
    @apply_param_func DiGraph_is_edge.(FC_params) _
                      (DiGraph_is_edge_opt) args.
  Definition DiGraph_is_edge_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_is_edge DiGraph_is_edge_wf.

  Definition DiGraph_is_edge_prim := {|
    PRIMident := ident_DiGraph_is_edge;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := DiGraph_is_edge.(FC_params);
    PRIMret_marker := DiGraph_is_edge.(FC_returns);
    PRIMcond := DiGraph_is_edge_spec_cond;
    (* PRIMsem := DiGraph_is_edge_spec_hlist; *)
    PRIMsem_opt := DiGraph_is_edge_spec_hlist_opt
  |}.

  Lemma DiGraph_is_edge_spec_hlist_opt_eq :
    DiGraph_is_edge_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_is_edge DiGraph_is_edge_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_is_edge_cfun :=
  Eval cbv in synth_func_func DiGraph_is_edge.

  Definition DiGraph_is_edge_cond  a0 a1 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_is_edge DiGraph_is_edge_wf
								      a0 a1 me d.
  
  Lemma DiGraph_is_edge_cond_eq : forall  a0 a1 me d, 
    DiGraph_is_edge_cond  a0 a1 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_is_edge DiGraph_is_edge_wf  a0 a1 me d.
    Proof.
      intros  a0 a1 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_is_edge_obligation  a0 a1 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_is_edge DiGraph_is_edge_wf
								      a0 a1 me d.
  
  Lemma DiGraph_is_edge_obligation_eq : forall  a0 a1 me d, 
    DiGraph_is_edge_obligation  a0 a1 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_is_edge DiGraph_is_edge_wf  a0 a1 me d.
    Proof.
      intros  a0 a1 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_is_edge_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_is_edge_opt] in
    fun  a0 a1 me => runStateT (DiGraph_is_edge_opt a0 a1 me).
  Lemma DiGraph_is_edge_spec_eq :
    DiGraph_is_edge_spec =
    fun  a0 a1 me => runStateT (synth_func_spec_opt DiGraph_is_edge DiGraph_is_edge_wf a0 a1 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_is_edge_opt.

  Definition DiGraph_get_leader_ind := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* ld_addr : *) int_U_pair nil);
    FC_returns := int_Z32_pair;
    FC_body := (CClet (* res := *) 12%positive
      (CCload (LChash tint_Z32
        (LCvar DiGraph__leader_addr_to_ind_var)
        (ECtempvar tint_U 11%positive (* ld_addr *))))
      (CCyield (ECtempvar tint_Z32 12%positive (* res *))))
  |}.
  Lemma DiGraph_get_leader_ind_wf
      : synth_func_wellformed DiGraph_get_leader_ind.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_get_leader_ind_opt :int256 ->  machine_env -> DS Z32  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_get_leader_ind DiGraph_get_leader_ind_wf.
  Definition DiGraph_get_leader_ind_spec_hlist_opt args :=
    @apply_param_func DiGraph_get_leader_ind.(FC_params) _
                      (DiGraph_get_leader_ind_opt) args.
  Definition DiGraph_get_leader_ind_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_get_leader_ind DiGraph_get_leader_ind_wf.

  Definition DiGraph_get_leader_ind_prim := {|
    PRIMident := ident_DiGraph_get_leader_ind;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := true;
    PRIMargt_marker := DiGraph_get_leader_ind.(FC_params);
    PRIMret_marker := DiGraph_get_leader_ind.(FC_returns);
    PRIMcond := DiGraph_get_leader_ind_spec_cond;
    (* PRIMsem := DiGraph_get_leader_ind_spec_hlist; *)
    PRIMsem_opt := DiGraph_get_leader_ind_spec_hlist_opt
  |}.

  Lemma DiGraph_get_leader_ind_spec_hlist_opt_eq :
    DiGraph_get_leader_ind_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_get_leader_ind DiGraph_get_leader_ind_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_get_leader_ind_cfun :=
  Eval cbv in synth_func_func DiGraph_get_leader_ind.

  Definition DiGraph_get_leader_ind_cond  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_get_leader_ind DiGraph_get_leader_ind_wf
								      a0 me d.
  
  Lemma DiGraph_get_leader_ind_cond_eq : forall  a0 me d, 
    DiGraph_get_leader_ind_cond  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_get_leader_ind DiGraph_get_leader_ind_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_get_leader_ind_obligation  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_get_leader_ind DiGraph_get_leader_ind_wf
								      a0 me d.
  
  Lemma DiGraph_get_leader_ind_obligation_eq : forall  a0 me d, 
    DiGraph_get_leader_ind_obligation  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_get_leader_ind DiGraph_get_leader_ind_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_get_leader_ind_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_get_leader_ind_opt] in
    fun  a0 me => evalStateT (DiGraph_get_leader_ind_opt a0 me).
  Lemma DiGraph_get_leader_ind_spec_eq :
    DiGraph_get_leader_ind_spec =
    fun  a0 me => evalStateT (synth_func_spec_opt DiGraph_get_leader_ind DiGraph_get_leader_ind_wf a0 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_get_leader_ind_opt.

  Definition DiGraph_get_party_ind := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* pt_addr : *) int_U_pair nil);
    FC_returns := int_Z32_pair;
    FC_body := (CClet (* res := *) 12%positive
      (CCload (LChash tint_Z32
        (LCvar DiGraph__party_addr_to_ind_var)
        (ECtempvar tint_U 11%positive (* pt_addr *))))
      (CCyield (ECtempvar tint_Z32 12%positive (* res *))))
  |}.
  Lemma DiGraph_get_party_ind_wf
      : synth_func_wellformed DiGraph_get_party_ind.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_get_party_ind_opt :int256 ->  machine_env -> DS Z32  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_get_party_ind DiGraph_get_party_ind_wf.
  Definition DiGraph_get_party_ind_spec_hlist_opt args :=
    @apply_param_func DiGraph_get_party_ind.(FC_params) _
                      (DiGraph_get_party_ind_opt) args.
  Definition DiGraph_get_party_ind_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_get_party_ind DiGraph_get_party_ind_wf.

  Definition DiGraph_get_party_ind_prim := {|
    PRIMident := ident_DiGraph_get_party_ind;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := true;
    PRIMargt_marker := DiGraph_get_party_ind.(FC_params);
    PRIMret_marker := DiGraph_get_party_ind.(FC_returns);
    PRIMcond := DiGraph_get_party_ind_spec_cond;
    (* PRIMsem := DiGraph_get_party_ind_spec_hlist; *)
    PRIMsem_opt := DiGraph_get_party_ind_spec_hlist_opt
  |}.

  Lemma DiGraph_get_party_ind_spec_hlist_opt_eq :
    DiGraph_get_party_ind_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_get_party_ind DiGraph_get_party_ind_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_get_party_ind_cfun :=
  Eval cbv in synth_func_func DiGraph_get_party_ind.

  Definition DiGraph_get_party_ind_cond  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_get_party_ind DiGraph_get_party_ind_wf
								      a0 me d.
  
  Lemma DiGraph_get_party_ind_cond_eq : forall  a0 me d, 
    DiGraph_get_party_ind_cond  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_get_party_ind DiGraph_get_party_ind_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_get_party_ind_obligation  a0 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_get_party_ind DiGraph_get_party_ind_wf
								      a0 me d.
  
  Lemma DiGraph_get_party_ind_obligation_eq : forall  a0 me d, 
    DiGraph_get_party_ind_obligation  a0 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_get_party_ind DiGraph_get_party_ind_wf  a0 me d.
    Proof.
      intros  a0 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_get_party_ind_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_get_party_ind_opt] in
    fun  a0 me => evalStateT (DiGraph_get_party_ind_opt a0 me).
  Lemma DiGraph_get_party_ind_spec_eq :
    DiGraph_get_party_ind_spec =
    fun  a0 me => evalStateT (synth_func_spec_opt DiGraph_get_party_ind DiGraph_get_party_ind_wf a0 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_get_party_ind_opt.

  Definition DiGraph_valid_path := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* party_addr : *) int_U_pair (cons (* counterparty_addr : *) int_U_pair (cons (* leader_addr : *) int_U_pair nil)));
    FC_returns := int_bool_pair;
    FC_body := (CClet (* pt_ind := *) 14%positive
      (CCload (LChash tint_Z32
        (LCvar DiGraph__party_addr_to_ind_var)
        (ECtempvar tint_U 11%positive (* party_addr *))))
      (CClet (* counterpt_ind := *) 15%positive
        (CCload (LChash tint_Z32
          (LCvar DiGraph__party_addr_to_ind_var)
          (ECtempvar tint_U 12%positive (* counterparty_addr *))))
        (CClet (* ld_ind := *) 16%positive
          (CCload (LChash tint_Z32
            (LCvar DiGraph__leader_addr_to_ind_var)
            (ECtempvar tint_U 13%positive (* leader_addr *))))
          (CClet (* path_len := *) 17%positive
            (CCload (LCfield tint_Z32 Path_struct_nextInd_ident
              (LCindex tPath_Path
                (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                  (LCindex tHashkeys_Hashkeys
                    (LCindex tarray_Hashkeys_AR3_Hashkeys
                      (LCvar DiGraph__allpaths_var)
                      (ECtempvar tint_Z32 15%positive (* counterpt_ind *)))
                    (ECtempvar tint_Z32 14%positive (* pt_ind *))))
                (ECtempvar tint_Z32 16%positive (* ld_ind *)))))
            (CCifthenelse (ECbinop tint_bool Oeq
                (ECtempvar tint_Z32 17%positive (* path_len *))
                (ECconst_int256 tint_Z32 0 (Int256.repr 0)))
              (CCyield (ECconst_int256 tint_bool false Int256.zero))
              (CClet (* first_signer := *) 18%positive
                (CCload (LCindex tint_U
                  (LCfield tarray_int_AR3_Z Path_struct_path_ident
                    (LCindex tPath_Path
                      (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                        (LCindex tHashkeys_Hashkeys
                          (LCindex tarray_Hashkeys_AR3_Hashkeys
                            (LCvar DiGraph__allpaths_var)
                            (ECtempvar tint_Z32 15%positive (* counterpt_ind *)))
                          (ECtempvar tint_Z32 14%positive (* pt_ind *))))
                      (ECtempvar tint_Z32 16%positive (* ld_ind *))))
                  (ECconst_int256 tint_Z32 0 (Int256.repr 0))))
                (CClet (* last_signer := *) 19%positive
                  (CCload (LCindex tint_U
                    (LCfield tarray_int_AR3_Z Path_struct_path_ident
                      (LCindex tPath_Path
                        (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                          (LCindex tHashkeys_Hashkeys
                            (LCindex tarray_Hashkeys_AR3_Hashkeys
                              (LCvar DiGraph__allpaths_var)
                              (ECtempvar tint_Z32 15%positive (* counterpt_ind *)))
                            (ECtempvar tint_Z32 14%positive (* pt_ind *))))
                        (ECtempvar tint_Z32 16%positive (* ld_ind *))))
                    (ECbinop tint_Z32 Osub
                      (ECtempvar tint_Z32 17%positive (* path_len *))
                      (ECconst_int256 tint_Z32 1 (Int256.repr 1)))))
                  (CCyield (ECbinop tint_bool Oand
                    (ECbinop tint_bool Oeq
                      (ECtempvar tint_U 18%positive (* first_signer *))
                      (ECtempvar tint_U 13%positive (* leader_addr *)))
                    (ECbinop tint_bool Oeq
                      (ECtempvar tint_U 19%positive (* last_signer *))
                      (ECtempvar tint_U 12%positive (* counterparty_addr *))))))))))))
  |}.
  Lemma DiGraph_valid_path_wf
      : synth_func_wellformed DiGraph_valid_path.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_valid_path_opt :int256 -> int256 -> int256 ->  machine_env -> DS bool  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_valid_path DiGraph_valid_path_wf.
  Definition DiGraph_valid_path_spec_hlist_opt args :=
    @apply_param_func DiGraph_valid_path.(FC_params) _
                      (DiGraph_valid_path_opt) args.
  Definition DiGraph_valid_path_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_valid_path DiGraph_valid_path_wf.

  Definition DiGraph_valid_path_prim := {|
    PRIMident := ident_DiGraph_valid_path;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := true;
    PRIMargt_marker := DiGraph_valid_path.(FC_params);
    PRIMret_marker := DiGraph_valid_path.(FC_returns);
    PRIMcond := DiGraph_valid_path_spec_cond;
    (* PRIMsem := DiGraph_valid_path_spec_hlist; *)
    PRIMsem_opt := DiGraph_valid_path_spec_hlist_opt
  |}.

  Lemma DiGraph_valid_path_spec_hlist_opt_eq :
    DiGraph_valid_path_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_valid_path DiGraph_valid_path_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_valid_path_cfun :=
  Eval cbv in synth_func_func DiGraph_valid_path.

  Definition DiGraph_valid_path_cond  a0 a1 a2 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_valid_path DiGraph_valid_path_wf
								      a0 a1 a2 me d.
  
  Lemma DiGraph_valid_path_cond_eq : forall  a0 a1 a2 me d, 
    DiGraph_valid_path_cond  a0 a1 a2 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_valid_path DiGraph_valid_path_wf  a0 a1 a2 me d.
    Proof.
      intros  a0 a1 a2 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_valid_path_obligation  a0 a1 a2 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_valid_path DiGraph_valid_path_wf
								      a0 a1 a2 me d.
  
  Lemma DiGraph_valid_path_obligation_eq : forall  a0 a1 a2 me d, 
    DiGraph_valid_path_obligation  a0 a1 a2 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_valid_path DiGraph_valid_path_wf  a0 a1 a2 me d.
    Proof.
      intros  a0 a1 a2 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_valid_path_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_valid_path_opt] in
    fun  a0 a1 a2 me => evalStateT (DiGraph_valid_path_opt a0 a1 a2 me).
  Lemma DiGraph_valid_path_spec_eq :
    DiGraph_valid_path_spec =
    fun  a0 a1 a2 me => evalStateT (synth_func_spec_opt DiGraph_valid_path DiGraph_valid_path_wf a0 a1 a2 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_valid_path_opt.

  Definition DiGraph_sign_follower := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* party_addr : *) int_U_pair (cons (* counterparty_addr : *) int_U_pair (cons (* src_addr : *) int_U_pair (cons (* leader_addr : *) int_U_pair nil))));
    FC_returns := void_unit_pair;
    FC_body := (CCsequence
      (CCassert (CCyield (ECbinop tint_bool Oeq
        (ECtempvar tint_U 12%positive (* counterparty_addr *))
        (@ECbuiltin0 _ _  _ builtin0_caller_impl))))
      (CClet (* pt_ind := *) 16%positive
        (CCload (LChash tint_Z32
          (LCvar DiGraph__party_addr_to_ind_var)
          (ECtempvar tint_U 11%positive (* party_addr *))))
        (CClet (* counterpt_ind := *) 17%positive
          (CCload (LChash tint_Z32
            (LCvar DiGraph__party_addr_to_ind_var)
            (ECtempvar tint_U 12%positive (* counterparty_addr *))))
          (CClet (* ld_ind := *) 18%positive
            (CCload (LChash tint_Z32
              (LCvar DiGraph__leader_addr_to_ind_var)
              (ECtempvar tint_U 14%positive (* leader_addr *))))
            (CClet (* src_ind := *) 19%positive
              (CCload (LChash tint_Z32
                (LCvar DiGraph__party_addr_to_ind_var)
                (ECtempvar tint_U 13%positive (* src_addr *))))
              (CClet (* next_ind := *) 20%positive
                (CCload (LCfield tint_Z32 Path_struct_nextInd_ident
                  (LCindex tPath_Path
                    (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                      (LCindex tHashkeys_Hashkeys
                        (LCindex tarray_Hashkeys_AR3_Hashkeys
                          (LCvar DiGraph__allpaths_var)
                          (ECtempvar tint_Z32 19%positive (* src_ind *)))
                        (ECtempvar tint_Z32 17%positive (* counterpt_ind *))))
                    (ECtempvar tint_Z32 18%positive (* ld_ind *)))))
                (CCsequence
                  (CCassert (CCyield (ECbinop tint_bool Ogt
                    (ECtempvar tint_Z32 20%positive (* next_ind *))
                    (ECconst_int256 tint_Z32 0 (Int256.repr 0)))))
                  (CClet (* last_signer := *) 22%positive
                    (CCload (LCindex tint_U
                      (LCfield tarray_int_AR3_Z Path_struct_path_ident
                        (LCindex tPath_Path
                          (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                            (LCindex tHashkeys_Hashkeys
                              (LCindex tarray_Hashkeys_AR3_Hashkeys
                                (LCvar DiGraph__allpaths_var)
                                (ECtempvar tint_Z32 19%positive (* src_ind *)))
                              (ECtempvar tint_Z32 17%positive (* counterpt_ind *))))
                          (ECtempvar tint_Z32 18%positive (* ld_ind *))))
                      (ECbinop tint_Z32 Osub
                        (ECtempvar tint_Z32 20%positive (* next_ind *))
                        (ECconst_int256 tint_Z32 1 (Int256.repr 1)))))
                    (CCsequence
                      (CCassert (CCyield (ECbinop tint_bool Oeq
                        (ECtempvar tint_U 22%positive (* last_signer *))
                        (ECtempvar tint_U 13%positive (* src_addr *)))))
                      (CCsequence
                        (CCfor (* i := *) 24%positive 25%positive (ECconst_int256 tint_Z32 0 (Int256.repr 0)) (ECtempvar tint_Z32 20%positive (* next_ind *))
                          (CClet (* to_copy := *) 26%positive
                            (CCload (LCindex tint_U
                              (LCfield tarray_int_AR3_Z Path_struct_path_ident
                                (LCindex tPath_Path
                                  (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                                    (LCindex tHashkeys_Hashkeys
                                      (LCindex tarray_Hashkeys_AR3_Hashkeys
                                        (LCvar DiGraph__allpaths_var)
                                        (ECtempvar tint_Z32 19%positive (* src_ind *)))
                                      (ECtempvar tint_Z32 17%positive (* counterpt_ind *))))
                                  (ECtempvar tint_Z32 18%positive (* ld_ind *))))
                              (ECtempvar tint_Z32 24%positive (* i *))))
                            (CCstore
                              (LCindex tint_U
                                (LCfield tarray_int_AR3_Z Path_struct_path_ident
                                  (LCindex tPath_Path
                                    (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                                      (LCindex tHashkeys_Hashkeys
                                        (LCindex tarray_Hashkeys_AR3_Hashkeys
                                          (LCvar DiGraph__allpaths_var)
                                          (ECtempvar tint_Z32 17%positive (* counterpt_ind *)))
                                        (ECtempvar tint_Z32 16%positive (* pt_ind *))))
                                    (ECtempvar tint_Z32 18%positive (* ld_ind *))))
                                (ECtempvar tint_Z32 24%positive (* i *)))
                              (ECtempvar tint_U 26%positive (* to_copy *)))))
                        (CCsequence
                          (CCstore
                            (LCindex tint_U
                              (LCfield tarray_int_AR3_Z Path_struct_path_ident
                                (LCindex tPath_Path
                                  (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                                    (LCindex tHashkeys_Hashkeys
                                      (LCindex tarray_Hashkeys_AR3_Hashkeys
                                        (LCvar DiGraph__allpaths_var)
                                        (ECtempvar tint_Z32 17%positive (* counterpt_ind *)))
                                      (ECtempvar tint_Z32 16%positive (* pt_ind *))))
                                  (ECtempvar tint_Z32 18%positive (* ld_ind *))))
                              (ECtempvar tint_Z32 20%positive (* next_ind *)))
                            (ECtempvar tint_U 12%positive (* counterparty_addr *)))
                          (CCsequence
                            (CCstore
                              (LCfield tint_Z32 Path_struct_nextInd_ident
                                (LCindex tPath_Path
                                  (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                                    (LCindex tHashkeys_Hashkeys
                                      (LCindex tarray_Hashkeys_AR3_Hashkeys
                                        (LCvar DiGraph__allpaths_var)
                                        (ECtempvar tint_Z32 17%positive (* counterpt_ind *)))
                                      (ECtempvar tint_Z32 16%positive (* pt_ind *))))
                                  (ECtempvar tint_Z32 18%positive (* ld_ind *))))
                              (ECbinop tint_Z32 Oadd
                                (ECtempvar tint_Z32 20%positive (* next_ind *))
                                (ECconst_int256 tint_Z32 1 (Int256.repr 1))))
                            (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))))))))))))))
  |}.
  Lemma DiGraph_sign_follower_wf
      : synth_func_wellformed DiGraph_sign_follower.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_sign_follower_opt :int256 -> int256 -> int256 -> int256 ->  machine_env -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_sign_follower DiGraph_sign_follower_wf.
  Definition DiGraph_sign_follower_spec_hlist_opt args :=
    @apply_param_func DiGraph_sign_follower.(FC_params) _
                      (DiGraph_sign_follower_opt) args.
  Definition DiGraph_sign_follower_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_sign_follower DiGraph_sign_follower_wf.

  Definition DiGraph_sign_follower_prim := {|
    PRIMident := ident_DiGraph_sign_follower;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := DiGraph_sign_follower.(FC_params);
    PRIMret_marker := DiGraph_sign_follower.(FC_returns);
    PRIMcond := DiGraph_sign_follower_spec_cond;
    (* PRIMsem := DiGraph_sign_follower_spec_hlist; *)
    PRIMsem_opt := DiGraph_sign_follower_spec_hlist_opt
  |}.

  Lemma DiGraph_sign_follower_spec_hlist_opt_eq :
    DiGraph_sign_follower_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_sign_follower DiGraph_sign_follower_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_sign_follower_cfun :=
  Eval cbv in synth_func_func DiGraph_sign_follower.

  Definition DiGraph_sign_follower_cond  a0 a1 a2 a3 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    ht_ft_cond a3 -> ht_valid_ft_cond a3 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_sign_follower DiGraph_sign_follower_wf
								      a0 a1 a2 a3 me d.
  
  Lemma DiGraph_sign_follower_cond_eq : forall  a0 a1 a2 a3 me d, 
    DiGraph_sign_follower_cond  a0 a1 a2 a3 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    ht_ft_cond a3 -> ht_valid_ft_cond a3 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_sign_follower DiGraph_sign_follower_wf  a0 a1 a2 a3 me d.
    Proof.
      intros  a0 a1 a2 a3 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_sign_follower_obligation  a0 a1 a2 a3 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    ht_ft_cond a3 -> ht_valid_ft_cond a3 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_sign_follower DiGraph_sign_follower_wf
								      a0 a1 a2 a3 me d.
  
  Lemma DiGraph_sign_follower_obligation_eq : forall  a0 a1 a2 a3 me d, 
    DiGraph_sign_follower_obligation  a0 a1 a2 a3 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    ht_ft_cond a3 -> ht_valid_ft_cond a3 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_sign_follower DiGraph_sign_follower_wf  a0 a1 a2 a3 me d.
    Proof.
      intros  a0 a1 a2 a3 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_sign_follower_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_sign_follower_opt] in
    fun  a0 a1 a2 a3 me => execStateT (DiGraph_sign_follower_opt a0 a1 a2 a3 me).
  Lemma DiGraph_sign_follower_spec_eq :
    DiGraph_sign_follower_spec =
    fun  a0 a1 a2 a3 me => execStateT (synth_func_spec_opt DiGraph_sign_follower DiGraph_sign_follower_wf a0 a1 a2 a3 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_sign_follower_opt.

  Definition DiGraph_sign_leader := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* party_addr : *) int_U_pair (cons (* counterparty_addr : *) int_U_pair (cons (* leader_addr : *) int_U_pair nil)));
    FC_returns := void_unit_pair;
    FC_body := (CCsequence
      (CCassert (CCyield (ECbinop tint_bool Oeq
        (ECtempvar tint_U 12%positive (* counterparty_addr *))
        (@ECbuiltin0 _ _  _ builtin0_caller_impl))))
      (CCsequence
        (CCassert (CCyield (ECbinop tint_bool Oeq
          (ECtempvar tint_U 13%positive (* leader_addr *))
          (@ECbuiltin0 _ _  _ builtin0_caller_impl))))
        (CClet (* pt_ind := *) 16%positive
          (CCload (LChash tint_Z32
            (LCvar DiGraph__party_addr_to_ind_var)
            (ECtempvar tint_U 11%positive (* party_addr *))))
          (CClet (* counterpt_ind := *) 17%positive
            (CCload (LChash tint_Z32
              (LCvar DiGraph__party_addr_to_ind_var)
              (ECtempvar tint_U 12%positive (* counterparty_addr *))))
            (CClet (* ld_ind := *) 18%positive
              (CCload (LChash tint_Z32
                (LCvar DiGraph__leader_addr_to_ind_var)
                (ECtempvar tint_U 13%positive (* leader_addr *))))
              (CClet (* path_len := *) 19%positive
                (CCload (LCfield tint_Z32 Path_struct_nextInd_ident
                  (LCindex tPath_Path
                    (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                      (LCindex tHashkeys_Hashkeys
                        (LCindex tarray_Hashkeys_AR3_Hashkeys
                          (LCvar DiGraph__allpaths_var)
                          (ECtempvar tint_Z32 17%positive (* counterpt_ind *)))
                        (ECtempvar tint_Z32 16%positive (* pt_ind *))))
                    (ECtempvar tint_Z32 18%positive (* ld_ind *)))))
                (CCsequence
                  (CCassert (CCyield (ECbinop tint_bool Oeq
                    (ECtempvar tint_Z32 19%positive (* path_len *))
                    (ECconst_int256 tint_Z32 0 (Int256.repr 0)))))
                  (CCsequence
                    (CCstore
                      (LCindex tint_U
                        (LCfield tarray_int_AR3_Z Path_struct_path_ident
                          (LCindex tPath_Path
                            (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                              (LCindex tHashkeys_Hashkeys
                                (LCindex tarray_Hashkeys_AR3_Hashkeys
                                  (LCvar DiGraph__allpaths_var)
                                  (ECtempvar tint_Z32 17%positive (* counterpt_ind *)))
                                (ECtempvar tint_Z32 16%positive (* pt_ind *))))
                            (ECtempvar tint_Z32 18%positive (* ld_ind *))))
                        (ECconst_int256 tint_Z32 0 (Int256.repr 0)))
                      (ECtempvar tint_U 13%positive (* leader_addr *)))
                    (CCsequence
                      (CCstore
                        (LCfield tint_Z32 Path_struct_nextInd_ident
                          (LCindex tPath_Path
                            (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                              (LCindex tHashkeys_Hashkeys
                                (LCindex tarray_Hashkeys_AR3_Hashkeys
                                  (LCvar DiGraph__allpaths_var)
                                  (ECtempvar tint_Z32 17%positive (* counterpt_ind *)))
                                (ECtempvar tint_Z32 16%positive (* pt_ind *))))
                            (ECtempvar tint_Z32 18%positive (* ld_ind *))))
                        (ECbinop tint_Z32 Oadd
                          (ECtempvar tint_Z32 19%positive (* path_len *))
                          (ECconst_int256 tint_Z32 1 (Int256.repr 1))))
                      (CCyield (ECconst_int256 tvoid_unit tt Int256.zero)))))))))))
  |}.
  Lemma DiGraph_sign_leader_wf
      : synth_func_wellformed DiGraph_sign_leader.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_sign_leader_opt :int256 -> int256 -> int256 ->  machine_env -> DS unit  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_sign_leader DiGraph_sign_leader_wf.
  Definition DiGraph_sign_leader_spec_hlist_opt args :=
    @apply_param_func DiGraph_sign_leader.(FC_params) _
                      (DiGraph_sign_leader_opt) args.
  Definition DiGraph_sign_leader_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_sign_leader DiGraph_sign_leader_wf.

  Definition DiGraph_sign_leader_prim := {|
    PRIMident := ident_DiGraph_sign_leader;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := DiGraph_sign_leader.(FC_params);
    PRIMret_marker := DiGraph_sign_leader.(FC_returns);
    PRIMcond := DiGraph_sign_leader_spec_cond;
    (* PRIMsem := DiGraph_sign_leader_spec_hlist; *)
    PRIMsem_opt := DiGraph_sign_leader_spec_hlist_opt
  |}.

  Lemma DiGraph_sign_leader_spec_hlist_opt_eq :
    DiGraph_sign_leader_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_sign_leader DiGraph_sign_leader_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_sign_leader_cfun :=
  Eval cbv in synth_func_func DiGraph_sign_leader.

  Definition DiGraph_sign_leader_cond  a0 a1 a2 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_sign_leader DiGraph_sign_leader_wf
								      a0 a1 a2 me d.
  
  Lemma DiGraph_sign_leader_cond_eq : forall  a0 a1 a2 me d, 
    DiGraph_sign_leader_cond  a0 a1 a2 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_sign_leader DiGraph_sign_leader_wf  a0 a1 a2 me d.
    Proof.
      intros  a0 a1 a2 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_sign_leader_obligation  a0 a1 a2 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_sign_leader DiGraph_sign_leader_wf
								      a0 a1 a2 me d.
  
  Lemma DiGraph_sign_leader_obligation_eq : forall  a0 a1 a2 me d, 
    DiGraph_sign_leader_obligation  a0 a1 a2 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_sign_leader DiGraph_sign_leader_wf  a0 a1 a2 me d.
    Proof.
      intros  a0 a1 a2 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_sign_leader_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_sign_leader_opt] in
    fun  a0 a1 a2 me => execStateT (DiGraph_sign_leader_opt a0 a1 a2 me).
  Lemma DiGraph_sign_leader_spec_eq :
    DiGraph_sign_leader_spec =
    fun  a0 a1 a2 me => execStateT (synth_func_spec_opt DiGraph_sign_leader DiGraph_sign_leader_wf a0 a1 a2 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_sign_leader_opt.

  Definition DiGraph_can_sign_follower := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* party_addr : *) int_U_pair (cons (* counterparty_addr : *) int_U_pair (cons (* leader_addr : *) int_U_pair nil)));
    FC_returns := int_bool_pair;
    FC_body := (CCsequence
      (CCassert (CCyield (ECbinop tint_bool Oeq
        (ECtempvar tint_U 12%positive (* counterparty_addr *))
        (@ECbuiltin0 _ _  _ builtin0_caller_impl))))
      (CCsequence
        (CCstore
          (LCvar DiGraph__res_can_sign_var)
          (ECconst_int256 tint_bool false Int256.zero))
        (CClet (* ld_ind := *) 15%positive
          (CCload (LChash tint_Z32
            (LCvar DiGraph__leader_addr_to_ind_var)
            (ECtempvar tint_U 13%positive (* leader_addr *))))
          (CClet (* self_ind := *) 16%positive
            (CCload (LChash tint_Z32
              (LCvar DiGraph__party_addr_to_ind_var)
              (ECtempvar tint_U 12%positive (* counterparty_addr *))))
            (CCsequence
              (CCfor (* i := *) 17%positive 18%positive (ECconst_int256 tint_Z32 0 (Int256.repr 0)) (ECconst_int256 tint_Z32 3 (Int256.repr 3))
                (CClet (* dst_addr := *) 19%positive
                  (CCload (LCindex tint_U
                    (LChash tarray_int_AR3_Z
                      (LCvar DiGraph__edges_var)
                      (ECtempvar tint_U 12%positive (* counterparty_addr *)))
                    (ECtempvar tint_Z32 17%positive (* i *))))
                  (CCifthenelse (ECbinop tint_bool Oeq
                      (ECtempvar tint_U 19%positive (* dst_addr *))
                      (ECconst_int256 tint_U (Int256.repr 0) (Int256.repr 0)))
                    (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))
                    (CClet (* dst_ind := *) 20%positive
                      (CCload (LChash tint_Z32
                        (LCvar DiGraph__party_addr_to_ind_var)
                        (ECtempvar tint_U 19%positive (* dst_addr *))))
                      (CClet (* next_ind := *) 21%positive
                        (CCload (LCfield tint_Z32 Path_struct_nextInd_ident
                          (LCindex tPath_Path
                            (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                              (LCindex tHashkeys_Hashkeys
                                (LCindex tarray_Hashkeys_AR3_Hashkeys
                                  (LCvar DiGraph__allpaths_var)
                                  (ECtempvar tint_Z32 20%positive (* dst_ind *)))
                                (ECtempvar tint_Z32 16%positive (* self_ind *))))
                            (ECtempvar tint_Z32 15%positive (* ld_ind *)))))
                        (CCifthenelse (ECbinop tint_bool Oeq
                            (ECtempvar tint_Z32 21%positive (* next_ind *))
                            (ECconst_int256 tint_Z32 0 (Int256.repr 0)))
                          (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))
                          (CClet (* last_signer := *) 22%positive
                            (CCload (LCindex tint_U
                              (LCfield tarray_int_AR3_Z Path_struct_path_ident
                                (LCindex tPath_Path
                                  (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                                    (LCindex tHashkeys_Hashkeys
                                      (LCindex tarray_Hashkeys_AR3_Hashkeys
                                        (LCvar DiGraph__allpaths_var)
                                        (ECtempvar tint_Z32 20%positive (* dst_ind *)))
                                      (ECtempvar tint_Z32 16%positive (* self_ind *))))
                                  (ECtempvar tint_Z32 15%positive (* ld_ind *))))
                              (ECbinop tint_Z32 Osub
                                (ECtempvar tint_Z32 21%positive (* next_ind *))
                                (ECconst_int256 tint_Z32 1 (Int256.repr 1)))))
                            (CCifthenelse (ECbinop tint_bool Oeq
                                (ECtempvar tint_U 22%positive (* last_signer *))
                                (ECtempvar tint_U 19%positive (* dst_addr *)))
                              (CCstore
                                (LCvar DiGraph__res_can_sign_var)
                                (ECconst_int256 tint_bool true Int256.one))
                              (CCyield (ECconst_int256 tvoid_unit tt Int256.zero))))))))))
              (CClet (* res_can_sign := *) 23%positive
                (CCload (LCvar DiGraph__res_can_sign_var))
                (CCyield (ECtempvar tint_bool 23%positive (* res_can_sign *)))))))))
  |}.
  Lemma DiGraph_can_sign_follower_wf
      : synth_func_wellformed DiGraph_can_sign_follower.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_can_sign_follower_opt :int256 -> int256 -> int256 ->  machine_env -> DS bool  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_can_sign_follower DiGraph_can_sign_follower_wf.
  Definition DiGraph_can_sign_follower_spec_hlist_opt args :=
    @apply_param_func DiGraph_can_sign_follower.(FC_params) _
                      (DiGraph_can_sign_follower_opt) args.
  Definition DiGraph_can_sign_follower_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_can_sign_follower DiGraph_can_sign_follower_wf.

  Definition DiGraph_can_sign_follower_prim := {|
    PRIMident := ident_DiGraph_can_sign_follower;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := DiGraph_can_sign_follower.(FC_params);
    PRIMret_marker := DiGraph_can_sign_follower.(FC_returns);
    PRIMcond := DiGraph_can_sign_follower_spec_cond;
    (* PRIMsem := DiGraph_can_sign_follower_spec_hlist; *)
    PRIMsem_opt := DiGraph_can_sign_follower_spec_hlist_opt
  |}.

  Lemma DiGraph_can_sign_follower_spec_hlist_opt_eq :
    DiGraph_can_sign_follower_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_can_sign_follower DiGraph_can_sign_follower_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_can_sign_follower_cfun :=
  Eval cbv in synth_func_func DiGraph_can_sign_follower.

  Definition DiGraph_can_sign_follower_cond  a0 a1 a2 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_can_sign_follower DiGraph_can_sign_follower_wf
								      a0 a1 a2 me d.
  
  Lemma DiGraph_can_sign_follower_cond_eq : forall  a0 a1 a2 me d, 
    DiGraph_can_sign_follower_cond  a0 a1 a2 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_can_sign_follower DiGraph_can_sign_follower_wf  a0 a1 a2 me d.
    Proof.
      intros  a0 a1 a2 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_can_sign_follower_obligation  a0 a1 a2 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_can_sign_follower DiGraph_can_sign_follower_wf
								      a0 a1 a2 me d.
  
  Lemma DiGraph_can_sign_follower_obligation_eq : forall  a0 a1 a2 me d, 
    DiGraph_can_sign_follower_obligation  a0 a1 a2 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_can_sign_follower DiGraph_can_sign_follower_wf  a0 a1 a2 me d.
    Proof.
      intros  a0 a1 a2 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_can_sign_follower_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_can_sign_follower_opt] in
    fun  a0 a1 a2 me => runStateT (DiGraph_can_sign_follower_opt a0 a1 a2 me).
  Lemma DiGraph_can_sign_follower_spec_eq :
    DiGraph_can_sign_follower_spec =
    fun  a0 a1 a2 me => runStateT (synth_func_spec_opt DiGraph_can_sign_follower DiGraph_can_sign_follower_wf a0 a1 a2 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_can_sign_follower_opt.

  Definition DiGraph_get_path_len := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* party_addr : *) int_U_pair (cons (* counterparty_addr : *) int_U_pair (cons (* leader_addr : *) int_U_pair nil)));
    FC_returns := int_U_pair;
    FC_body := (CCsequence
      (CCstore
        (LCvar DiGraph__res_path_len_var)
        (ECconst_int256 tint_U (Int256.repr 0) (Int256.repr 0)))
      (CClet (* pt_ind := *) 14%positive
        (CCload (LChash tint_Z32
          (LCvar DiGraph__party_addr_to_ind_var)
          (ECtempvar tint_U 11%positive (* party_addr *))))
        (CClet (* counterpt_ind := *) 15%positive
          (CCload (LChash tint_Z32
            (LCvar DiGraph__party_addr_to_ind_var)
            (ECtempvar tint_U 12%positive (* counterparty_addr *))))
          (CClet (* ld_ind := *) 16%positive
            (CCload (LChash tint_Z32
              (LCvar DiGraph__leader_addr_to_ind_var)
              (ECtempvar tint_U 13%positive (* leader_addr *))))
            (CClet (* path_len := *) 17%positive
              (CCload (LCfield tint_Z32 Path_struct_nextInd_ident
                (LCindex tPath_Path
                  (LCfield tarray_Path_AR1_Path Hashkeys_struct_toleader_ident
                    (LCindex tHashkeys_Hashkeys
                      (LCindex tarray_Hashkeys_AR3_Hashkeys
                        (LCvar DiGraph__allpaths_var)
                        (ECtempvar tint_Z32 15%positive (* counterpt_ind *)))
                      (ECtempvar tint_Z32 14%positive (* pt_ind *))))
                  (ECtempvar tint_Z32 16%positive (* ld_ind *)))))
              (CCsequence
                (CCfor (* i := *) 18%positive 19%positive (ECconst_int256 tint_Z32 0 (Int256.repr 0)) (ECtempvar tint_Z32 17%positive (* path_len *))
                  (CClet (* old_val := *) 20%positive
                    (CCload (LCvar DiGraph__res_path_len_var))
                    (CCstore
                      (LCvar DiGraph__res_path_len_var)
                      (ECbinop tint_U Oadd
                        (ECtempvar tint_U 20%positive (* old_val *))
                        (ECconst_int256 tint_U (Int256.repr 1) (Int256.repr 1))))))
                (CClet (* res_path_len := *) 21%positive
                  (CCload (LCvar DiGraph__res_path_len_var))
                  (CCyield (ECtempvar tint_U 21%positive (* res_path_len *))))))))))
  |}.
  Lemma DiGraph_get_path_len_wf
      : synth_func_wellformed DiGraph_get_path_len.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_get_path_len_opt :int256 -> int256 -> int256 ->  machine_env -> DS int256  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_get_path_len DiGraph_get_path_len_wf.
  Definition DiGraph_get_path_len_spec_hlist_opt args :=
    @apply_param_func DiGraph_get_path_len.(FC_params) _
                      (DiGraph_get_path_len_opt) args.
  Definition DiGraph_get_path_len_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_get_path_len DiGraph_get_path_len_wf.

  Definition DiGraph_get_path_len_prim := {|
    PRIMident := ident_DiGraph_get_path_len;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := false;
    PRIMargt_marker := DiGraph_get_path_len.(FC_params);
    PRIMret_marker := DiGraph_get_path_len.(FC_returns);
    PRIMcond := DiGraph_get_path_len_spec_cond;
    (* PRIMsem := DiGraph_get_path_len_spec_hlist; *)
    PRIMsem_opt := DiGraph_get_path_len_spec_hlist_opt
  |}.

  Lemma DiGraph_get_path_len_spec_hlist_opt_eq :
    DiGraph_get_path_len_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_get_path_len DiGraph_get_path_len_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_get_path_len_cfun :=
  Eval cbv in synth_func_func DiGraph_get_path_len.

  Definition DiGraph_get_path_len_cond  a0 a1 a2 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_get_path_len DiGraph_get_path_len_wf
								      a0 a1 a2 me d.
  
  Lemma DiGraph_get_path_len_cond_eq : forall  a0 a1 a2 me d, 
    DiGraph_get_path_len_cond  a0 a1 a2 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_get_path_len DiGraph_get_path_len_wf  a0 a1 a2 me d.
    Proof.
      intros  a0 a1 a2 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_get_path_len_obligation  a0 a1 a2 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_get_path_len DiGraph_get_path_len_wf
								      a0 a1 a2 me d.
  
  Lemma DiGraph_get_path_len_obligation_eq : forall  a0 a1 a2 me d, 
    DiGraph_get_path_len_obligation  a0 a1 a2 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    ht_ft_cond a2 -> ht_valid_ft_cond a2 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_get_path_len DiGraph_get_path_len_wf  a0 a1 a2 me d.
    Proof.
      intros  a0 a1 a2 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_get_path_len_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_get_path_len_opt] in
    fun  a0 a1 a2 me => runStateT (DiGraph_get_path_len_opt a0 a1 a2 me).
  Lemma DiGraph_get_path_len_spec_eq :
    DiGraph_get_path_len_spec =
    fun  a0 a1 a2 me => runStateT (synth_func_spec_opt DiGraph_get_path_len DiGraph_get_path_len_wf a0 a1 a2 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_get_path_len_opt.

  Definition DiGraph_diam := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := nil;
    FC_returns := int_U_pair;
    FC_body := (CCyield (ECconst_int256 tint_U (Int256.repr 3) (Int256.repr 3)))
  |}.
  Lemma DiGraph_diam_wf
      : synth_func_wellformed DiGraph_diam.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_diam_opt : machine_env -> DS int256  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_diam DiGraph_diam_wf.
  Definition DiGraph_diam_spec_hlist_opt args :=
    @apply_param_func DiGraph_diam.(FC_params) _
                      (DiGraph_diam_opt) args.
  Definition DiGraph_diam_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_diam DiGraph_diam_wf.

  Definition DiGraph_diam_prim := {|
    PRIMident := ident_DiGraph_diam;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := true;
    PRIMargt_marker := DiGraph_diam.(FC_params);
    PRIMret_marker := DiGraph_diam.(FC_returns);
    PRIMcond := DiGraph_diam_spec_cond;
    (* PRIMsem := DiGraph_diam_spec_hlist; *)
    PRIMsem_opt := DiGraph_diam_spec_hlist_opt
  |}.

  Lemma DiGraph_diam_spec_hlist_opt_eq :
    DiGraph_diam_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_diam DiGraph_diam_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_diam_cfun :=
  Eval cbv in synth_func_func DiGraph_diam.

  Definition DiGraph_diam_cond  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    high_level_invariant d ->
    synth_func_cond DiGraph_diam DiGraph_diam_wf
								      me d.
  
  Lemma DiGraph_diam_cond_eq : forall  me d, 
    DiGraph_diam_cond  me d ->
    high_level_invariant d ->
    synth_func_cond DiGraph_diam DiGraph_diam_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_diam_obligation  me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    high_level_invariant d ->
    synth_func_obligation DiGraph_diam DiGraph_diam_wf
								      me d.
  
  Lemma DiGraph_diam_obligation_eq : forall  me d, 
    DiGraph_diam_obligation  me d ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_diam DiGraph_diam_wf  me d.
    Proof.
      intros  me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_diam_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_diam_opt] in
    fun  me => evalStateT (DiGraph_diam_opt me).
  Lemma DiGraph_diam_spec_eq :
    DiGraph_diam_spec =
    fun  me => evalStateT (synth_func_spec_opt DiGraph_diam DiGraph_diam_wf me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_diam_opt.

  Definition DiGraph_maxpathlen := {|
    FC_ident_start := BuiltinBase_local_ident_start;
    FC_params := (cons (* pt : *) int_U_pair (cons (* ld : *) int_U_pair nil));
    FC_returns := int_U_pair;
    FC_body := (CClet (* parties := *) 13%positive
      (CCrespec_opt
        (AList.set 12%positive int_U_pair (AList.set 11%positive int_U_pair (@AList.empty hyper_type_pair)))
        (CCpanic tint_list_Z)
        (fun se => ret (nil)))
      (CClet (* leaders := *) 14%positive
        (CCrespec_opt
          (AList.set 13%positive int_list_Z_pair (AList.set 12%positive int_U_pair (AList.set 11%positive int_U_pair (@AList.empty hyper_type_pair))))
          (CCpanic tint_list_Z)
          (fun se => ret (nil)))
        (CClet (* is_party := *) 15%positive
          (CCrespec_opt
            (AList.set 14%positive int_list_Z_pair (AList.set 13%positive int_list_Z_pair (AList.set 12%positive int_U_pair (AList.set 11%positive int_U_pair (@AList.empty hyper_type_pair)))))
            (CCpanic tint_bool)
            (fun se => @bind _ (@Monad_DS GlobalLayerSpec) _ _ get (fun d =>
            let a := (fix in_list_fix a lds := match lds with | nil => false | (cons d rest) => if (Int256.eq a d) then true else (in_list_aux a rest) end)
                 (SpecTree.get 11%positive (* pt *) se)
                 (SpecTree.get 13%positive (* parties *) se) in
@ret _ (@Monad_DS GlobalLayerSpec) _ a
             )))
          (CClet (* is_leader := *) 16%positive
            (CCrespec_opt
              (AList.set 15%positive int_bool_pair (AList.set 14%positive int_list_Z_pair (AList.set 13%positive int_list_Z_pair (AList.set 12%positive int_U_pair (AList.set 11%positive int_U_pair (@AList.empty hyper_type_pair))))))
              (CCpanic tint_bool)
              (fun se => @bind _ (@Monad_DS GlobalLayerSpec) _ _ get (fun d =>
              let a := (fix in_list_fix a lds := match lds with | nil => false | (cons d rest) => if (Int256.eq a d) then true else (in_list_aux a rest) end)
                   (SpecTree.get 12%positive (* ld *) se)
                   (SpecTree.get 14%positive (* leaders *) se) in
@ret _ (@Monad_DS GlobalLayerSpec) _ a
               )))
            (CClet (* res := *) 17%positive
              (CCrespec_opt
                (AList.set 16%positive int_bool_pair (AList.set 15%positive int_bool_pair (AList.set 14%positive int_list_Z_pair (AList.set 13%positive int_list_Z_pair (AList.set 12%positive int_U_pair (AList.set 11%positive int_U_pair (@AList.empty hyper_type_pair)))))))
                (CCpanic tint_U)
                (fun se => @bind _ (@Monad_DS GlobalLayerSpec) _ _ get (fun d =>
                let a := (fun pt ld => Int256.one)
                     (SpecTree.get 11%positive (* pt *) se)
                     (SpecTree.get 12%positive (* ld *) se) in
@ret _ (@Monad_DS GlobalLayerSpec) _ a
                 )))
              (CCsequence
                (CCassert (CCyield (ECtempvar tint_bool 15%positive (* is_party *))))
                (CCsequence
                  (CCassert (CCyield (ECtempvar tint_bool 16%positive (* is_leader *))))
                  (CCyield (ECtempvar tint_U 17%positive (* res *))))))))))
  |}.
  Lemma DiGraph_maxpathlen_wf
      : synth_func_wellformed DiGraph_maxpathlen.
  Proof. solve_wellformed. Defined.
  Definition DiGraph_maxpathlen_opt :int256 -> int256 ->  machine_env -> DS int256  := 
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in synth_func_spec_opt DiGraph_maxpathlen DiGraph_maxpathlen_wf.
  Definition DiGraph_maxpathlen_spec_hlist_opt args :=
    @apply_param_func DiGraph_maxpathlen.(FC_params) _
                      (DiGraph_maxpathlen_opt) args.
  Definition DiGraph_maxpathlen_spec_cond :=
   (*Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             omap2 oand2 oimply2 oabsorption2 hlist_param_func (* SpecTree.get SpecTree.get_eq SpecTree.set *)
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
  in *)
  synth_func_spec_cond DiGraph_maxpathlen DiGraph_maxpathlen_wf.

  Definition DiGraph_maxpathlen_prim := {|
    PRIMident := ident_DiGraph_maxpathlen;
    (* PRIMcc := AST.cc_default; *)
    PRIMghost := false;
    PRIMpure := true;
    PRIMargt_marker := DiGraph_maxpathlen.(FC_params);
    PRIMret_marker := DiGraph_maxpathlen.(FC_returns);
    PRIMcond := DiGraph_maxpathlen_spec_cond;
    (* PRIMsem := DiGraph_maxpathlen_spec_hlist; *)
    PRIMsem_opt := DiGraph_maxpathlen_spec_hlist_opt
  |}.

  Lemma DiGraph_maxpathlen_spec_hlist_opt_eq :
    DiGraph_maxpathlen_spec_hlist_opt =
    fun args => apply_param_func
      (synth_func_spec_opt DiGraph_maxpathlen DiGraph_maxpathlen_wf)
      args.
  Proof.
    (*cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify
             GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]. *)
     reflexivity. 
  Qed.
  Definition DiGraph_maxpathlen_cfun :=
  Eval cbv in synth_func_func DiGraph_maxpathlen.

  Definition DiGraph_maxpathlen_cond  a0 a1 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_maxpathlen DiGraph_maxpathlen_wf
								      a0 a1 me d.
  
  Lemma DiGraph_maxpathlen_cond_eq : forall  a0 a1 me d, 
    DiGraph_maxpathlen_cond  a0 a1 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_cond DiGraph_maxpathlen DiGraph_maxpathlen_wf  a0 a1 me d.
    Proof.
      intros  a0 a1 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_maxpathlen_obligation  a0 a1 me d  :=
  Eval cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events]
    in
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_maxpathlen DiGraph_maxpathlen_wf
								      a0 a1 me d.
  
  Lemma DiGraph_maxpathlen_obligation_eq : forall  a0 a1 me d, 
    DiGraph_maxpathlen_obligation  a0 a1 me d ->
    ht_ft_cond a0 -> ht_valid_ft_cond a0 ->
    ht_ft_cond a1 -> ht_valid_ft_cond a1 ->
    high_level_invariant d ->
    synth_func_obligation DiGraph_maxpathlen DiGraph_maxpathlen_wf  a0 a1 me d.
    Proof.
      intros  a0 a1 me d H_cond.
      cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
             ret bind mzero get put gets guard modify runStateT evalStateT execStateT
             is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set hlist_hd
             (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
             _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
       exact H_cond.
    Qed.

  Definition DiGraph_maxpathlen_spec :=
  Eval cbv [sf_mem sf_return fst snd DiGraph_maxpathlen_opt] in
    fun  a0 a1 me => evalStateT (DiGraph_maxpathlen_opt a0 a1 me).
  Lemma DiGraph_maxpathlen_spec_eq :
    DiGraph_maxpathlen_spec =
    fun  a0 a1 me => evalStateT (synth_func_spec_opt DiGraph_maxpathlen DiGraph_maxpathlen_wf a0 a1 me).
  Proof.
    cbv -[Int256.modulus zeq zle zlt Z.iter Z.le Z.lt Z.gt Z.ge Z.eqb Z.leb Z.ltb Z.geb Z.gtb Z.mul Z.div Z.modulo Z.add Z.sub Z.shiftl Z.shiftr Z.lxor Z.land Z.lor Int256.add Int256.sub Int256.mul Int256.modu Int256.divu Int256.cmpu Int256.not Int256.and Int256.or Int256.xor Int256.shl Int256.shru Ziteri Z.of_nat List.length HyperType.Hquery0 hashvalue_eqb
          ret bind mzero get put gets guard modify
          GetHighData is_true bool_dec ZMap.get ZMap.set Int256Tree.get Int256Tree.set
          (fun src e_set => (Int256Map.get src e_set)) (fun pt ld => Int256.one)
          _leaders update__leaders _parties update__parties _edges update__edges _edges_reverse update__edges_reverse _party_addr_to_ind update__party_addr_to_ind _leader_addr_to_ind update__leader_addr_to_ind _party update__party _counterparty update__counterparty _hashkeyinit update__hashkeyinit _innerpathinit update__innerpathinit _allpaths update__allpaths _res_is_leader update__res_is_leader _res_is_party update__res_is_party _res_is_edge update__res_is_edge _res_has_signed update__res_has_signed _res_can_sign update__res_can_sign _res_path_len update__res_path_len _events update__events].
    reflexivity.
  Qed.

Global Opaque DiGraph_maxpathlen_opt.
End OBJECT_DiGraph_DEFINITION.
(* (*Temporarily omitted in the Ethereum version.*)

Section LAYER_EVMOPCODE_DEFINITION.
  Definition EVMOPCODE_evm_transfer_prim := EVMOpcode_transfer_prim.
  Definition EVMOPCODE_digraph_initialize_prim := DiGraph_initialize_prim.
  Definition EVMOPCODE_digraph_is_leader_prim := DiGraph_is_leader_prim.
  Definition EVMOPCODE_digraph_is_party_prim := DiGraph_is_party_prim.
  Definition EVMOPCODE_digraph_is_edge_prim := DiGraph_is_edge_prim.
  Definition EVMOPCODE_digraph_get_leader_ind_prim := DiGraph_get_leader_ind_prim.
  Definition EVMOPCODE_digraph_get_party_ind_prim := DiGraph_get_party_ind_prim.
  Definition EVMOPCODE_digraph_valid_path_prim := DiGraph_valid_path_prim.
  Definition EVMOPCODE_digraph_sign_follower_prim := DiGraph_sign_follower_prim.
  Definition EVMOPCODE_digraph_sign_leader_prim := DiGraph_sign_leader_prim.
  Definition EVMOPCODE_digraph_can_sign_follower_prim := DiGraph_can_sign_follower_prim.
  Definition EVMOPCODE_digraph_get_path_len_prim := DiGraph_get_path_len_prim.
  Definition EVMOPCODE_digraph_diam_prim := DiGraph_diam_prim.
  Definition EVMOPCODE_digraph_maxpathlen_prim := DiGraph_maxpathlen_prim.

  Class EVMOPCODE_preserves_invariants := {
    EVMOPCODE_EVMOpcode_transfer_preserves_invariants :>
      CompatGenSem.PreservesInvariants EVMOpcode_transfer_spec;
    EVMOPCODE_DiGraph_initialize_preserves_invariants :>
      CompatGenSem.PreservesInvariants DiGraph_initialize_spec;
    EVMOPCODE_DiGraph_is_leader_preserves_invariants :>
      CompatGenSem.PreservesInvariants DiGraph_is_leader_spec;
    EVMOPCODE_DiGraph_is_party_preserves_invariants :>
      CompatGenSem.PreservesInvariants DiGraph_is_party_spec;
    EVMOPCODE_DiGraph_is_edge_preserves_invariants :>
      CompatGenSem.PreservesInvariants DiGraph_is_edge_spec;
    EVMOPCODE_DiGraph_sign_follower_preserves_invariants :>
      CompatGenSem.PreservesInvariants DiGraph_sign_follower_spec;
    EVMOPCODE_DiGraph_sign_leader_preserves_invariants :>
      CompatGenSem.PreservesInvariants DiGraph_sign_leader_spec;
    EVMOPCODE_DiGraph_can_sign_follower_preserves_invariants :>
      CompatGenSem.PreservesInvariants DiGraph_can_sign_follower_spec;
    EVMOPCODE_DiGraph_get_path_len_preserves_invariants :>
      CompatGenSem.PreservesInvariants DiGraph_get_path_len_spec
  }.
  Context`{EVMOPCODE_pres_inv : !EVMOPCODE_preserves_invariants}.

  Definition EVMOPCODE_Layer : CompatLayerDef.compatlayer GetHighDataX :=
    transfer ↦ CompatGenSem.gensem EVMOpcode_transfer_spec
      ⊕ initialize ↦ CompatGenSem.gensem DiGraph_initialize_spec
      ⊕ is_leader ↦ CompatGenSem.gensem DiGraph_is_leader_spec
      ⊕ is_party ↦ CompatGenSem.gensem DiGraph_is_party_spec
      ⊕ is_edge ↦ CompatGenSem.gensem DiGraph_is_edge_spec
      ⊕ get_leader_ind ↦ CompatGenSem.gensem DiGraph_get_leader_ind_spec
      ⊕ get_party_ind ↦ CompatGenSem.gensem DiGraph_get_party_ind_spec
      ⊕ valid_path ↦ CompatGenSem.gensem DiGraph_valid_path_spec
      ⊕ sign_follower ↦ CompatGenSem.gensem DiGraph_sign_follower_spec
      ⊕ sign_leader ↦ CompatGenSem.gensem DiGraph_sign_leader_spec
      ⊕ can_sign_follower ↦ CompatGenSem.gensem DiGraph_can_sign_follower_spec
      ⊕ get_path_len ↦ CompatGenSem.gensem DiGraph_get_path_len_spec
      ⊕ diam ↦ CompatGenSem.gensem DiGraph_diam_spec
      ⊕ maxpathlen ↦ CompatGenSem.gensem DiGraph_maxpathlen_spec.
End LAYER_EVMOPCODE_DEFINITION.
*)
End EdsgerGen.
